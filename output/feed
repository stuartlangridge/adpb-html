<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>as days pass by</title><link>//www.kryogenix.org/days/</link><description>scratched tallies on the prison wall</description><atom:link href="//www.kryogenix.org/days/feed" rel="self"></atom:link><lastBuildDate>Sun, 25 Mar 2018 23:36:00 +0100</lastBuildDate><item><title>Squares and prettier graphs</title><link>//www.kryogenix.org/days/2018/03/25/squares-and-prettier-graphs/</link><description>&lt;p&gt;The &lt;a href="https://www.futilitycloset.com/"&gt;Futility Closet&lt;/a&gt; people recently posted &amp;#8220;&lt;a href="https://www.futilitycloset.com/2018/03/24/a-square-circle/"&gt;A Square Circle&lt;/a&gt;&amp;#8220;, in which they&amp;nbsp;showed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;49² + 73² = 7730
77² + 30² = 6829
68² + 29² = 5465
54² + 65² = 7141
71² + 41² = 6722
67² + 22² = 4973
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which is a nice little result. I like this sort of recreational maths, so I spent a little time wondering whether this was the only such cycle, or the longest, or whether there were longer ones. A brief bit of Python scripting later, and the truth is revealed: it&amp;#8217;s not the only cycle, but it is the longest one, with six&amp;nbsp;entries. &lt;/p&gt;
&lt;p&gt;&lt;img src="https://kryogenix.org/images/squares2.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;There are no other 6-cycles; there&amp;#8217;s a 5-cycle (start from &lt;code&gt;68²+50²=7124&lt;/code&gt;), a 4-cycle (&lt;code&gt;47²+56²=5345&lt;/code&gt;) and interestingly two 1-cycles, numbers which lead to themselves: &lt;code&gt;12²+33²=1233&lt;/code&gt; and &lt;code&gt;88²+33²=8833&lt;/code&gt;. That&amp;#8217;s rather&amp;nbsp;cool.&lt;/p&gt;
&lt;p&gt;I did wonder whether there are also interesting cycles with more numbers, so I tried out adding the squares of 3-digit&amp;nbsp;numbers:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://kryogenix.org/images/squares2.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;but sadly they&amp;#8217;re really boring; there&amp;#8217;s a 2-cycle (&lt;code&gt;137²+461²=231290, 231²+290²=137461&lt;/code&gt;), another 1-cycle (&lt;code&gt;990²+100²=990100&lt;/code&gt;) and that&amp;#8217;s it. Nonetheless, quite an interesting little property to fiddle around&amp;nbsp;with.&lt;/p&gt;
&lt;h2&gt;Prettier&amp;nbsp;graphs&lt;/h2&gt;
&lt;p&gt;Originally I was going to make my script count the lengths of the cycles and show the largest one and so on, but I realised that that was annoying and fiddly and what I ought to do is just display a nice picture of them and that&amp;#8217;d be clear to my eyes immediately and take no code at all. My go-to tool for this sort of thing, where I&amp;#8217;m drawing graphs (in the mathematical nodes-and-edges sense) programmatically, is &lt;a href="https://www.graphviz.org/"&gt;Graphviz&lt;/a&gt;, because it&amp;#8217;s really easy; you basically write out your graph as obvious simple words with&amp;nbsp;arrows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;digraph&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;get up&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;go to work&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;go to work&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;come home again&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;come home again&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;go to sleep&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;go to sleep&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;get up&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and then you can make it a graph with one command: &lt;code&gt;dot -Tpng simple.dot &amp;gt; output.png&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://kryogenix.org/images/basic-graphviz.png" alt="A basic graphviz graph of the above code; plain black and white, and not pretty"&gt;&lt;/p&gt;
&lt;p&gt;That looks pretty terrible, though; plain black and white, ugly. I tweaked my graph above to look a bit nicer, with some colours, and that&amp;#8217;s really easy; you just add a few extra properties to the nodes (the things to do) and edges (the arrows) in your graph&amp;nbsp;specification:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;digraph&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rectangle&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rounded,filled&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;gradientangle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;270&amp;quot;&lt;/span&gt; 
        &lt;span class="n"&gt;fillcolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#990033:#f5404f&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#991111&amp;quot;&lt;/span&gt; 
        &lt;span class="n"&gt;fontcolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#ffffff&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;fontname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Arial&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;edge&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#006699&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


    &lt;span class="s"&gt;&amp;quot;get up&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;go to work&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;go to work&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;come home again&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;come home again&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;go to sleep&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;go to sleep&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;get up&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and then you get something a bit&amp;nbsp;nicer:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://kryogenix.org/images/nicer-graphviz.png" alt="Same graph, but with a little colour and niceness"&gt;&lt;/p&gt;
&lt;p&gt;Now, I am no graphic artist. I&amp;#8217;m not good at this stuff. If you&amp;#8217;re thinking &amp;#8220;that looks rubbish; I could make it look &lt;em&gt;loads&lt;/em&gt; nicer&amp;#8221; then great! Please, please do so! I would very much like one of the many graphic artists involved in the open source world to put together a &amp;#8220;theme&amp;#8221; for graphviz that just makes graphs look a bit nicer and classier, by default. Seriously, if you&amp;#8217;ve got an artistic eye this is the sort of thing that&amp;#8217;d probably take you a lunchtime to do. Just pick some nice colours, line widths, arrow shapes, node shapes, and you&amp;#8217;re done. Write a blog post saying &amp;#8220;these are the six lines to add to the top of your graphviz &lt;code&gt;.dot&lt;/code&gt; files&amp;#8221; and that would be a small but measurable service to the universe that you&amp;#8217;ve&amp;nbsp;done.&lt;/p&gt;
&lt;p&gt;The graphviz people are pretty open to the idea of even including such a thing in their releases, maybe even by default. I asked on Twitter whether someone could or had already done this that I&amp;#8217;m asking for, and one of the people who responded was Stephen North, who&amp;#8217;s part of the graphviz team, saying that they&amp;#8217;d be happy to include and publicise such a&amp;nbsp;thing.&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-partner="tweetdeck"&gt;&lt;p lang="en" dir="ltr"&gt;We would definitely include the profiles in our distribution and/or make them easier options to&amp;nbsp;use.&lt;/p&gt;&amp;mdash; Stephen North (@magneticnorth) &lt;a href="https://twitter.com/magneticnorth/status/977690082953097216?ref_src=twsrc%5Etfw"&gt;March 24, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;To be clear, this is not a complaint about the graphviz team themselves; their job is mostly to think very hard about layout algorithms, which they indeed do a good job of. But I think it&amp;#8217;s really important, not just that open source stuff can be made to look pretty if you know what you&amp;#8217;re doing, but also that it &lt;em&gt;already does&lt;/em&gt; look pretty by default where it can. It turns people off your software, no matter how powerful it is, if some less-powerful alternative puts out more attractive output. There are some things where this would take a lot of work; rejigging the entire &lt;span class="caps"&gt;UI&lt;/span&gt; of a complex programme is difficult and time-consuming, absolutely. But I really feel like someone with a decent artistic eye (i.e., not me) could put together a simple set of colours and font choices and line widths that would make graphviz look much nicer either by default or by specifying &lt;code&gt;--pretty&lt;/code&gt; or something, and it wouldn&amp;#8217;t take long at all. I&amp;#8217;d certainly be way happier if that happened. Maybe that person is you, gentle&amp;nbsp;reader?&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Sun, 25 Mar 2018 23:36:00 +0100</pubDate><guid>tag://www.kryogenix.org/days,2018-03-25:2018/03/25/squares-and-prettier-graphs/</guid></item><item><title>Collecting user data while protecting user privacy</title><link>//www.kryogenix.org/days/2018/02/20/collecting-user-data-while-protecting-user-privacy/</link><description>&lt;p&gt;Lots of companies want to collect data about their users. This is a good thing, generally; being data-driven is important, and it&amp;#8217;s jolly hard to know where best to focus your efforts if you don&amp;#8217;t know what your people are like. However, this sort of data collection also gives people a sense of disquiet; what are you going to do with that data about me? How do I get you to stop using it? What conclusions are you drawing from it? I&amp;#8217;ve spoken about &lt;a href="https://kryogenix.org/code/privacy-could-be-the-next-big-thing-hackference/"&gt;this sense of disquiet&lt;/a&gt; in the past, and you can watch (or read) that talk for a lot more detail about how and why people don&amp;#8217;t like&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;So, what can we do about it? As I said, being data-driven is a good thing, and you can&amp;#8217;t be data-driven if you haven&amp;#8217;t got any data to be driven by. How do we enable people to collect data about you without compromising your&amp;nbsp;privacy?&lt;/p&gt;
&lt;p&gt;Well, there are some ways. Before I dive into them, though, a couple of brief asides: there are some people who believe that you shouldn&amp;#8217;t be allowed to collect any data on your users whatsoever; that the mere act of wanting to do so is in itself a compromise of privacy. This is not addressed to those people. What I want is a way that both sides can get what they want: companies and projects can be data-driven, &lt;em&gt;and&lt;/em&gt; users don&amp;#8217;t get their privacy compromised. If what you want is that companies are banned from collecting anything&amp;#8230; this is not for you. Most people are basically &lt;span class="caps"&gt;OK&lt;/span&gt; with the idea of data collection, they just don&amp;#8217;t want to be victimised by it, now or in the future, and it&amp;#8217;s that property that we want to&amp;nbsp;protect.&lt;/p&gt;
&lt;p&gt;Similarly, if you&amp;#8217;re a company who &lt;em&gt;wants&lt;/em&gt; to know everything about each individual one of your users so you can sell that data for money, or exploit it on a user-by-user basis, this isn&amp;#8217;t for you either. Stop doing&amp;nbsp;that.&lt;/p&gt;
&lt;h3&gt;Aggregation&lt;/h3&gt;
&lt;p&gt;The key point here is that, if you&amp;#8217;re collecting data about a load of users, you&amp;#8217;re usually doing so in order to look at it in &lt;em&gt;aggregate&lt;/em&gt;; to draw conclusions about the general trends and the general distribution of your user base. And it&amp;#8217;s possible to do that data collection in ways that maintain the aggregate properties of it while making it hard or impossible for the company to use it to target individual users. That&amp;#8217;s what we want here: some way that the company can still draw correct conclusions from all the data when collected together, while preventing them from targeting individuals or knowing what a specific person&amp;nbsp;said.&lt;/p&gt;
&lt;p&gt;In the 1960s, Warner and Greenberg put together the &lt;a href="https://en.wikipedia.org/wiki/Randomized_response"&gt;randomised response technique&lt;/a&gt; for social science interviews. Basically, the idea here is that if you want to ask people questions about sensitive topics &amp;#8212; have they committed a crime? what are their sexual preferences? &amp;#8212; then you need to be able to draw aggregate conclusions about what percentages of people have done various things, but any one individual&amp;#8217;s ballot shouldn&amp;#8217;t be a confession that can be used against them. The technique varies a lot in exactly how it&amp;#8217;s applied, but the basic concept is that for any question, there&amp;#8217;s a random chance that the answerer should &lt;em&gt;lie&lt;/em&gt; in their response. If some people lie in one direction (saying that they did a thing, when they didn&amp;#8217;t), and the same proportion of people lie in the other direction (saying they didn&amp;#8217;t do the thing when they did), then if you&amp;#8217;ve got enough answerers, all the lies pretty much cancel out. So your aggregate statistics are still pretty much accurate &amp;#8212; you know that X percent of people did the thing &amp;#8212; but any one individual person&amp;#8217;s response isn&amp;#8217;t incriminating, because they might have been lying. This gives us the privacy protection we need for people, while preserving the aggregate properties that allow the survey-analysers to draw accurate&amp;nbsp;conclusions.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s something like whether you&amp;#8217;ll find a ticket inspector on a train. Train companies realised a long time ago that you don&amp;#8217;t need to put a ticket inspector on every single train. Instead, you can put inspectors on &lt;em&gt;enough&lt;/em&gt; trains that the chance of fare-dodgers being caught is high enough that they don&amp;#8217;t want to take the risk. This randomised response is similar; if you get a ballot from someone saying that they smoked marijuana, then you can&amp;#8217;t know whether they were one of those who were randomly selected to lie about their answer, and therefore that answer isn&amp;#8217;t incriminating, but the overall percentage of people who &lt;em&gt;say&lt;/em&gt; they smoked will be roughly equal to the percentage of people who actually &lt;em&gt;did&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;A worked&amp;nbsp;example&lt;/h3&gt;
&lt;p&gt;Let&amp;#8217;s imagine you&amp;#8217;re, say, an operating system vendor. You&amp;#8217;d like to know what sorts of machines your users are installing on (Ubuntu are &lt;a href="https://www.omgubuntu.co.uk/2018/02/ubuntu-data-collection-opt-out"&gt;looking&lt;/a&gt; to do this as most other OSes already do), and so how much &lt;span class="caps"&gt;RAM&lt;/span&gt; those machines have would be a useful figure to know. (Lots of other stats would also be useful, of course, but we&amp;#8217;ll just look at one for now while we&amp;#8217;re explaining the process. And remember this all applies to any statistic you want to collect; it&amp;#8217;s not particular to &lt;span class="caps"&gt;OS&lt;/span&gt; vendors, or &lt;span class="caps"&gt;RAM&lt;/span&gt;. If you want to know how often your users open your app, or what country they&amp;#8217;re in, this process works&amp;nbsp;too.)&lt;/p&gt;
&lt;p&gt;So, we assume that the &lt;em&gt;actual truth&lt;/em&gt; about how much &lt;span class="caps"&gt;RAM&lt;/span&gt; the users&amp;#8217; computers have looks something like this graph. Remember, the company does not know this. They &lt;em&gt;want&lt;/em&gt; to know it, but they currently&amp;nbsp;don&amp;#8217;t.&lt;/p&gt;
&lt;canvas id="graph_truth" class="lie_graphs" width="750" height="350"&gt;&lt;/canvas&gt;

&lt;p&gt;So, how can they collect data to know this graph, without being able to tell how much &lt;span class="caps"&gt;RAM&lt;/span&gt; any one specific user&amp;nbsp;has?&lt;/p&gt;
&lt;p&gt;As described above, the way to do this is to randomise the responses. Let&amp;#8217;s say that we tell 20% of users to lie about their answer, one category up or down. So if you&amp;#8217;ve really got &lt;span class="caps"&gt;8GB&lt;/span&gt; of &lt;span class="caps"&gt;RAM&lt;/span&gt;, then there&amp;#8217;s an 80% chance you tell the truth, and a 20% chance you lie; 10% of users lie in a &amp;#8220;downwards&amp;#8221; direction, so they claim to have &lt;span class="caps"&gt;4GB&lt;/span&gt; of &lt;span class="caps"&gt;RAM&lt;/span&gt; when they&amp;#8217;ve actually got &lt;span class="caps"&gt;8GB&lt;/span&gt;, and 10% of users lie in an &amp;#8220;upwards&amp;#8221; direction and claim to have &lt;span class="caps"&gt;16GB&lt;/span&gt;. Obviously, we wouldn&amp;#8217;t actually have the users lie &amp;#8212; the software that collects this info would randomly either produce the correct information or not with the above probabilities, and people wouldn&amp;#8217;t even know it was doing it; the deliberately incorrect data is only provided to the survey. (Your computer doesn&amp;#8217;t lie to &lt;em&gt;you&lt;/em&gt; about how much &lt;span class="caps"&gt;RAM&lt;/span&gt; it&amp;#8217;s got, just the company.) What does that do to the graph&amp;nbsp;data?&lt;/p&gt;
&lt;canvas id="graph_lies" class="lie_graphs" width="750" height="350"&gt;&lt;/canvas&gt;

&lt;p&gt;We show in this graph the users that gave accurate information in green, and inaccurate lies in red. And the graph looks pretty much the same! Any one given user&amp;#8217;s answers are unreliable and can&amp;#8217;t be trusted, but the overall shape of the graph is pretty similar to the actual truth. There are still peaks at the most popular points, and still troughs at the unpopular ones. Each bar in the graph is reasonably accurate (accuracy figures are shown below each bar, and they&amp;#8217;ll normally be around 90-95%, although because it&amp;#8217;s random it may fluctuate a little for you.) So our company can draw conclusions from this data, and they&amp;#8217;ll be generally correct. They&amp;#8217;ll have to take those conclusions with a small pinch of salt, because we&amp;#8217;ve deliberately introduced inaccuracy into them, but the trends and the overall shape of the data will be&amp;nbsp;good.&lt;/p&gt;
&lt;p&gt;The key point here is that, although &lt;em&gt;you&lt;/em&gt; can see in the graph which answers are truth and which are incorrect, the company &lt;em&gt;can&amp;#8217;t&lt;/em&gt;. They don&amp;#8217;t get told whether an answer is truth or lies; they just get the information and no indication of how true it is. They&amp;#8217;ll know the percentage chance that an answer is untrue, but they won&amp;#8217;t know whether any one given answer&amp;nbsp;is.&lt;/p&gt;
&lt;p&gt;Can we be more inaccurate? Well, here&amp;#8217;s a graph to play with. You can adjust what percentage of users&amp;#8217; computers lie about their survey results by dragging the slider, and see what that does to the&amp;nbsp;data.&lt;/p&gt;
&lt;canvas id="graph_both" class="lie_graphs" width="750" height="700"&gt;&lt;/canvas&gt;

&lt;div id="tweak"&gt;
    &lt;p&gt;0% &lt;input id="lie_range" type="range" min="0" max="0.5" step="0.05" onchange="move_range(this)" value="0.1"&gt;&amp;nbsp;100%&lt;/p&gt;
    &lt;p&gt;&lt;output id="lie_output"&gt;20%&lt;/output&gt; of submissions are deliberately&amp;nbsp;incorrect&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Even if you make &lt;em&gt;every single user&lt;/em&gt; lie about their values, the graph shape isn&amp;#8217;t &lt;em&gt;too&lt;/em&gt; bad. Lying tends to &amp;#8220;flatten out&amp;#8221; the graph; it makes tall peaks less tall, and short troughs more tall, and every single person lying probably flattens out things so much that conclusions you draw are probably now going to be wrong. But you can see from this that it ought to be possible to run the numbers and come up with a &amp;#8220;lie&amp;#8221; percentage which accurately balances the company&amp;#8217;s need for accurate information with the user&amp;#8217;s need to not provide&amp;nbsp;accuracy.&lt;/p&gt;
&lt;p&gt;It is of course critical to this whole procedure that the lies cancel out, which means that they need to be evenly distributed. If everyone just makes up random answers then obviously this doesn&amp;#8217;t work; answers have to start with the truth and then (maybe) lie in one direction or&amp;nbsp;another.&lt;/p&gt;
&lt;p&gt;This is a fairly simple description of this whole process of introducing noise into the data, and data scientists would be able to bring much more learning to bear on this. For example, how much does it affect accuracy if user information can lie by more than one &amp;#8220;step&amp;#8221; in every direction? Do we make it so instead of n% truth and 100-n% lies, we distribute the lies normally across the graph with the centrepoint being the truth? Is it possible to do this data collection without flattening out the graph to such an extent? And the state of the data art has moved on since the 1960s, too: Dwork wrote an influential 2006 paper on &lt;a href="https://en.wikipedia.org/wiki/Differential_privacy"&gt;differential privacy&lt;/a&gt; which goes into this in more detail. Obviously we&amp;#8217;ll be collecting data on more than one number &amp;#8212; someone looking for data on computers on which their &lt;span class="caps"&gt;OS&lt;/span&gt; is installed will want for example version info, network connectivity, lots of hardware stats, device vendor, and so on. And that&amp;#8217;s &lt;span class="caps"&gt;OK&lt;/span&gt;, because it&amp;#8217;s safe to collect this data now&amp;#8230; so how do our accuracy figures change when there are lots of stats and not just one? There will be better statistical ways to quantify &lt;em&gt;how&lt;/em&gt; inaccurate the results are than my simple single-bar percentage measure, and how to tweak the percentage-of-lying to give the best results for everyone. This whole topic seems like something that data scientists in various communities could really get their teeth into and provide great suggestions and help to companies who want to collect data in a responsible&amp;nbsp;way.&lt;/p&gt;
&lt;p&gt;Of course, this applies to &lt;em&gt;any&lt;/em&gt; data you want to collect. Do you want analytics on how often your users open your app? What times of day they do that? Which &lt;span class="caps"&gt;OS&lt;/span&gt; version they&amp;#8217;re on? How long do they spend using it? All your data still works in aggregate, but the things you&amp;#8217;re collecting aren&amp;#8217;t so personally invasive, because you don&amp;#8217;t know if a user&amp;#8217;s records are lies. This needs careful thought &amp;#8212; there has been plenty of research on deanonymising data and similar things, and the &lt;span class="caps"&gt;EFF&lt;/span&gt;&amp;#8217;s &lt;a href="https://panopticlick.eff.org/"&gt;Panopticlick&lt;/a&gt; project shows how a combination of data can be cross-referenced and that needs protecting against too, but that&amp;#8217;s what data science is for; to tune the parameters used here so that individual privacy isn&amp;#8217;t compromised while aggregate properties are&amp;nbsp;preserved.&lt;/p&gt;
&lt;p&gt;If a company is collecting info about you and they&amp;#8217;re not actually interested in tying your submitted records &lt;em&gt;to&lt;/em&gt; you (see previous point about how this doesn&amp;#8217;t apply to companies who &lt;em&gt;do&lt;/em&gt; want to do this, who are a whole different problem), then this in theory isn&amp;#8217;t needed. They don&amp;#8217;t have to collect &lt;span class="caps"&gt;IP&lt;/span&gt; addresses or usernames and record them against each submission, and indeed if they don&amp;#8217;t want that information then they probably don&amp;#8217;t do that. But there&amp;#8217;s always a concern: what if they&amp;#8217;re really doing that and lying about it? Well, this is how we alleviate that problem. Even if a company actually are trying to collect personally-identifiable data and they&amp;#8217;re lying to us about doing that it doesn&amp;#8217;t matter, because we protect ourselves by &amp;#8212; with a specific probability &amp;#8212; lying back to them. And then everyone gets what they want. There&amp;#8217;s a certain sense of justice in&amp;nbsp;that.&lt;/p&gt;
&lt;style&gt;
canvas.lie_graphs {
    width: 100%;
}
#tweak {
    text-align: center;
    background: #dedadf;
    box-shadow: 2px 2px 6px rgba(0,0,0,0.4);
    padding: 0.5em;
    font-size: 80%;
}
#tweak p {
    margin: 0.3em;
}
#tweak input[type=range] {
  -webkit-appearance: none;
  width: 60%;
  margin: 7px 0;
}
#tweak input[type=range]:focus {
  outline: none;
}
#tweak input[type=range]::-webkit-slider-runnable-track {
  width: 100%;
  height: 6px;
  cursor: pointer;
  box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;
  background: #6b00bd;
  border-radius: 6px;
  border: 0px solid #010101;
}
#tweak input[type=range]::-webkit-slider-thumb {
  box-shadow: 2.2px 2.2px 2px rgba(0, 0, 0, 0.7), 0px 0px 2.2px rgba(13, 13, 13, 0.7);
  border: 0px solid #000000;
  height: 20px;
  width: 20px;
  border-radius: 20px;
  background: #868686;
  cursor: pointer;
  -webkit-appearance: none;
  margin-top: -7px;
}
#tweak input[type=range]:focus::-webkit-slider-runnable-track {
  background: #8200e6;
}
#tweak input[type=range]::-moz-range-track {
  width: 100%;
  height: 6px;
  cursor: pointer;
  box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;
  background: #6b00bd;
  border-radius: 6px;
  border: 0px solid #010101;
}
#tweak input[type=range]::-moz-range-thumb {
  box-shadow: 2.2px 2.2px 2px rgba(0, 0, 0, 0.7), 0px 0px 2.2px rgba(13, 13, 13, 0.7);
  border: 0px solid #000000;
  height: 20px;
  width: 20px;
  border-radius: 20px;
  background: #868686;
  cursor: pointer;
}
#tweak input[type=range]::-ms-track {
  width: 100%;
  height: 6px;
  cursor: pointer;
  background: transparent;
  border-color: transparent;
  color: transparent;
}
#tweak input[type=range]::-ms-fill-lower {
  background: #540094;
  border: 0px solid #010101;
  border-radius: 12px;
  box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;
}
#tweak input[type=range]::-ms-fill-upper {
  background: #6b00bd;
  border: 0px solid #010101;
  border-radius: 12px;
  box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;
}
#tweak input[type=range]::-ms-thumb {
  box-shadow: 2.2px 2.2px 2px rgba(0, 0, 0, 0.7), 0px 0px 2.2px rgba(13, 13, 13, 0.7);
  border: 0px solid #000000;
  height: 20px;
  width: 20px;
  border-radius: 20px;
  background: #868686;
  cursor: pointer;
  height: 6px;
}
#tweak input[type=range]:focus::-ms-fill-lower {
  background: #6b00bd;
}
#tweak input[type=range]:focus::-ms-fill-upper {
  background: #8200e6;
}

&lt;/style&gt;

&lt;script&gt;

var BAR_WIDTH = 50;
var BAR_GAP = 10;
var LEFT_MARGIN = 125;
var BOTTOM_MARGIN = 50;
var ram_options_weights = [
    ["&lt;1GB", 20],
    ["1GB", 30],
    ["2GB", 50],
    ["4GB", 150],
    ["8GB", 300],
    ["16GB", 250],
    ["32GB", 100],
    ["64GB", 50],
    ["128GB", 30],
    ["128GB+", 20]
];
var machines = [];
var ram_key_offsets = {};
for (var i=0; i&lt;ram_options_weights.length; i++) {
    ram_key_offsets[ram_options_weights[i][0]] = i;
}
while (ram_options_weights.length &gt; 0) {
    var nxt = ram_options_weights.shift();
    for (var i=0; i&lt;nxt[1]; i++) {
        machines.push({true_value: nxt[0]});
    }
}

function draw_axis(ctx, yoffset, keys, title1, title2) {
    ctx.fillStyle = "black";
    ctx.font = "14px sans-serif";
    var ax_x = 0;
    for (var k in keys) {
        ctx.fillText(k, (ax_x * (BAR_WIDTH + BAR_GAP)) + LEFT_MARGIN, 350 + 350 * yoffset - 30);
        ax_x += 1;
    }
    ctx.fillText(title1, 0, 350 + (350 * yoffset) - 30);
    ctx.fillText(title2, 0, 350 + (350 * yoffset) - 15);
}

function draw_accuracy(ctx, yoffset, keys, real_counts, false_counts) {
    ctx.fillStyle = "black";
    ctx.font = "14px sans-serif";
    var ax_x = 0;
    for (var k in keys) {
        var real_v = real_counts[k];
        var false_v = false_counts[k];
        var diff = Math.abs(false_v - real_v);
        var accuracy = Math.round(100 - (100 * diff / real_v));
        ctx.fillText(accuracy + "%", (ax_x * (BAR_WIDTH + BAR_GAP)) + LEFT_MARGIN, 350 + 350 * yoffset - 15);
        ax_x += 1;
    }
}

function draw_detail(ctx, yoffset, text, text2) {
    ctx.fillStyle = "black";
    ctx.font = "bold 16px sans-serif";
    ctx.fillText(text, 0, 350 * yoffset + 20);
    ctx.fillText(text2, 0 , 350 * yoffset + 40);
}

function clear_graph(ctx, yoffset) {
    // clear the graph rectangle
    ctx.fillStyle = "#eff2f2";
    ctx.fillRect(0, yoffset * 350, 750, 350);
}

function draw_graph(canvas_id, yoffset, machines, keys) {
    var c = document.getElementById(canvas_id);
    var ctx = c.getContext("2d");
    clear_graph(ctx, yoffset);

    var counts = {};

    draw_axis(ctx, yoffset, keys, "Actual RAM", "");
    draw_detail(ctx, yoffset, "True distribution of machines", "");

    ctx.fillStyle = "#6b00bd";
    machines.forEach(function(m) {
        var xidx = keys[m.true_value];
        var xposition = (xidx * (BAR_WIDTH + BAR_GAP)) + LEFT_MARGIN;
        if (!counts[m.true_value]) counts[m.true_value] = 0;
        counts[m.true_value] += 1;
        var yposition = 350 - (counts[m.true_value] + BOTTOM_MARGIN);
        ctx.fillRect(xposition, yposition, BAR_WIDTH, 1);
        m.xposition = xposition;
        m.yposition = yposition;
    });
}

function move_graph(canvas_id, yoffset, machines, keys, lie_chance, has_parent) {
    // this time, we flash each line on the original graph before drawing it
    // and we draw lines in green for truth, or red for lies, on the new graph
    var c = document.getElementById(canvas_id);
    var ctx = c.getContext("2d");
    clear_graph(ctx, yoffset);

    var counts = {};

    draw_axis(ctx, yoffset, keys, "Reported RAM", "Accuracy");
    draw_detail(ctx, yoffset, "Distribution of machines with " + (lie_chance * 2 * 100) + "%", "of submissions deliberately incorrect");

    var real_counts = {};
    machines.forEach(function(m) {
        if (!real_counts[m.true_value]) real_counts[m.true_value] = 0;
        real_counts[m.true_value] += 1;
    })

    var machines_copy = JSON.parse(JSON.stringify(machines));
    var idx_to_keys = {};
    for (var k in keys) { idx_to_keys[keys[k]] = k; }
    function process_one_machine(count) {
        var m = machines_copy.shift();
        if (!m) {
            draw_accuracy(ctx, yoffset, keys, real_counts, counts);
            return;
        }

        var xidx = keys[m.true_value];
        // now, lie about the value, with a lie_chance chance of lying downwards
        // and the same for lying upwards
        var r = Math.random();
        var lied = false;
        if (r &lt;= lie_chance) {
            // lie downwards
            xidx -= 1;
            lied = true;
        } else if (r &gt;= 1.0 - lie_chance) {
            xidx += 1;
            lied = true;
        }
        xidx = xidx % Object.keys(keys).length;
        if (xidx &lt; 0) xidx = Object.keys(keys).length + xidx;
        var new_value = idx_to_keys[xidx];

        var new_xposition = (xidx * (BAR_WIDTH + BAR_GAP)) + LEFT_MARGIN;
        if (!counts[new_value]) counts[new_value] = 0;
        counts[new_value] += 1;
        var new_yposition = yoffset * 350 + (350 - (counts[new_value] + BOTTOM_MARGIN));

        // Fill our new one in its new position, in red or green for lied or not
        ctx.fillStyle = lied ? "#ec4137" : "#52bd00";
        ctx.fillRect(new_xposition, new_yposition, BAR_WIDTH, 1);

        // Flash the line it came from, then unflash it
        if (has_parent) {
            ctx.fillRect(m.xposition, m.yposition, BAR_WIDTH, 1);
            (function(last_line_xposition, last_line_yposition) {
                setTimeout(function() {
                    ctx.fillStyle = "#6b00bd";
                    ctx.fillRect(last_line_xposition, last_line_yposition, BAR_WIDTH, 1);
                }, 150);
            })(m.xposition, m.yposition)
        }

        // and run the loop again
        if (count &lt; 20) {
            process_one_machine(count + 1); 
        } else {
            requestAnimationFrame(function() { process_one_machine(0); });
        }
    };

    // kick it all off
    process_one_machine(0);
}

function move_range(el) {
    document.getElementById("lie_output").textContent = (el.valueAsNumber * 100 * 2) + "%";
    move_graph("graph_both", 1, machines, ram_key_offsets, el.valueAsNumber, true);
}

function main() {
    draw_graph("graph_truth", 0, machines, ram_key_offsets);
    move_graph("graph_lies", 0, machines, ram_key_offsets, 0.1, false);
    draw_graph("graph_both", 0, machines, ram_key_offsets);
    move_graph("graph_both", 1, machines, ram_key_offsets, 0.1, true);
}
main();
&lt;/script&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Tue, 20 Feb 2018 23:58:00 +0000</pubDate><guid>tag://www.kryogenix.org/days,2018-02-20:2018/02/20/collecting-user-data-while-protecting-user-privacy/</guid></item><item><title>Sorry Henry</title><link>//www.kryogenix.org/days/2018/02/08/sorry-henry/</link><description>&lt;p&gt;I think I found a bug in a &lt;a href="https://en.wikipedia.org/wiki/Henry_Dudeney"&gt;Henry Dudeney&lt;/a&gt;&amp;nbsp;book.&lt;/p&gt;
&lt;p&gt;Dudeney was a really famous puzzle creator in Victorian/Edwardian times. For Americans: Sam Loyd was sort of an American knock-off of Dudeney, except that Loyd stole half his puzzles from other people and &lt;span class="caps"&gt;HD&lt;/span&gt; didn&amp;#8217;t. Dudeney got so annoyed by this theft that he eventually ended up comparing Loyd to the Devil, which was tough talk in&amp;nbsp;1910.&lt;/p&gt;
&lt;p&gt;Anyway, he wrote a number of puzzle books, and at least some are available on &lt;a href="http://www.gutenberg.org/ebooks/author/6885"&gt;Project Gutenberg&lt;/a&gt;, so well done the &lt;span class="caps"&gt;PG&lt;/span&gt; people. If you like puzzles, maths or thinking sorts, then there are a few good collections (and there are nicer to read versions at &lt;a href="https://archive.org/search.php?query=%221857-1930%22%20AND%20Dudeney"&gt;the Internet Archive&lt;/a&gt; too). &lt;em&gt;The Canterbury Puzzles&lt;/em&gt; is his most famous work, but I&amp;#8217;ve been reading &lt;em&gt;Amusements in Mathematics&lt;/em&gt;. In there he presents the following&amp;nbsp;puzzle:&lt;/p&gt;
&lt;h4&gt;81.&amp;#8212;&lt;span class="caps"&gt;THE&lt;/span&gt; &lt;span class="caps"&gt;NINE&lt;/span&gt; &lt;span class="caps"&gt;COUNTERS&lt;/span&gt;.&lt;/h4&gt;
&lt;table class="dudeney"&gt;
    &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;9&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td class="t"&gt;&amp;times;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td class="t"&gt;&amp;times;&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;6&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;style&gt;
table.dudeney td:not(.t):not(:empty) {
    border-radius: 1000px;
    box-shadow: 2px 2px 2px rgba(0,0,0,0.5);
    background-image: linear-gradient(
        180deg, hsl(0,0%,78%)  0%, 
        hsl(0,0%,90%) 47%, 
        hsl(0,0%,78%) 53%,
        hsl(0,0%,70%) 100%
    );
    width: 25px;
    border: 1px solid #aaaaaa;
    padding-bottom: 25px;
    height: 0;
    box-sizing: border-box;
}
table.dudeney td.t { text-align: right; }
&lt;/style&gt;

&lt;p&gt;I have nine counters, each bearing one of the nine digits, 1, 2, 3, 4,
5, 6, 7, 8 and 9. I arranged them on the table in two groups, as shown
in the illustration, so as to form two multiplication sums, and found
that both sums gave the same product. You will find that 158 multiplied
by 23 is 3,634, and that 79 multiplied by 46 is also 3,634. Now, the
puzzle I propose is to rearrange the counters so as to get as large a
product as possible. What is the best way of placing them? Remember both
groups must multiply to the same amount, and there must be three
counters multiplied by two in one case, and two multiplied by two
counters in the other, just as at&amp;nbsp;present.&lt;/p&gt;
&lt;h4&gt;81. &lt;span class="caps"&gt;ANSWER&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;In this case a certain amount of mere &amp;#8220;trial&amp;#8221; is unavoidable. But there
are two kinds of &amp;#8220;trials&amp;#8221;&amp;#8212;those that are purely haphazard, and those
that are methodical. The true puzzle lover is never satisfied with mere
haphazard trials. The reader will find that by just reversing the
figures in 23 and 46 (making the multipliers 32 and 64) both products
will be 5,056. This is an improvement, but it is not the correct answer.
We can get as large a product as 5,568 if we multiply 174 by 32 and 96
by 58, but this solution is not to be found without the exercise of some
judgment and&amp;nbsp;patience.&lt;/p&gt;
&lt;hr&gt;

&lt;p&gt;But, you know what? I don&amp;#8217;t think he&amp;#8217;s right. Now, I appreciate that he probably had to spend hours or days trying out possibilities with a piece of paper and a fountain pen, and I just wrote the following 15 lines of Python in five minutes, but hey, he didn&amp;#8217;t have to bear with his government trying to ban encryption, so let&amp;#8217;s call it&amp;nbsp;even.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from itertools import permutations
nums = [1,2,3,4,5,6,7,8,9]
values = []
for p in permutations(nums, 9):
    one   = p[0]*100 + p[1]*10 + p[2]
    two   = p[3]*10 + p[4]
    three = p[5]*10 + p[6]
    four  = p[7]*10 + p[8]
    if four &gt; three: continue # or we'll see fg*hi and hi*fg as different
    if one*two == three*four:
        expression = "%s*%s = %s*%s = %s" % (
            one, two, three, four, one*two)
        values.append((expression, one*two))
values.sort(key=lambda x:x[1])
print("Solution for 1-9")
print("\n".join([x[0] for x in values]))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The key point here is this: the little programme above indeed recognises his proposed solutions (&lt;code&gt;158*32 = 79*64 = 5056&lt;/code&gt; and &lt;code&gt;174*32 = 96*58 = 5568&lt;/code&gt;) but it also finds two larger ones: &lt;code&gt;584*12 = 96*73 = 7008&lt;/code&gt; and &lt;code&gt;532*14 = 98*76 = 7448&lt;/code&gt;. Did I miss something about the puzzle? Or am I actually in the rare position of finding an error in a Dudeney book? And all it took was seventy years of computer technology advancement to put me in that position. Maths, eh?&amp;nbsp;Tch.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s an interesting book. There are lots of money puzzles, in which I have to carefully remember that ha&amp;#8217;pennies and farthings are a thing (a farthing is a quarter of a penny), there are 12 pennies in a shilling, and twenty shillings in a pound. There&amp;#8217;s some rather racist portrayals of comic-opera Chinese characters in a few of the puzzles. And my heart sank when I read a puzzle about husbands and wives crossing a river in a boat, where no man would permit his wife to be in the boat with another man without him, because I assumed that the solution would also say something like &amp;#8220;and of course the women cannot be expected to row the boat&amp;#8221;, and I was then pleasantly surprised to discover that this was not the case and indeed they were described as probably being capable oarswomen and it was likely their boat to begin with! Writings from another time. But still as good as any puzzle book today, if not&amp;nbsp;better.&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="en-gb"&gt;&lt;p lang="en" dir="ltr"&gt;From Henry Dudeney&amp;#39;s Amusements in Mathematics, published 1917. We did, Henry, mate. Cheers for the puzzle book. &lt;a href="https://t.co/tt8JljBXN1"&gt;https://t.co/tt8JljBXN1&lt;/a&gt; &lt;a href="https://t.co/MFamXHxJ05"&gt;pic.twitter.com/MFamXHxJ05&lt;/a&gt;&lt;/p&gt;&amp;mdash; Stuart Langridge (@sil) &lt;a href="https://twitter.com/sil/status/912253821807730688?ref_src=twsrc%5Etfw"&gt;25 September 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Thu, 08 Feb 2018 18:34:00 +0000</pubDate><guid>tag://www.kryogenix.org/days,2018-02-08:2018/02/08/sorry-henry/</guid></item><item><title>And Everything</title><link>//www.kryogenix.org/days/2018/01/30/and-everything/</link><description>&lt;blockquote&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Rule Forty-two. All persons more than a mile high to leave the court.&amp;#8221;&lt;br&gt;
Everybody looked at Alice.&lt;br&gt;
&amp;#8220;I&amp;#8221;m not a mile high,&amp;#8221; said Alice.&lt;br&gt;
&amp;#8220;You are,&amp;#8221; said the King.&lt;br&gt;
&amp;#8220;Nearly two miles high,&amp;#8221; added the Queen.&lt;br&gt;
&amp;#8220;Well, I shan&amp;#8217;t go, at any rate,&amp;#8221; said Alice: &amp;#8220;besides, that&amp;#8217;s not a regular rule: you invented it just now.&amp;#8221;&lt;br&gt;
&amp;#8220;It&amp;#8217;s the oldest rule in the book,&amp;#8221; said the King.&lt;br&gt;
&amp;#8220;Then it ought to be Number One,&amp;#8221; said Alice.&lt;/blockquote&gt;

&lt;p&gt;It&amp;#8217;s my birthday (&lt;a href="https://www.kryogenix.org/days/2017/01/30/niobium/"&gt;a&lt;/a&gt;&lt;a href="http://www.kryogenix.org/days/2016/01/31/what-i-did-on-my-holidays/"&gt;g&lt;/a&gt;&lt;a href="http://www.kryogenix.org/days/2015/01/30/temporarily-older-than-benedict-cumberbatch-for-six-months-again-dammit/"&gt;a&lt;/a&gt;&lt;a href="http://www.kryogenix.org/days/2014/01/30/but-these-posts-go-to-eleven/"&gt;i&lt;/a&gt;&lt;a href="http://kryogenix.org/days/2013/01/30/thirty-seven-for-gods-sake-how-did-that-happen/"&gt;n&lt;/a&gt;&lt;a href="http://kryogenix.org/days/2012/01/30/a-year-goes-past/"&gt;.&lt;/a&gt;&lt;a href="http://kryogenix.org/days/2011/01/31/brave-new-age/"&gt;.&lt;/a&gt;&lt;a href="http://kryogenix.org/days/2009/01/30/mini-hippo-returns/"&gt;.&lt;/a&gt;&lt;a href="http://kryogenix.org/days/2008/01/30/another-year-passes/"&gt;.&lt;/a&gt;&lt;a href="http://kryogenix.org/days/2007/01/30/my-week/"&gt;.&lt;/a&gt;&lt;a href="http://kryogenix.org/days/2006/01/30/turning-thirty/"&gt;.&lt;/a&gt;&lt;a href="http://kryogenix.org/days/2005/01/30/staring/"&gt;.&lt;/a&gt;&lt;a href="http://kryogenix.org/days/2004/01/31/birthdays/"&gt;.&lt;/a&gt;&lt;a href="http://kryogenix.org/days/2003/01/30/revolution/"&gt;.&lt;/a&gt;). I&amp;#8217;m 21, for the second time around.&amp;nbsp;Hooray!&lt;/p&gt;
&lt;p&gt;So far it&amp;#8217;s been a nice day, with lots of people wishing me happy birthday from midnight last night (including a rather lovely thing from &lt;a href="http://www.jonobacon.com/2018/01/30/happy-birthday-stuart-2/"&gt;Jono&lt;/a&gt;). I got a cool shirt off mum and dad, which I shall be wearing for this evening&amp;#8217;s venture to &lt;a href="https://www.ghettogolf.co.uk/birmingham/"&gt;Ghetto Golf&lt;/a&gt;, a sort of weird crazy golf place which is all neon and skulls and graffiti, with&amp;nbsp;cocktails.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://kryogenix.org/images/ghettogolf.jpg" alt=""&gt;&lt;/p&gt;
&lt;p&gt;Dinner with Niamh this afternoon, too, which is cool. I&amp;#8217;m still as worried about the future and the world as I was this time last year, but I can have a day off for my birthday. And I have friends. This helps. So I can do nice things; write some code, maybe publish the talk I did at Hackference, solve a problem or two. Eat biscuits. You know. Nice things. No&amp;nbsp;ironing.&lt;/p&gt;
&lt;p&gt;Many happy returns,&amp;nbsp;me.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Tue, 30 Jan 2018 10:36:00 +0000</pubDate><guid>tag://www.kryogenix.org/days,2018-01-30:2018/01/30/and-everything/</guid></item><item><title>Happy 45th Anniversary, mum and dad</title><link>//www.kryogenix.org/days/2018/01/06/happy-anniversary/</link><description>&lt;p&gt;You&amp;#8217;re supposed to send cards to wish someone a happy anniversary. Well, today, my mum and dad have been married for 45 years (!), so I sent them some cards. Specifically, five playing cards, with weird symbols on&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://kryogenix.org/images/ha45-1.png" alt="Joker, J♠, A♥, A♠, 5♠"&gt;&lt;/p&gt;
&lt;p&gt;So, the first question is: what order should they be in? You might need to be Irish to get this next&amp;nbsp;bit.&lt;/p&gt;
&lt;p&gt;There is a card game in Ireland called Forty-Five. It&amp;#8217;s basically Whist, or Trumps; you each play a card, and highest card wins, except that a trump card beats a non-trump. My grandad, my mum&amp;#8217;s dad, was an absolute demon at it. You&amp;#8217;d sit and play a few hands and then he&amp;#8217;d say: you reneged! And you&amp;#8217;d say, I did what? And he&amp;#8217;d say: you should have played your Jack of Spades there. And you&amp;#8217;d say: how the bloody hell do you know I have the Jack of Spades? And then he&amp;#8217;d beat you nine hundred games to&amp;nbsp;nil.&lt;/p&gt;
&lt;p&gt;Anyway, what makes Forty-Five not be Whist is that the trumps are in a weird order. Imagine that, in this hand, trump suit has been chosen as Spades. The highest trump, the best card in the pack, is the Five of Spades. Then the Jack of Spades, then the Joker, then the Ace of Hearts (&lt;em&gt;regardless&lt;/em&gt; of which suit is trump; always the A♥ as fourth trump), then the Ace of Spades and down the other trump suit cards in sequence (K♠, Q♠,&amp;nbsp;etc).&lt;/p&gt;
&lt;p&gt;And it is their forty-fifth wedding anniversary. (See what I did there?) So if we put the cards in&amp;nbsp;order:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://kryogenix.org/images/ha45-2.png" alt="5♠, J♠, Joker, A♥, A♠"&gt;&lt;/p&gt;
&lt;p&gt;then that&amp;#8217;s correct. But what about the weird symbols? Well, once you&amp;#8217;ve got the cards laid out in order as above, you can look at them from the right-hand-side and the symbols spell a vertical&amp;nbsp;message:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://kryogenix.org/images/ha45-3.png" alt="Weird symbols spell out 'HAPPY ANNIVERSARY'"&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;HAPPY&lt;/span&gt; &lt;span class="caps"&gt;ANNIVERSARY&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Also, I&amp;#8217;m forty-one, so all you people who have suggested that my parents were unmarried (although by using a shorter word for it) are&amp;nbsp;wrong.&lt;/p&gt;
&lt;p&gt;Happy anniversary, mum and&amp;nbsp;dad.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Sat, 06 Jan 2018 12:42:00 +0000</pubDate><guid>tag://www.kryogenix.org/days,2018-01-06:2018/01/06/happy-anniversary/</guid></item><item><title>OwnTracks and a map</title><link>//www.kryogenix.org/days/2017/12/28/owntracks-and-a-map/</link><description>&lt;p&gt;Every year we do a bit of a pub crawl in Birmingham between Christmas and New Year; a chance to get away from the turkey risotto, and hang out with people and talk about techie things after a few days away with family and so on. It’s all rather loosely organised — I tried putting exact times on every pub once and it didn’t work out very well. So this year, 2017, I wanted a map which showed where we were so people can come and find us — it’s a twelve-hour all-day-and-evening thing but nobody does the whole thing&lt;sup id="sf-owntracks-and-a-map-1-back"&gt;&lt;a title="well, except me. And hero of the revolution Andy Yates." class="simple-footnote" href="#sf-owntracks-and-a-map-1"&gt;1&lt;/a&gt;&lt;/sup&gt; so the idea is that you can drop in at some point, have a couple of drinks, and then head off again. For that, you need to know where we all are.&lt;/p&gt;
&lt;p&gt;Clearly, the solution here is technology; I carry a device in my pocket&lt;sup id="sf-owntracks-and-a-map-2-back"&gt;&lt;a title="and you do too" class="simple-footnote" href="#sf-owntracks-and-a-map-2"&gt;2&lt;/a&gt;&lt;/sup&gt; which knows where I am and can display that on a map. There are a few services that do this, or used to — Google Latitude, &lt;span class="caps"&gt;FB&lt;/span&gt; messenger does it, Apple find-my-friends — but they’re all “only people with the Magic Software can see this”, and “you have to use our servers”, and that’s not very web-ish, is it? What I wanted was a thing which sat there in the background on my phone and reported my location to &lt;em&gt;my&lt;/em&gt; server when I moved around, and didn’t eat battery. That wouldn’t be tricky to write but I bet there’s a load of annoying corner cases, which is why I was very glad to discover that &lt;a href="http://owntracks.org/"&gt;OwnTracks&lt;/a&gt; have done it for me.&lt;/p&gt;
&lt;p&gt;You install their mobile app (for Android or iOS) and then configure it with the &lt;span class="caps"&gt;URL&lt;/span&gt; of your server and every now and again it reports your location by posting &lt;span class="caps"&gt;JSON&lt;/span&gt; to that &lt;span class="caps"&gt;URL&lt;/span&gt; saying what your location is. Only one word for that: magic darts. Exactly what I wanted.&lt;/p&gt;
&lt;p&gt;It’s a little tricky because of that “don’t use lots of battery” requirement. Apple heavily restrict background location sniffing, for lots of good reasons. If your app is the active app and the screen’s unlocked, it can read your location as often as it wants, but that’s impractical. If you want to get notified of location changes in the &lt;em&gt;background&lt;/em&gt; on iOS then you only get told if you’ve moved more than 500 metres in less than five minutes&lt;sup id="sf-owntracks-and-a-map-3-back"&gt;&lt;a title="the OwnTracks docs explain this in more detail" class="simple-footnote" href="#sf-owntracks-and-a-map-3"&gt;3&lt;/a&gt;&lt;/sup&gt; which is fine if you’re on the motorway but less fine if you’re walking around town and won’t move that far. However, you can nominate certain locations as “waypoints” and then the app gets notified whenever it enters or leaves a waypoint, even if it’s in the background and set to “manual mode”. So, I added all the pubs we’re planning on going to as waypoints, which is a bit annoying to do manually but works fine.&lt;/p&gt;
&lt;p&gt;OwnTracks then posts my location to a tiny &lt;span class="caps"&gt;PHP&lt;/span&gt; file which just dumps it in a big &lt;span class="caps"&gt;JSON&lt;/span&gt; list. The &lt;a href="https://kryogenix.org/brumtechxmas17/"&gt;#brumtechxmas 2017 map&lt;/a&gt; then reads that &lt;span class="caps"&gt;JSON&lt;/span&gt; file and plots the walk on the map (or it will do once we’re doing it; as I write this, the event isn’t until tomorrow, Friday 29th December, but I have tested it out).&lt;/p&gt;
&lt;p&gt;The map is an &lt;span class="caps"&gt;SVG&lt;/span&gt;, embedded in the page. This has the nice property that I can change it with &lt;span class="caps"&gt;CSS&lt;/span&gt;. In particular, the page looks at the list of locations we’ve been in and works out whether any of them were close enough to a pub on the map that we probably went in there… and then uses &lt;span class="caps"&gt;CSS&lt;/span&gt; to colour the pub we’re &lt;em&gt;in&lt;/em&gt; green, and ones we’ve been in grey. So it’s dynamic! Nice and easy to find us wherever we are. If it works, which is a bit handwavy at this point.&lt;/p&gt;
&lt;p&gt;If you’re coming, see you tomorrow. If you’re not coming: you should come. :-)&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/brumtechxmas2017.png" title="A static version of the map: you'll want the website for the real dynamic clever one" alt="A static version of the map: you'll want the website for the real dynamic clever one"&gt;&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-owntracks-and-a-map-1"&gt;well, except me. And hero of the revolution Andy Yates. &lt;a class="simple-footnote-back" href="#sf-owntracks-and-a-map-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-owntracks-and-a-map-2"&gt;and you do too &lt;a class="simple-footnote-back" href="#sf-owntracks-and-a-map-2-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-owntracks-and-a-map-3"&gt;the &lt;a href="http://owntracks.org/booklet/features/location/#ios"&gt;OwnTracks docs&lt;/a&gt; explain this in more detail &lt;a class="simple-footnote-back" href="#sf-owntracks-and-a-map-3-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Thu, 28 Dec 2017 11:33:00 +0000</pubDate><guid>tag://www.kryogenix.org/days,2017-12-28:2017/12/28/owntracks-and-a-map/</guid></item><item><title>I wrote a Web Component</title><link>//www.kryogenix.org/days/2017/11/12/i-wrote-a-web-component/</link><description>&lt;p&gt;I’ve been meaning to play with Web Components for a little while now. After I saw &lt;a href="https://twitter.com/BenNadel/status/929383549584789504"&gt;Ben Nadel create a Twitter tweet progress indicator with Angular&lt;/a&gt; and &lt;a href="https://github.com/LucasLeandro1204/vue-twitter-counter"&gt;Lucas Leandro did the same with Vue.js&lt;/a&gt; I thought, here’s a chance to experiment.&lt;/p&gt;
&lt;p&gt;Web Components involve a whole bunch of different dovetailing specs; &lt;span class="caps"&gt;HTML&lt;/span&gt; imports, custom elements, shadow &lt;span class="caps"&gt;DOM&lt;/span&gt;, &lt;span class="caps"&gt;HTML&lt;/span&gt; templates. I didn’t want to have to use the &lt;span class="caps"&gt;HTML&lt;/span&gt; template and import stuff if I could avoid it, and pleasantly you actually don’t need it. Essentially, you can create a custom element named &lt;code&gt;whatever-you-want&lt;/code&gt; and then just add &lt;code&gt;&amp;lt;whatever-you-want someattr="somevalue"&amp;gt;content here&amp;lt;/whatever-you-want&amp;gt;&lt;/code&gt; elements to your page, and it all works. This is good.&lt;/p&gt;
&lt;p&gt;To define a new type of element, you use &lt;code&gt;window.customElements.define('your-element-name', YourClass)&lt;/code&gt;.&lt;sup id="sf-i-wrote-a-web-component-1-back"&gt;&lt;a title="I relied for a lot of this understanding on Google’s web components documentation by Eric Bidelman." class="simple-footnote" href="#sf-i-wrote-a-web-component-1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;code&gt;YourClass&lt;/code&gt; is an &lt;span class="caps"&gt;ES2016&lt;/span&gt; JavaScript class. &lt;sup id="sf-i-wrote-a-web-component-2-back"&gt;&lt;a title="All this stuff is present already in Chrome; for other browsers you may need polyfills, and I’ll get to that later." class="simple-footnote" href="#sf-i-wrote-a-web-component-2"&gt;2&lt;/a&gt;&lt;/sup&gt; So, we start like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
window.customElements.define('twitter-circle-count', class extends HTMLElement {
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The class has a &lt;code&gt;constructor&lt;/code&gt; method which sets everything up. In our case, we’re going to create an &lt;span class="caps"&gt;SVG&lt;/span&gt; with two circles: the “indicator” (which is the one that changes colour and fills in as you add characters), and the “track” (which is the one that’s always present and shows where the line of the circle goes). Then we shrink and grow the “indicator” circle by using &lt;a href="https://jakearchibald.com/2013/animated-line-drawing-svg/"&gt;Jake Archibald’s dash-offset technique&lt;/a&gt;. This is all perfectly expressed by Ben Nadel’s diagram, which I hope he doesn’t mind me borrowing because it’s great.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://kryogenix.org/images/twitter-progress-indicator-concept-angular5.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;So, we need to dynamically create an &lt;span class="caps"&gt;SVG&lt;/span&gt;. The &lt;span class="caps"&gt;SVG&lt;/span&gt; we want will look basically like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&amp;lt;svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"&amp;gt;
  &amp;lt;circle cx="50" cy="50" r="45" 
  style="stroke: #9E9E9E"&amp;gt;&amp;lt;/circle&amp;gt;
  &amp;lt;circle cx="50" cy="50" r="45" 
  style="stroke: #333333)"&amp;gt;&amp;lt;/circle&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s set that &lt;span class="caps"&gt;SVG&lt;/span&gt; up in our element’s constructor:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;span&gt;window.customElements.define('twitter-circle-count', class extends HTMLElement {&lt;/span&gt;
  constructor() {
    /* You must call super() first in the constructor. */
    super();

    /* Create the SVG. Note that we need createElementNS, not createElement */
    var svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg.setAttribute("viewBox", "0 0 100 100");
    svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");

    /* Create the track. Note createElementNS. Note also that "this" refers to
       this element, so we've got a reference to it for later. */
    this.track = document.createElementNS("http://www.w3.org/2000/svg", "circle");
    this.track.setAttribute("cx", "50");
    this.track.setAttribute("cy", "50");
    this.track.setAttribute("r", "45");
    /* And create the indicator, by duplicating the track */
    this.indicator = this.track.cloneNode(true);

    svg.appendChild(this.track);
    svg.appendChild(this.indicator);
  }
&lt;span&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to actually add that created &lt;span class="caps"&gt;SVG&lt;/span&gt; to the document. For that, we create a &lt;em&gt;shadow root&lt;/em&gt;. This is basically a little separate &lt;span class="caps"&gt;HTML&lt;/span&gt; document, inside your element, which is isolated from the rest of the page. Styles set in the main page won’t apply to stuff in your component; styles set in your component won’t leak out to the rest of the page.&lt;sup id="sf-i-wrote-a-web-component-3-back"&gt;&lt;a title="Pedant posse: yes, it’s a bit more complicated than this. One step at a time." class="simple-footnote" href="#sf-i-wrote-a-web-component-3"&gt;3&lt;/a&gt;&lt;/sup&gt; This is easy with &lt;code&gt;attachShadow&lt;/code&gt;, which returns you this shadow root, which you can then treat like a normal node:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;span&gt;window.customElements.define('twitter-circle-count', class extends HTMLElement {
  constructor() {
    super();
    var svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg.setAttribute("viewBox", "0 0 100 100");
    svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
    this.track = document.createElementNS("http://www.w3.org/2000/svg", "circle");
    this.track.setAttribute("cx", "50");
    this.track.setAttribute("cy", "50");
    this.track.setAttribute("r", "45");
    this.indicator = this.track.cloneNode(true);

    svg.appendChild(this.track);
    svg.appendChild(this.indicator);&lt;/span&gt;
    let shadowRoot = this.attachShadow({mode: 'open'});
    shadowRoot.appendChild(svg);
  &lt;span&gt;}
});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we want to allow people to set the colours of our circles. The way to do this is with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/--*"&gt;&lt;span class="caps"&gt;CSS&lt;/span&gt; custom properties&lt;/a&gt;. Basically, you can invent any new property name you like, as long as it’s prefixed with &lt;code&gt;--&lt;/code&gt;. So we invent two: &lt;code&gt;--track-color&lt;/code&gt; and &lt;code&gt;--circle-color&lt;/code&gt;. We then set the two circles to be those colours by using &lt;span class="caps"&gt;CSS&lt;/span&gt;’s &lt;code&gt;var()&lt;/code&gt; syntax; this lets us say “use this variable if it’s set, or use this default value if it isn’t”. So our user can style our element with &lt;code&gt;twitter-circle-count { --track-color: #eee; }&lt;/code&gt; and it’ll work.&lt;/p&gt;
&lt;p&gt;Annoyingly, it doesn’t seem to be easily possible to use &lt;em&gt;existing&lt;/em&gt; &lt;span class="caps"&gt;CSS&lt;/span&gt; properties for this; there doesn’t seem to be a good way to have the standard property &lt;code&gt;color&lt;/code&gt; set the circle colour.&lt;sup id="sf-i-wrote-a-web-component-4-back"&gt;&lt;a title="It would be possible to have color apply to our circle colour by monitoring changes to the element’s style, but that’s a nightmare." class="simple-footnote" href="#sf-i-wrote-a-web-component-4"&gt;4&lt;/a&gt;&lt;/sup&gt; One has to use a custom variable even if there’s a “real” &lt;span class="caps"&gt;CSS&lt;/span&gt; property that would be appropriate. I’m hoping I’m wrong about this and there is a sensible way to do it that I just haven’t discovered.&lt;sup id="sf-i-wrote-a-web-component-5-back"&gt;&lt;a title="QML does this by setting “aliases”; in a component, you can say property alias foo: subelement.bar and setting foo on an instance of my component propagates through and sets bar on the subelement. This is a really good idea, and I wish Web Components did it somehow." class="simple-footnote" href="#sf-i-wrote-a-web-component-5"&gt;5&lt;/a&gt;&lt;/sup&gt;
(Update: Matt Machell &lt;a href="https://twitter.com/shuckle/status/929710831620820993"&gt;mentions &lt;code&gt;currentColor&lt;/code&gt;&lt;/a&gt; which would work perfectly for this example, but it &lt;em&gt;only&lt;/em&gt; works for &lt;code&gt;color&lt;/code&gt;; there’s no way of setting other properties like, say, &lt;code&gt;font-size&lt;/code&gt; on the component and having that explicitly propagate down to a particular element &lt;em&gt;in&lt;/em&gt; the component; there’s no &lt;code&gt;currentFontSize&lt;/code&gt;. I don’t know why &lt;code&gt;color&lt;/code&gt; gets special treatment, even though the special treatment would solve my particular problem.)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;span&gt;window.customElements.define('twitter-circle-count', class extends HTMLElement {
  constructor() {
    super();
    var svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg.setAttribute("viewBox", "0 0 100 100");
    svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
    this.track = document.createElementNS("http://www.w3.org/2000/svg", "circle");
    this.track.setAttribute("cx", "50");
    this.track.setAttribute("cy", "50");
    this.track.setAttribute("r", "45");
    this.indicator = this.track.cloneNode(true);&lt;/span&gt;
    this.track.style.stroke = "var(--track-color, #9E9E9E)";
    this.indicator.style.stroke = "var(--circle-color, #333333)";
    &lt;span&gt;svg.appendChild(this.track);
    svg.appendChild(this.indicator);
    let shadowRoot = this.attachShadow({mode: 'open'});
    shadowRoot.appendChild(svg);
  }
});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We want our little element to be &lt;code&gt;inline-block&lt;/code&gt;. To set properties on the element itself, from inside the element, there is a special &lt;span class="caps"&gt;CSS&lt;/span&gt; selector, &lt;code&gt;:host&lt;/code&gt;.&lt;sup id="sf-i-wrote-a-web-component-6-back"&gt;&lt;a title="Firefox doesn’t seem to support this yet, either :host or scoping styles so they don’t leak out of the component, so I’ve also set display:inline-block and position:relative on the twitter-circle-count selector in my normal CSS. This should be fixed soon." class="simple-footnote" href="#sf-i-wrote-a-web-component-6"&gt;6&lt;/a&gt;&lt;/sup&gt; Add a &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; element inside the component and it only applies to the component (this is special “scoped style” magic), and setting &lt;code&gt;:host&lt;/code&gt; styles the root of your element:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;span&gt;window.customElements.define('twitter-circle-count', class extends HTMLElement {
  constructor() {
    super();
    var svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg.setAttribute("viewBox", "0 0 100 100");
    svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
    this.track = document.createElementNS("http://www.w3.org/2000/svg", "circle");
    this.track.setAttribute("cx", "50");
    this.track.setAttribute("cy", "50");
    this.track.setAttribute("r", "45");
    this.indicator = this.track.cloneNode(true);
    this.track.style.stroke = "var(--track-color, #9E9E9E)";
    this.indicator.style.stroke = "var(--circle-color, #333333)";
    svg.appendChild(this.track);
    svg.appendChild(this.indicator);
    let shadowRoot = this.attachShadow({mode: 'open'});
    shadowRoot.appendChild(svg);&lt;/span&gt;
    var style = document.createElement("style");
    style.innerHTML = ":host { display: inline-block; position: relative; contain: content; }";
    shadowRoot.appendChild(style);
  &lt;span&gt;}
});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we need to be able to set the properties which define the value of the counter — how much progress it should show. Having &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; properties similar to an &lt;code&gt;&amp;lt;input type="range"&amp;gt;&lt;/code&gt; seems logical here. For this, we define a little function &lt;code&gt;setDashOffset&lt;/code&gt; which sets the &lt;code&gt;stroke-dashoffset&lt;/code&gt; style on our indicator. We then call that function in two places. One is in &lt;code&gt;connectedCallback&lt;/code&gt;, a method which is called when our custom element is first inserted into the document. The second is whenever our &lt;code&gt;value&lt;/code&gt; or &lt;code&gt;max&lt;/code&gt; attributes change. That gets set up by defining &lt;code&gt;observedAttributes&lt;/code&gt;, which returns a list of attributes that we want to watch; whenever one of those attributes changes, &lt;code&gt;attributeChangedCallback&lt;/code&gt; is called.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;span&gt;window.customElements.define('twitter-circle-count', class extends HTMLElement {&lt;/span&gt;
  static get observedAttributes() {
    return ['value', 'max'];
  }
  attributeChangedCallback(name, oldValue, newValue) {
    this.setDashOffset();
  }
  setDashOffset() {
    var mx = parseInt(this.getAttribute("max"), 10);
    if (isNaN(mx)) mx = 100;
    var value = parseInt(this.getAttribute("value"), 10);
    if (isNaN(value)) value = 0;
    this.indicator.style.strokeDashoffset = this.circumference - 
        (value * this.circumference / mx);
  }
  &lt;span&gt;constructor() {
    super();
    var svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg.setAttribute("viewBox", "0 0 100 100");
    svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
    this.track = document.createElementNS("http://www.w3.org/2000/svg", "circle");
    this.track.setAttribute("cx", "50");
    this.track.setAttribute("cy", "50");
    this.track.setAttribute("r", "45");
    this.indicator = this.track.cloneNode(true);

    this.track.style.stroke = "var(--track-color, #9E9E9E)";
    this.indicator.style.stroke = "var(--circle-color, #333333)";&lt;/span&gt;
    /* We know what the circumference of our circle is. It doesn't matter
       how big the element is, because the SVG is always 100x100 in its own
       "internal coordinates": that's what the viewBox means. So the circle
       always has a 45px radius, and so its circumference is always the same,
       2πr. Store this for later. */
    this.circumference = 3.14 * (45 * 2);

    &lt;span&gt;svg.appendChild(this.track);
    svg.appendChild(this.indicator);
    let shadowRoot = this.attachShadow({mode: 'open'});
    shadowRoot.appendChild(svg);
    var style = document.createElement("style");
    style.innerHTML = ":host { display: inline-block; position: relative; contain: content; }";
    shadowRoot.appendChild(style);
  }&lt;/span&gt;
  connectedCallback() {
    this.setDashOffset();
  }
&lt;span&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works if the user of the component does &lt;code&gt;counter.setAttribute("value", "50")&lt;/code&gt;, but it doesn’t make &lt;code&gt;counter.value = 50&lt;/code&gt; work, and it’s nice to provide these direct JavaScript APIs as well. For that we need to define a getter and a setter for each.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;span&gt;window.customElements.define('twitter-circle-count', class extends HTMLElement {
  static get observedAttributes() {
    return ['value', 'max'];
  }
  attributeChangedCallback(name, oldValue, newValue) {
    this.setDashOffset();
  }
  setDashOffset() {
    var mx = parseInt(this.getAttribute("max"), 10);
    if (isNaN(mx)) mx = this.defaultMax;
    var value = parseInt(this.getAttribute("value"), 10);
    if (isNaN(value)) value = this.defaultValue;
    this.indicator.style.strokeDashoffset = this.circumference - (
        value * this.circumference / mx);
  }&lt;/span&gt;
  get value() {
    var value = this.getAttribute('value');
    if (isNaN(value)) return this.defaultValue;
    return value;
  }
  set value(value) { this.setAttribute("value", value); }
  get max() {
    var mx = this.getAttribute('max');
    if (isNaN(mx)) return this.defaultMax;
    return max;
  }
  set value(value) { this.setAttribute("value", value); }
  &lt;span&gt;constructor() {
    super();
    var svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg.setAttribute("viewBox", "0 0 100 100");
    svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
    this.track = document.createElementNS("http://www.w3.org/2000/svg", "circle");
    this.track.setAttribute("cx", "50");
    this.track.setAttribute("cy", "50");
    this.track.setAttribute("r", "45");
    this.indicator = this.track.cloneNode(true);
    this.track.style.stroke = "var(--track-color, #9E9E9E)";
    this.indicator.style.stroke = "var(--circle-color, #333333)";
    this.circumference = 3.14 * (45 * 2);
    svg.appendChild(this.track);
    svg.appendChild(this.indicator);
    let shadowRoot = this.attachShadow({mode: 'open'});
    shadowRoot.appendChild(svg);
    var style = document.createElement("style");
    style.innerHTML = ":host { display: inline-block; position: relative; contain: content; }";
    shadowRoot.appendChild(style);&lt;/span&gt;
    this.defaultValue = 50;
    this.defaultMax = 100;
  &lt;span&gt;}
  connectedCallback() {
    this.setDashOffset();
  }
});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that’s all we need. We can now create our &lt;code&gt;twitter-circle-count&lt;/code&gt; element and hook it up to a &lt;code&gt;textarea&lt;/code&gt; like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;twitter&lt;/span&gt;&lt;span class="na"&gt;-circle-count&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;"280"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;/twitter-circle-count&amp;gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Type in here&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class="na"&gt;rows=&lt;/span&gt;&lt;span class="s"&gt;3&lt;/span&gt; &lt;span class="na"&gt;cols=&lt;/span&gt;&lt;span class="s"&gt;40&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;twitter-circle-count&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ddd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="k"&gt;circle&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="k"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#888&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// we use input, not keyup, because that fires when text is cut or pasted&lt;/span&gt;
&lt;span class="c1"&gt;// thank you Dave MN for that insight&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"textarea"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"input"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"twitter-circle-count"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and it works! I also added a text counter and a couple of other nicenesses, such as making the indicator animate to its position, and included a &lt;a href="https://www.webcomponents.org/polyfills"&gt;polyfill&lt;/a&gt; to add support in browsers that don’t have it.&lt;sup id="sf-i-wrote-a-web-component-7-back"&gt;&lt;a title="Mikeal Rogers has a really nice technique here for bundling your web component with a polyfill which is also worth considering." class="simple-footnote" href="#sf-i-wrote-a-web-component-7"&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;script src="https://rawgit.com/webcomponents/webcomponentsjs/master/webcomponents-sd-ce.js"&gt;&lt;/script&gt;

&lt;p&gt;Here’s the counter: &lt;twitter-circle-count value="0" max="280"&gt;&lt;/twitter-circle-count&gt;&lt;/p&gt;

&lt;p&gt;Type some text in here:&lt;/p&gt;

&lt;p&gt;&lt;textarea cols="20" rows="3"&gt;&lt;/textarea&gt;
&lt;style&gt;
twitter-circle-count {
  width: 30px;
  height: 30px;
  --track-color: #ddd;
  --circle-color: #333;
  --text-color: #888;
  text-indent: 0;
  display: inline-block;
  position: relative;
}
&lt;/style&gt;
&lt;script src="https://kryogenix.org/code/browser/twitter-circle-count.js"&gt;
&lt;/script&gt;
&lt;style&gt;
pre code { font-size: 12px; }
pre code span { opacity: 0.25; }
&lt;/style&gt;&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-i-wrote-a-web-component-1"&gt;I relied for a lot of this understanding on &lt;a href="https://developers.google.com/web/fundamentals/web-components/customelements"&gt;Google’s web components documentation&lt;/a&gt; by &lt;a href="https://twitter.com/ebidel"&gt;Eric Bidelman&lt;/a&gt;. &lt;a class="simple-footnote-back" href="#sf-i-wrote-a-web-component-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-i-wrote-a-web-component-2"&gt;All this stuff is present already in Chrome; for other browsers you may need polyfills, and I’ll get to that later. &lt;a class="simple-footnote-back" href="#sf-i-wrote-a-web-component-2-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-i-wrote-a-web-component-3"&gt;Pedant posse: yes, it’s a bit more complicated than this. One step at a time. &lt;a class="simple-footnote-back" href="#sf-i-wrote-a-web-component-3-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-i-wrote-a-web-component-4"&gt;It would be possible to have &lt;code&gt;color&lt;/code&gt; apply to our circle colour by monitoring changes to the element’s style, but that’s a nightmare. &lt;a class="simple-footnote-back" href="#sf-i-wrote-a-web-component-4-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-i-wrote-a-web-component-5"&gt;&lt;span class="caps"&gt;QML&lt;/span&gt; does this by setting “aliases”; in a component, you can say &lt;code&gt;property alias foo: subelement.bar&lt;/code&gt; and setting &lt;code&gt;foo&lt;/code&gt; on an instance of my component propagates through and sets &lt;code&gt;bar&lt;/code&gt; on the &lt;code&gt;subelement&lt;/code&gt;. This is a really good idea, and I wish Web Components did it somehow. &lt;a class="simple-footnote-back" href="#sf-i-wrote-a-web-component-5-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-i-wrote-a-web-component-6"&gt;Firefox doesn’t seem to support this yet, either &lt;code&gt;:host&lt;/code&gt; or scoping styles so they don’t leak out of the component, so I’ve also set &lt;code&gt;display:inline-block&lt;/code&gt; and &lt;code&gt;position:relative&lt;/code&gt; on the &lt;code&gt;twitter-circle-count&lt;/code&gt; selector in my normal &lt;span class="caps"&gt;CSS&lt;/span&gt;. This should be fixed soon. &lt;a class="simple-footnote-back" href="#sf-i-wrote-a-web-component-6-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-i-wrote-a-web-component-7"&gt;Mikeal Rogers has a really nice technique here for &lt;a href="https://medium.com/@mikeal/ive-seen-the-future-it-s-full-of-html-2577246f2210"&gt;bundling your web component with a polyfill&lt;/a&gt; which is also worth considering. &lt;a class="simple-footnote-back" href="#sf-i-wrote-a-web-component-7-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Sun, 12 Nov 2017 11:31:00 +0000</pubDate><guid>tag://www.kryogenix.org/days,2017-11-12:2017/11/12/i-wrote-a-web-component/</guid></item><item><title>Telegram notifications for Jenkins builds</title><link>//www.kryogenix.org/days/2017/10/27/telegram-notifications-for-jenkins-builds/</link><description>&lt;p&gt;It&amp;#8217;s nice to get updates from your &lt;span class="caps"&gt;CI&lt;/span&gt; system when things build. It&amp;#8217;s even nicer to do it without having to run any servers to do it. Here&amp;#8217;s how I send build notifications to a Telegram bot from&amp;nbsp;Jenkins.&lt;/p&gt;
&lt;p&gt;Basically, Jenkins knows how to hit a webhook for every stage of the build, and &lt;a href="https://integram.org"&gt;Integram&lt;/a&gt; run a Telegram bot which knows how to respond to webhooks. All you need is a little bit of glue code to convert stuff Jenkins sends into stuff Integram receives, and you can put that glue code on any one of fifteen serverless systems. I used &lt;a href="https://webtask.io"&gt;webtask.io&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;img src="/images/jenkins-webtask.png" alt="The Webtask.io editor"&gt;&lt;/p&gt;
&lt;p&gt;Deploy the following code there, being sure to update the Integram &lt;span class="caps"&gt;URL&lt;/span&gt; in it to be&amp;nbsp;yours:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;express&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bodyParser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;body-parser&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;request&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Webtask&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Webtask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;webtask-tools&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bodyParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;build&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phase&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;STARTED&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;STARTED&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phase&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;FINALIZED&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// don&amp;#39;t care about FINALIZED because we get COMPLETED and that&amp;#39;s enough&lt;/span&gt;
            &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Received correct-looking JSON to webhook&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Jenkins\nBuild of _&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;_ status *&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;* &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;at http://YOUR-JENKINS-URL/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="nx"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://integram.org/YOUR-INTEGRAM-URL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Messaging Telegram bot failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Messaging Telegram bot succeeded&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Input to webhook was invalid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Input was invalid: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Webtask&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Webtask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromExpress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4569&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Listening on port 4569&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, put the webtask &lt;span class="caps"&gt;URL&lt;/span&gt; into Jenkins as a&amp;nbsp;webhook:&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/jenkins-notifications.png" alt="Add a notifications endpoint in the configure section of your build job"&gt;&lt;/p&gt;
&lt;p&gt;And invite the Integram bot to your Telegram channel (instructions at &lt;a href="https://integram.org/"&gt;integram.org&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;And you&amp;#8217;re done. Every time Jenkins does anything, it sends a web request to your webtask, the webtask sends a message to the Integram bot, the Integram bot repeats it to you, and you get a notification. No extra servers required. I love the&amp;nbsp;internet.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/jenkins-telegram-notifications.png" alt="The Telegram bot speaks the message it's given, and so Telegram notifies you"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Fri, 27 Oct 2017 10:53:00 +0100</pubDate><guid>tag://www.kryogenix.org/days,2017-10-27:2017/10/27/telegram-notifications-for-jenkins-builds/</guid></item><item><title>Charles Paget Wade and the Underthing</title><link>//www.kryogenix.org/days/2017/10/15/charles-paget-wade-and-the-underthing/</link><description>&lt;p&gt;I got to spend a few days with &lt;a href="https://twitter.com/rose0window"&gt;Andy&lt;/a&gt; and his wife Gaby and their exciting new dog, Iwa. I don&amp;#8217;t get to see them as often as I should, but since they&amp;#8217;ve now moved rather closer to Castle Langridge we&amp;#8217;re going to correct that. And since they&amp;#8217;re in the Cotswolds I got to peer at a whole bunch of things. Mostly things built of yellow stone, admittedly. It is a source of never-ending pleasure that despite twenty-three years of conversation we still never run out of things to talk about. There is almost nothing more delightful than spending an afternoon over a pint arguing about what technological innovation you&amp;#8217;d take back to Elizabethan England. (This is a harder question than you&amp;#8217;d think. Sure, you can take your iPhone back and a solar charger, and it&amp;#8217;d be an incredibly powerful computer, but what would they use it for? They can do all the maths that they need; it&amp;#8217;s just slower. Maybe you&amp;#8217;d build a dynamo and gift them electricity, but where would you get the magnets from? Imagine this interspersed with excellent beer from the &lt;a href="http://www.thevolunteerinn.net/"&gt;Volunteer&lt;/a&gt; and you have a flavour of&amp;nbsp;it.)&lt;/p&gt;
&lt;p&gt;There were also some &lt;a href="http://www.rollrightstones.co.uk/"&gt;Rollright Stones&lt;/a&gt;, as guided by Julian Cope&amp;#8217;s finest-guidebook-ever &lt;a href="http://www.themodernantiquarian.com/"&gt;The Modern Antiquarian&lt;/a&gt;. But that&amp;#8217;s not the&amp;nbsp;thing.&lt;/p&gt;
&lt;p&gt;The thing is &lt;a href="https://www.nationaltrust.org.uk/snowshill-manor-and-garden"&gt;Snowshill Manor&lt;/a&gt;. There was a bloke and his name was &lt;a href="https://en.wikipedia.org/wiki/Charles_Paget_Wade"&gt;Charles Paget Wade&lt;/a&gt;. Did some painting (at which he was not half bad), did some architecting (also not bad), wrote some poetry. And also inherited a dumper truck full of money by virtue of his family&amp;#8217;s sugar plantations in the West Indies. This money he used to assemble an exceedingly diverse collection of Stuff, which you can now go and see by looking around Snowshill. What&amp;#8217;s fascinating about this is that he didn&amp;#8217;t just amass the Stuff into a big pile and then donate the house to the National Trust as a museum to hold it. Every room in the house was individually curated by him; this room for these objects, that room for those, what he called &amp;#8220;an attractive set of rooms pictorially&amp;#8221;. There&amp;#8217;s some rhyme and some reason &amp;#8212; one of the upstairs rooms is full of clanking, rigid, iron bicycles, and another full of suits of samurai armour &amp;#8212; but mostly they&amp;#8217;re things he just felt fitted together somehow. He&amp;#8217;s like Auri from the Kingkiller Chronicles; this room cries out for this thing to be in it. (If you&amp;#8217;ve read the first two Kingkiller books but haven&amp;#8217;t read &lt;em&gt;The Slow Regard of Silent Things&lt;/em&gt;, go and read it and know more of Auri than you currently do.) There&amp;#8217;s a room with a few swords, and a clock that doesn&amp;#8217;t work, and a folding table, and a box with an enormously ornate lock and a set of lawn bowls, and a cabinet containing a set of spectacles and a picture of his grandmother and a ball carved from ivory inside which is a second ball carved from the same piece of ivory inside which is yet another ball. The rhyme and the reason were all in his head, I think. I like to imagine that sometimes he&amp;#8217;d wake up in his strange bedroom with its huge carved crucifix at four in the morning and scurry into the house to carefully carry a blue Japanese vase from the Meridian Room into Zenity and then sit back, quietly satisfied that the cosmic balance was somehow improved. Or to study a lacquered cabinet for an hour and a half and then tentatively shift it an inch to the left, so it sits there just so. So it&amp;#8217;s &lt;em&gt;right&lt;/em&gt;. I don&amp;#8217;t know if the order, the placing, the detail of the collection actually speaks as loudly to anyone as it spoke to him, and it doesn&amp;#8217;t matter. You could spend the rest of your life hearing the stories about everything there and never get off the ground&amp;nbsp;floor.&lt;/p&gt;
&lt;p&gt;Take that room of samurai armour, for example. One of the remarkable things about the collection (there are so many remarkable things about the collection) is that rather a lot of it is Oriental &amp;#8212; Japanese or Chinese, mainly &amp;#8212; but Wade never went to China or Japan. A good proportion of the objects came from other stately homes, selling off items after the First World War &amp;#8212; whether because none of the family were left, or for financial reasons, or maybe just that the occupants came home and didn&amp;#8217;t want it all any more. The armour is a case in point; Wade needed some plumbing done on the house and went off to chat to a plumber&amp;#8217;s merchant about it, where he found a box of scrap metal. Since the bloke was the Lord High Emperor of looking for objects that caught his fancy, he had a look through this discarded pile and found in it&amp;#8230; about fifteen suits of samurai armour. (A large box, to be sure.) So he asked the merchant what the score was, and was told: oh, those, yeah, take them if you want&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;This sort of thing doesn&amp;#8217;t happen to me all that&amp;nbsp;much.&lt;/p&gt;
&lt;p&gt;Outside that room, just hanging on the wall, is the door from a carriage; one of the ones with the large wheels, all pulled by horses. Like the cabs that Sherlock Holmes rode in, or that the Queen takes to coronations. It was monogrammed &lt;span class="caps"&gt;ECC&lt;/span&gt;, and had one of those coats of arms where you just know that the family have been around for a while because two different shields have been quartered in it and then it&amp;#8217;s been quartered again. After some entirely baseless speculation we discovered that it was owned by &lt;a href="https://en.wikipedia.org/wiki/Emily_Temple,_Viscountess_Palmerston"&gt;Countess Cowper&lt;/a&gt;. She married Lord Palmerston; her brother was &lt;a href="https://en.wikipedia.org/wiki/William_Lamb,_2nd_Viscount_Melbourne"&gt;William Lamb&lt;/a&gt;, Lord Melbourne, who was another Prime Minister and had the Australian city named after him; his wife was &lt;a href="https://en.wikipedia.org/wiki/Lady_Caroline_Lamb"&gt;Lady Caroline Lamb&lt;/a&gt;, who infamously described Byron as &amp;#8220;mad, bad, and dangerous to know&amp;#8221;. History is all intertwined around&amp;nbsp;itself.&lt;/p&gt;
&lt;p&gt;None of the clocks in the house work. Apparently at one point Wade had a guest over who glanced at a clock and assumed she had plenty of time to catch her train. Of course, she missed it, and on hearing from him that of course the clocks don&amp;#8217;t tell the right time, she was not best pleased. Not sure who it was. Virginia Woolf, or someone like&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;There is too much stuff. He can&amp;#8217;t possibly have kept it all in his head. You can&amp;#8217;t possibly keep it all in, walking around. Visitors ought to be banned from going into more than three or four rooms; by the time you&amp;#8217;ve got halfway through it&amp;#8217;s just impossible to give each place the attention it deserves. There are hardly any paintings; Wade liked actual things, not drawings or representations. It&amp;#8217;s not an art gallery. It&amp;#8217;s a craftsmanship gallery; Wade sought out things that were made, that showed beauty or artistry or ingenuity in their construction. Objects, not drawings; stuff that demonstrates human creation at work. The house is like walking around inside his head, I think. (&amp;#8220;Sometimes I think the asylum is a head. We&amp;#8217;re inside a huge head that dreams us all into being. Perhaps it&amp;#8217;s your head,&amp;nbsp;Batman.&amp;#8221;)&lt;/p&gt;
&lt;p&gt;Next time you&amp;#8217;re near Evesham, go&amp;nbsp;visit.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Sun, 15 Oct 2017 23:49:00 +0100</pubDate><guid>tag://www.kryogenix.org/days,2017-10-15:2017/10/15/charles-paget-wade-and-the-underthing/</guid></item><item><title>The Niamh prime</title><link>//www.kryogenix.org/days/2017/09/10/the-niamh-prime/</link><description>&lt;p&gt;A bit of maths-y fiddling around on a Sunday&amp;nbsp;afternoon.&lt;/p&gt;
&lt;p&gt;Fascinating video on &lt;a href="https://www.youtube.com/watch?v=fQQ8IiTWHhg"&gt;the Trinity Hall prime&lt;/a&gt; at&amp;nbsp;Numberphile:&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/fQQ8IiTWHhg?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Apparently, Professor James McKee found a prime number which, when written out as &lt;span class="caps"&gt;ASCII&lt;/span&gt; art, looks like the crest of Trinity Hall college. Jack Hodkinson at Cambridge then searched for and found &lt;a href="https://friendlyfieldsandopenmaps.com/2017/09/08/the-corpus-christi-prime/"&gt;a prime which looks like a picture of Corpus Christi college&lt;/a&gt; (via &lt;a href="https://www.futilitycloset.com/"&gt;Futility Closet&lt;/a&gt;). That seems like a cool idea. So, with a bit of help from &lt;a href="http://mir3z.github.io/aalib.js/"&gt;aalib in JavaScript&lt;/a&gt; and the &lt;a href="https://rosettacode.org/wiki/Miller%E2%80%93Rabin_primality_test"&gt;Miller-Rabin primality test&lt;/a&gt;, plus a bit of scaling images up and down in Gimp, I found this 2,850-digit&amp;nbsp;prime:&lt;/p&gt;
&lt;p&gt;777,777,777,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;777,777,577,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;752,385,356,&amp;shy;867,777,777,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;775,352,235,&amp;shy;666,688,668,&amp;shy;667,777,777,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;777,776,765,&amp;shy;555,556,666,&amp;shy;856,868,667,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;222,335,666,&amp;shy;666,866,686,&amp;shy;666,665,777,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;777,355,336,&amp;shy;358,866,556,&amp;shy;666,655,665,&amp;shy;655,777,777,&amp;shy;777,777,777,&amp;shy;777,777,733,&amp;shy;552,236,666,&amp;shy;666,655,665,&amp;shy;665,666,555,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;777,276,265,&amp;shy;666,666,656,&amp;shy;655,555,555,&amp;shy;555,533,777,&amp;shy;777,777,777,&amp;shy;777,777,253,&amp;shy;252,566,666,&amp;shy;665,555,556,&amp;shy;555,555,565,&amp;shy;557,777,777,&amp;shy;777,777,777,&amp;shy;725,222,236,&amp;shy;666,565,555,&amp;shy;555,556,555,&amp;shy;535,355,237,&amp;shy;777,777,777,&amp;shy;777,772,266,&amp;shy;725,366,535,&amp;shy;555,355,555,&amp;shy;555,553,553,&amp;shy;533,577,777,&amp;shy;777,777,777,&amp;shy;272,637,356,&amp;shy;655,555,555,&amp;shy;353,535,556,&amp;shy;655,355,332,&amp;shy;277,777,777,&amp;shy;777,772,235,&amp;shy;775,355,665,&amp;shy;553,355,353,&amp;shy;535,533,555,&amp;shy;555,223,777,&amp;shy;777,777,777,&amp;shy;322,222,255,&amp;shy;555,556,353,&amp;shy;555,355,336,&amp;shy;355,653,533,&amp;shy;537,777,777,&amp;shy;777,772,222,&amp;shy;225,555,565,&amp;shy;555,355,335,&amp;shy;355,356,555,&amp;shy;655,353,237,&amp;shy;777,777,777,&amp;shy;772,272,355,&amp;shy;553,553,355,&amp;shy;535,353,365,&amp;shy;355,355,553,&amp;shy;523,577,777,&amp;shy;777,777,332,&amp;shy;333,566,333,&amp;shy;553,555,533,&amp;shy;355,355,555,&amp;shy;555,353,555,&amp;shy;677,777,777,&amp;shy;777,332,355,&amp;shy;555,555,555,&amp;shy;555,555,553,&amp;shy;555,535,555,&amp;shy;666,556,777,&amp;shy;777,777,775,&amp;shy;533,355,535,&amp;shy;355,553,565,&amp;shy;535,353,655,&amp;shy;655,555,565,&amp;shy;557,777,777,&amp;shy;777,756,533,&amp;shy;555,533,335,&amp;shy;353,566,655,&amp;shy;353,566,535,&amp;shy;656,655,577,&amp;shy;777,777,777,&amp;shy;565,353,535,&amp;shy;535,553,335,&amp;shy;566,666,555,&amp;shy;666,568,566,&amp;shy;665,777,777,&amp;shy;777,775,633,&amp;shy;535,555,555,&amp;shy;555,535,565,&amp;shy;556,555,666,&amp;shy;566,666,677,&amp;shy;777,777,777,&amp;shy;758,333,333,&amp;shy;355,555,656,&amp;shy;556,565,866,&amp;shy;666,866,658,&amp;shy;667,777,777,&amp;shy;777,777,582,&amp;shy;233,333,333,&amp;shy;355,565,555,&amp;shy;566,666,666,&amp;shy;868,666,677,&amp;shy;777,777,777,&amp;shy;775,822,333,&amp;shy;333,333,535,&amp;shy;555,556,666,&amp;shy;666,668,688,&amp;shy;586,777,777,&amp;shy;777,777,736,&amp;shy;355,333,333,&amp;shy;355,556,555,&amp;shy;636,666,686,&amp;shy;688,888,557,&amp;shy;777,777,777,&amp;shy;777,565,555,&amp;shy;555,333,555,&amp;shy;566,666,565,&amp;shy;686,666,886,&amp;shy;886,777,777,&amp;shy;777,777,776,&amp;shy;656,888,853,&amp;shy;335,556,686,&amp;shy;556,666,666,&amp;shy;868,886,887,&amp;shy;777,777,777,&amp;shy;777,775,356,&amp;shy;368,532,355,&amp;shy;555,688,666,&amp;shy;866,666,668,&amp;shy;668,877,777,&amp;shy;777,777,777,&amp;shy;732,233,553,&amp;shy;223,323,335,&amp;shy;533,556,666,&amp;shy;686,686,686,&amp;shy;777,777,777,&amp;shy;777,777,323,&amp;shy;333,332,222,&amp;shy;233,332,233,&amp;shy;568,665,666,&amp;shy;656,337,777,&amp;shy;777,777,777,&amp;shy;773,233,333,&amp;shy;322,222,223,&amp;shy;222,223,566,&amp;shy;556,655,533,&amp;shy;777,777,777,&amp;shy;777,777,722,&amp;shy;333,232,222,&amp;shy;222,233,222,&amp;shy;225,665,555,&amp;shy;632,277,777,&amp;shy;777,777,777,&amp;shy;777,323,333,&amp;shy;322,222,223,&amp;shy;222,222,236,&amp;shy;553,553,222,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;233,232,222,&amp;shy;223,232,222,&amp;shy;223,355,533,&amp;shy;552,277,777,&amp;shy;777,777,777,&amp;shy;777,772,333,&amp;shy;333,222,233,&amp;shy;322,222,223,&amp;shy;353,233,355,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;723,333,355,&amp;shy;665,533,233,&amp;shy;333,333,322,&amp;shy;335,677,777,&amp;shy;777,777,777,&amp;shy;777,777,735,&amp;shy;533,333,222,&amp;shy;233,333,333,&amp;shy;332,223,356,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;777,555,333,&amp;shy;232,222,333,&amp;shy;333,333,222,&amp;shy;233,677,777,&amp;shy;777,777,777,&amp;shy;777,777,772,&amp;shy;533,332,222,&amp;shy;222,333,333,&amp;shy;322,222,255,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;777,775,356,&amp;shy;566,665,553,&amp;shy;333,333,222,&amp;shy;223,557,777,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;733,335,333,&amp;shy;332,223,333,&amp;shy;332,222,233,&amp;shy;577,777,777,&amp;shy;777,777,777,&amp;shy;777,777,233,&amp;shy;335,332,222,&amp;shy;223,332,322,&amp;shy;222,233,777,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;777,333,232,&amp;shy;222,222,223,&amp;shy;332,222,222,&amp;shy;237,777,777,&amp;shy;777,777,777,&amp;shy;777,777,773,&amp;shy;222,222,222,&amp;shy;222,223,222,&amp;shy;322,222,377,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;777,777,222,&amp;shy;222,222,222,&amp;shy;323,332,222,&amp;shy;223,777,777,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;773,232,222,&amp;shy;222,333,353,&amp;shy;222,222,227,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;777,777,733,&amp;shy;332,222,223,&amp;shy;355,322,222,&amp;shy;222,277,777,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;777,755,333,&amp;shy;333,555,533,&amp;shy;222,222,222,&amp;shy;277,777,777,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;777,775,555,&amp;shy;555,322,222,&amp;shy;222,222,777,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;755,555,533,&amp;shy;222,222,222,&amp;shy;227,777,777,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;777,777,755,&amp;shy;553,332,222,&amp;shy;222,222,227,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;777,555,533,&amp;shy;322,222,222,&amp;shy;222,227,777,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;777,777,773,&amp;shy;553,332,222,&amp;shy;222,222,222,&amp;shy;277,777,777,&amp;shy;777,777,777,&amp;shy;777,777,777,&amp;shy;777,735,533,&amp;shy;322,222,222,&amp;shy;222,222,277,&amp;shy;779,769&lt;/p&gt;
&lt;p&gt;although it looks rather better when properly&amp;nbsp;formatted.&lt;/p&gt;
&lt;pre style="font-size: 6px; line-height: 3px; letter-spacing: -1px; text-align: center"&gt;77777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777
77777777777777777777777577777777777777777777777777
77777777777777777777775238535686777777777777777777
77777777777777777753522356666886686677777777777777
77777777777777776765555556666856868667777777777777
77777777777777722233566666686668666666577777777777
77777777777773553363588665566666556656557777777777
77777777777733552236666666655665665666555777777777
77777777777727626566666665665555555555553377777777
77777777772532525666666655555565555555655577777777
77777777725222236666565555555556555535355237777777
77777777226672536653555535555555555355353357777777
77777772726373566555555553535355566553553322777777
77777772235775355665553355353535533555555223777777
77777732222225555555635355535533635565353353777777
77777722222255555655553553353553565556553532377777
77777772272355553553355535353365355355553523577777
77777733233356633355355553335535555555535355567777
77777773323555555555555555555535555355556665567777
77777775533355535355553565535353655655555565557777
77777775653355553333535356665535356653565665557777
77777775653535355355533355666665556665685666657777
77777775633535555555555535565556555666566666677777
77777775833333335555565655656586666686665866777777
77777775822333333333555655555666666668686666777777
77777775822333333333535555556666666668688586777777
77777773635533333335555655563666668668888855777777
77777775655555553335555666665656866668868867777777
77777776656888853335556686556666666868886887777777
77777777535636853235555568866686666666866887777777
77777777322335532233233355335566666866866867777777
77777777323333332222233332233568665666656337777777
77777777323333332222222322222356655665553377777777
77777777223332322222222332222256655556322777777777
77777777323333322222223222222236553553222777777777
77777777723323222222323222222335553355227777777777
77777777723333332222333222222233532333557777777777
77777777723333355665533233333333322335677777777777
77777777773553333322223333333333222335677777777777
77777777775553332322223333333332222336777777777777
77777777772533332222222333333322222255777777777777
77777777777535656666555333333322222355777777777777
77777777777333353333322233333322222335777777777777
77777777777233335332222223332322222233777777777777
77777777777733323222222222333222222223777777777777
77777777777732222222222222232223222223777777777777
77777777777777222222222222323332222223777777777777
77777777777777323222222233335322222222777777777777
77777777777777333322222233553222222222777777777777
77777777777777755333333555533222222222277777777777
77777777777777777777555555532222222222277777777777
77777777777777777777555555332222222222277777777777
77777777777777777777755553332222222222227777777777
77777777777777777777755553332222222222222777777777
77777777777777777777735533322222222222222777777777
77777777777777777777735533322222222222222277779769&lt;/pre&gt;

&lt;p&gt;I think I&amp;#8217;ll call it the Niamh&amp;nbsp;Prime.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Sun, 10 Sep 2017 20:32:00 +0100</pubDate><guid>tag://www.kryogenix.org/days,2017-09-10:2017/09/10/the-niamh-prime/</guid></item></channel></rss>