<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>as days pass by</title><link>https://www.kryogenix.org/days/</link><description>scratched tallies on the prison wall</description><lastBuildDate>Tue, 17 Sep 2024 22:35:00 +0100</lastBuildDate><item><title>On iOS, Home Screen web apps are part of your iCloud Backup</title><link>https://www.kryogenix.org/days/2024/09/17/on-ios-home-screen-web-apps-are-part-of-your-icloud-backup/</link><description>&lt;p&gt;Recently I have been most baffled by how on my iPhone, my iCloud backup was over 5GB (and therefore would not back up into the free space that I have) despite how I had turned off most of the apps that might want to be included in the backup. &lt;/p&gt;
&lt;p&gt;There are many, many, many posts on the internet from people having this problem, and there are a few common things which come up. The first one is that iMessage is included in the backup, and this includes any images or videos you've received or sent. The second is that your photos are included. So if you're thinking "hey there's hardly anything on my phone, why is the iCloud backup so big" but you've got 2 years worth of chats with a zillion people full of videos... that's why.&lt;/p&gt;
&lt;p&gt;I, however, had tried all that and I still couldn't get the backup size down. I even spoke to Apple suport directly about it, three times; each of the people I spoke to had helpful suggestions, but it was also equally clear that each of them was fishing around in the dark, because all the "usual" tricks and traps they knew about which caused this were things that I'd already dealt with or disabled. It all ended up inconclusive, and I still didn't have a backup.&lt;/p&gt;
&lt;p&gt;Today, in desperation, I decided to try backing up the phone to my Linux machine so I could poke about in the backup to see if I could tell what was using all the space. Now, iPhones can be backed up to Macs (not surprisingly) and Windows, but there's no official provision for doing so on Linux, sadly. However, there is &lt;a href="https://libimobiledevice.org/"&gt;libimobiledevice&lt;/a&gt;, a set of command line tools. I used them to back up my phone to my desktop as follows:&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;plug the phone in&lt;/li&gt;
    &lt;li&gt;`idevicebackup2 cloud off` # disable iCloud backup&lt;/li&gt;
    &lt;li&gt;`idevicebackup2 -i encryption on` # enter a password&lt;/li&gt;
    &lt;li&gt;`idevicebackup2 backup ./` # back up phone into current dir&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once I'd done that, I had a folder named for the UDID of my phone, filled with encrypted data. Fortunately, there is a Python library called &lt;a href="https://pypi.org/project/iOSbackup/"&gt;iOSbackup&lt;/a&gt; which knows how to read and decrypt these backups, so I used it to write myself a little equivalent of the &lt;code&gt;du&lt;/code&gt; utility to see which folders in the backup might be unexpectedly using a lot more storage than I expected.&lt;/p&gt;
&lt;p&gt;And in fact there were a whole bunch of folders called something like &lt;code&gt;Library/WebClips/(long string).webclip/&lt;/code&gt; which were using &lt;em&gt;tons&lt;/em&gt; of storage, some over a gigabyte. I immediately thought: hey, I bet they're Home Screen web apps. I use a lot of these -- if there's a PWA for a service, I'll use it rather than a platform-specific app. We set up &lt;a href="https://open-web-advocacy.org"&gt;Open Web Advocacy&lt;/a&gt; for a reason, after all. So this made me jump to a (what turned out to be correct) conclusion from a standing start. Each of these &lt;code&gt;Library/WebClips/blah.webclip&lt;/code&gt; folders contains an &lt;code&gt;ApplicationManifest&lt;/code&gt; file, and you can get &lt;code&gt;iOSbackup&lt;/code&gt; to disgorge its decrypted content; it's a "binary plist" (which Python &lt;a href="https://docs.python.org/3/library/plistlib.html"&gt;knows how to read&lt;/a&gt;) and with that I could see which Home Screen web apps were taking up space with this little script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;iOSbackup&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;iOSbackup&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;plistlib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="n"&gt;UDID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ENTER YOUR UDID HERE (the backup folder name)&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;PASSWORD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;BACKUP ENCRYPTION PASSWORD&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;FOLDER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2024-09-17&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;# folder you put the backup in&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;iOSbackup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;udid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;UDID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cleartextpassword&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PASSWORD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;backuproot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FOLDER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# https://stackoverflow.com/a/53567149/1418014 thanks!&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;formatSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sizeInBytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;decimalNum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;isUnitWithI&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sizeUnitSeperator&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;format size to human readable string&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
  &lt;span class="c1"&gt;# K=kilo, M=mega, G=giga, T=tera, P=peta, &lt;/span&gt;
  &lt;span class="c1"&gt;# E=exa, Z=zetta, Y=yotta&lt;/span&gt;
  &lt;span class="n"&gt;sizeUnitList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;K&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;G&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;T&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;P&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;E&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;largestUnit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;isUnitWithI&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;sizeUnitListWithI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;curIdx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eachUnit&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sizeUnitList&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="n"&gt;unitWithI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;eachUnit&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;curIdx&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;unitWithI&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;i&amp;#39;&lt;/span&gt;
      &lt;span class="n"&gt;sizeUnitListWithI&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unitWithI&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;sizeUnitList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sizeUnitListWithI&lt;/span&gt;

    &lt;span class="n"&gt;largestUnit&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;i&amp;#39;&lt;/span&gt;

  &lt;span class="n"&gt;suffix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;B&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;decimalFormat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decimalNum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;f&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;# &amp;quot;.1f&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;finalFormat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;decimalFormat&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
    &lt;span class="n"&gt;sizeUnitSeperator&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# &amp;quot;%.1f%s%s&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;sizeNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sizeInBytes&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;sizeUnit&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sizeUnitList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sizeNum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;1024.0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;finalFormat&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sizeNum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sizeUnit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;suffix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;sizeNum&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="mf"&gt;1024.0&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;finalFormat&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sizeNum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;largestUnit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;suffix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;webapp_sizes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getBackupFilesList&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Library/WebClips/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="n"&gt;webclip_folder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;webclip_folder&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;webapp_sizes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;webapp_sizes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;webclip_folder&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;size&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;# work out where this file is in the backup&lt;/span&gt;
    &lt;span class="n"&gt;backup_file_loc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;FOLDER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UDID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;backupFile&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
        &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;backupFile&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# technically this is accumulating the encrypted&lt;/span&gt;
        &lt;span class="c1"&gt;# size of the file, not the decrypted. But it&amp;#39;s fine&lt;/span&gt;
        &lt;span class="n"&gt;bf_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;backup_file_loc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;st_size&lt;/span&gt;
        &lt;span class="n"&gt;webapp_sizes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;webclip_folder&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;size&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;bf_size&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;FileNotFoundError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/ApplicationManifest&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# decrypt it to a temp location&lt;/span&gt;
        &lt;span class="c1"&gt;# you should be doing this with tempfile&lt;/span&gt;
        &lt;span class="n"&gt;dec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getFileDecryptedCopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;relativePath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;targetFolder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/tmp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;targetName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;iosdec&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/tmp/iosdec&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;am&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plistlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;# go looking for the first one which looks like JSON&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;am&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$objects&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;continue&lt;/span&gt;
                &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="n"&gt;webapp_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="n"&gt;manifest_json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="k"&gt;continue&lt;/span&gt;
                    &lt;span class="n"&gt;webapp_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;manifest_json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                        &lt;span class="n"&gt;manifest_json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;short_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="n"&gt;webapp_sizes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;webclip_folder&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webapp_name&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;webapp_sizes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;size&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;formatSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and this helpfully printed a list which looked like this (but longer; I've kept a few around to give you the flavour):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;https://elk.zone/: 133.1MB
https://squoosh.app/: 1.1MB
https://www.kryogenix.org/farmbound/: 11.5MB
https://nerdlegame.com/: 220.9MB
https://twitter.com/: 1.2GB
Phanpy: 1.6GB
https://www.nytimes.com/games/: 376.2MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So... aha. Twitter and Phanpy can, I suppose, be excused since they are presumably caching every post ever, but I can delete those and re-add (and not bother re-adding Twitter) to get some of that back. Wordle, you are the weakest link, goodbye, and also I don't need elk.zone any more now I'm using Phanpy.&lt;/p&gt;
&lt;p&gt;I removed a bunch of these. Then I told the iCloud Backup to run again. And now my backup size is 800MB, not 5GB. Hooray!&lt;/p&gt;
&lt;p&gt;To be clear, this is not at all a Safari problem. Safari is absolutely doing the right thing here; well done Safari team. Web apps are apps; they should be included in my phone backup, 100%. The bug here is in the iCloud Backup Settings App List, which lists all the apps that are taking up space in the backup but &lt;em&gt;does not list Home Screen web apps&lt;/em&gt;. This sucks, and it's a bug, and it should be fixed. Show me PWAs in the backup list, especially ones taking up a gigabyte of space in it. I have filed the bug at &lt;a href="https://feedbackassistant.apple.com/feedback/15158244"&gt;feedbackassistant.apple.com&lt;/a&gt; although I've never heard back from any of the others I've filed there so I don't really know what the process is.&lt;/p&gt;
&lt;p&gt;OK, now off to add Phanpy again.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Tue, 17 Sep 2024 22:35:00 +0100</pubDate><guid isPermaLink="false">tag:www.kryogenix.org,2024-09-17:/days/2024/09/17/on-ios-home-screen-web-apps-are-part-of-your-icloud-backup/</guid><category>General musings</category></item><item><title>The CMA wants your comments on web apps</title><link>https://www.kryogenix.org/days/2024/08/21/the-cma-wants-your-comments-on-web-apps/</link><description>&lt;p&gt;Here's the tl;dr: if you make web apps in or for the UK, the &lt;a href="https://www.gov.uk/cma-cases/mobile-browsers-and-cloud-gaming"&gt;&lt;abbr title="Competition and Markets Authority"&gt;CMA&lt;/abbr&gt;&lt;/a&gt;, the UK tech regulator, want to hear from you about their proposals &lt;strong&gt;before August 29th 2024&lt;/strong&gt;, which is only a week away. Read &lt;a href="https://assets.publishing.service.gov.uk/media/66b484020808eaf43b50dea8/Working_paper_7_Potential_Remedies_8.8.24.pdf"&gt;their list of remedies&lt;/a&gt; to anticompetitive behaviour between web browsers and platforms, and email your thoughts to &lt;a href="mailto:browsersandcloud@cma.gov.uk"&gt;browsersandcloud@cma.gov.uk&lt;/a&gt; before the deadline. They really do want to hear from you, confidentally if you want, and your voice is useful here; you don't need to have some formally written legal opinion here. They want to hear from actual web devs and companies. Email them.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.gov.uk/cma-cases/mobile-browsers-and-cloud-gaming#contact"&gt;&lt;img src="https://www.kryogenix.org/images/cma-hear-from-you.png" alt="We want to hear from you -- Competition and Markets Authority"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now let's look at what the CMA have written in a little more detail. (This is the "tl" bit, although hopefully you will choose to "r".) They have been conducting a "Market Investigation Reference", which is regulator code for "talk to loads of people to see if there's a problem and then decide what to do about that", and the one we care about is about web browsers. I have, as part of &lt;a href="https://open-web-advocacy.org"&gt;Open Web Advocacy&lt;/a&gt;, been part of those consultations a number of times, and they've always been very willing to listen, and they do seem to identify a bunch of problems with browser diversity that I personally also think are problems. You know what we're talking about here: all browsers on iOS are required to be Safari's WebKit and not their own engine; Google have a tight grip on a whole bunch of stuff; browser diversity is a good thing and there's not enough of it in the world and this looks to be from deliberate attempts to act like monopolies by some players. These are the sorts of issues that CMA are concerned about (and they have published &lt;a href="https://www.gov.uk/cma-cases/mobile-browsers-and-cloud-gaming#working-papers"&gt;quite a few working papers explaining their issues in detail&lt;/a&gt; which you can read). What we're looking at today is their proposed list of &lt;em&gt;fixes&lt;/em&gt; for these problems, which they call "remedies". At OWA we have also done this, of course, and you should &lt;a href="https://open-web-advocacy.org/blog/uk-browser-and-cloud-investigation-may-fail-to-allow-web-app-competition/"&gt;read the OWA blog post about the CMA's remedies paper&lt;/a&gt;. But the first important point is, to be clear, that a whole bunch of these remedies being proposed by the CMA are &lt;strong&gt;good&lt;/strong&gt;. This is not a complaint that it's all bad or that it's toothless, not at all. They're going to stop the #AppleBrowserBan and require that other browsers are allowed to use their own engines on iOS as browser apps and in in-app browsing, they're going to require both Apple and Google to grant other browsers' access to the same APIs that their own browsers can get at, they've got suggestions in place for how users can choose which browser they use to get past the problem of the "default hotseat" where you get one browser when you buy a phone and never think to change it, they're suggesting that Google open access to WebAPK minting to everyone. All of these help demonopolise the UK market. This is all good.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://open-web-advocacy.org/blog/uk-browser-and-cloud-investigation-may-fail-to-allow-web-app-competition/"&gt;&lt;img src="https://www.kryogenix.org/images/stuart-bruce-alex-cma.jpg" alt="Stuart Langridge, Bruce Lawson, and Alex Moore of OWA in the CMA offices in London"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But there are some places where their remedies don't really go far enough, and this is the stuff where it would be good for you, my web-engaged reader, to send them an email with your thoughts one way or the other. Part of making the web as capable as a platform-specific app is that web sites can be presented like a platform-specific app. This is (part of) what a PWA is, which most of you reading this will already know about. But releasing your app as a PWA, while it has a bunch of good characteristics for you (no reviews needed, instant updates, full control, cross-platform development, no tithing of money required to the people who sold the phone it's on) also has some downsides. In particular, it's difficult to get people to "install" a PWA, especially on iOS where you have to tell your users to go digging around in the share menu. And this is a fairly big area where the CMA could have proposed remedies, and have so far not chosen to. The first problem here is that iOS Safari doesn't support any sort of install prompt: as mentioned, there's the "add to home screen" entry hidden in the share menu. There's an API for this, everyone else implements it, iOS Safari doesn't. Maybe the API's got problems and needs fixing? That seems fine; engage with the web standards process to get it fixed! But there's been no sign of doing that in any useful way.&lt;/p&gt;
&lt;p&gt;The second and related issue is that although the CMA's remedies state that browsers can use their own engine rather than having to be mere wrappers around the platform's web view, they do &lt;em&gt;not&lt;/em&gt; say that when a browser installs a web app, that that web app will &lt;em&gt;also&lt;/em&gt; use that browser's engine. That is: if there were a port of, say, Microsoft Edge to iOS, then Edge would be able to use its own engine, which is Microsoft's port of Blink. That Edge browser can implement install prompts how it likes, because it's using its own engine. &lt;em&gt;But&lt;/em&gt; there's no guarantee in the CMA remedies that the PWA that gets &lt;em&gt;installed&lt;/em&gt; will then be opened up in Edge. Calling the "install this PWA as an app" API provided by the platform might add it as a PWA &lt;em&gt;in the platform maker's browser&lt;/em&gt; -- iOS Safari in this example. This would be rubbish. It means that the installed app might not even work; how will it know your passwords or cookies, etc; this can't be what's intended. But the remedies do not explicitly state this requirement, and so it's quite possible that platform owners will therefore use this as another way to push back against PWAs to make them less of a competitor to their own app stores. I would like to be able to say that platform owners wouldn't do that, that they wouldn't deliberately make things worse in an effort at malicious compliance, but after the debacle earlier this year of &lt;a href="https://open-web-advocacy.org/blog/its-official-apple-kills-web-apps-in-the-eu/"&gt;Apple dropping PWA support entirely&lt;/a&gt; and then only &lt;a href="https://open-web-advocacy.org/blog/apple-backs-off-killing-web-apps/"&gt;backing off on that after public outcry&lt;/a&gt;, we can't assume that there will be a good-faith attempt to improve PWA support (either by implementation, or by engaging wholeheartedly with the public web standards process), and so the remedies need to spell this out in more detail. This should be easy enough if I'm right and the CMA's &lt;em&gt;intent&lt;/em&gt; is that this should be done, and your voice adding to that is likely to encourage them.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/AdaRoseCannon/status/1389642353472851970"&gt;&lt;img src="https://kryogenix.org/images/ada-apple-tweet.png" alt="A tweet from Ada Rose Cannon reading 'Seeing a Web App I worked on used by *Apple* to justify that the Web is a viable platform on iOS is bullshit. The Web can be an ideal place to build apps but Apple is consistently dragging their heals on implementing the Web APIs that would allow them to compete with native apps', quoting a tweet by Peter Gasston with text 'This image from Apple‘s opening presentation in the Epic Games court case is very misleading. “Web Apps and Native Apps can look the same, therefore no-one needs to publish on the App Store”.' and an Apple-created image of the FT web app and FT platform-specific app looking similar"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The worry about malicious compliance hampering web apps being a proper competitor to platform-specific apps also extends to another thing missing in the remedies: that access to hardware and software platform APIs for other browsers isn't required to be "which APIs there are", but "which APIs the existing browser elects to use". That is: if you write a native platform-specific app, it can talk to various hardware-ish things; bluetooth, USB, NFC, whichever. Therefore, you ought to be able, if you're a browser, to also have those APIs, in enough detail that you can then offer (mediated, secure) access to those services to &lt;em&gt;your&lt;/em&gt; users, the PWAs and websites that people run with you. But the remedies do not ensure that this is the case; they ensure that there is a "requirement for Apple to grant equivalent access to APIs used by WebKit and Safari to browsers using alternative browser engines." What this means is that if Safari doesn't use a thing, no other browser can use it either. So it's not possible to make the browser you build &lt;em&gt;better&lt;/em&gt; than Safari at this; Apple get to set the ceiling of what the web can do on the platform, and the ceiling is defined as "whatever &lt;em&gt;their&lt;/em&gt; browser can do". That's... not very competitive, is it? No. If you agree with that, then you should also write to the CMA about it. They would like to hear about actual examples where this sort of thing harms UK businesses, of course, and if that's you definitely write in, but it's also worth giving your opinion if you are a UK developer who works in this area, delivering things via the web to your users (or if you want to do that but are currently prevented).&lt;/p&gt;
&lt;p&gt;OK. Discussion over: go and write to the CMA with your thoughts on their remedies. Even if you think what they've proposed is perfect, you should still send them a message saying that; one thing that they and all government agencies tend to bemoan is that they only hear from people with lots of skin in the game, and generally only from people who are opposed, not people who are supportive. That means that they get a skewed view of what the web developer community actually &lt;em&gt;think&lt;/em&gt;, and this is a chance for us to unskew that a bit, together. You can request that the CMA keep your name, business, or submission confidential, so you don't have to worry about giving away secrets or your participation, and you need only comment on stuff which is relevant to you; you do not need a comprehensive position paper on the whole thing! The address to email is &lt;a href="mailto:browsersandcloud@cma.gov.uk"&gt;browsersandcloud@cma.gov.uk&lt;/a&gt;, the list of remedies is &lt;a href="https://assets.publishing.service.gov.uk/media/66b484020808eaf43b50dea8/Working_paper_7_Potential_Remedies_8.8.24.pdf"&gt;Working Paper 7&lt;/a&gt;, and the deadline is &lt;strong&gt;Thursday 29th August&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://2024.stateofthebrowser.com/"&gt;&lt;img src="https://www.kryogenix.org/images/sotb24.png" alt="State of the Browser 2024"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you want to hear more about this, then I am &lt;a href="https://2024.stateofthebrowser.com/speaker/stuart-langridge/"&gt;speaking&lt;/a&gt; about OWA, how it happened, what we've done, and how you can be involved at &lt;a href="https://2024.stateofthebrowser.com/"&gt;State of the Browser 2024&lt;/a&gt; on Saturday 14th September (just under a month from now!) in the Barbican in London. I'm &lt;a href="https://bsky.app/profile/londonwebstandards.org/post/3l2a2uqy5432s"&gt;told&lt;/a&gt; that there are less than 30 in-person tickets left, although there are online streaming tickets available too, so get in quick if you want to hear me and a whole bunch of other speakers!&lt;/p&gt;
&lt;p&gt;(Late breaking update: &lt;a href="https://brucelawson.co.uk/2024/web-apps-on-ios-is-the-cma-missing-the-point/"&gt;Bruce has also written about this&lt;/a&gt; and you should read that too!)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Wed, 21 Aug 2024 09:07:00 +0100</pubDate><guid isPermaLink="false">tag:www.kryogenix.org,2024-08-21:/days/2024/08/21/the-cma-wants-your-comments-on-web-apps/</guid><category>General musings</category></item><item><title>Family Fortunes board generator</title><link>https://www.kryogenix.org/days/2024/08/19/family-fortunes-board-generator/</link><description>&lt;p&gt;I nerd-sniped myself.&lt;/p&gt;
&lt;blockquote lang="en" cite="https://mastodon.social/@sil/112973699114307847"&gt;
  &lt;p&gt;Internet: I am disappointed that you have not provided me with one of those meme-maker websites for a Family Fortunes board. Now I will have to make one.&lt;/p&gt;
  &lt;footer&gt;
     — Stuart Langridge (@sil) &lt;a href="https://mastodon.social/@sil/112973699114307847"&gt;&lt;time datetime="2024-08-16T20:57:24.400Z"&gt;16/08/2024, 21:57:24&lt;/time&gt;&lt;/a&gt;
  &lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;See, I put word to thought and that was my mistake. So I spent, like, half my Saturday doing this instead of what I should be doing.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.kryogenix.org/code/family-fortunes/"&gt;&lt;img src="https://kryogenix.org/random/ff.png" alt="A Family Fortunes board from the 1980s reading 'Things I should have done instead of this' with options 'SoTB talk', 'Ironing', 'Lagers', 'D&amp;amp;D campaign', and 'touching grass' in air-quotes (with a score of 0)"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I got to use a couple of interesting techniques with it that I hadn't done before, now that nice new web APIs exist for them: sharing an image, for example, which involves creating a &lt;code&gt;Blob&lt;/code&gt; (&lt;a href="https://stackoverflow.com/a/67073474/1418014"&gt;thank you Thomas Steiner&lt;/a&gt;), doing the equivalent of the venerable "yellow fade technique" with the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API/Using_the_Web_Animations_API"&gt;web animations API&lt;/a&gt;, and yoinking all the information from a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; conveniently by reading &lt;code&gt;new FormData(form)&lt;/code&gt; in &lt;code&gt;form.oninput&lt;/code&gt;. This is all cool stuff; the web's such a nice environment to program for.&lt;/p&gt;
&lt;p&gt;A number of people have pointed out that this is not emulating the particular style of Family Fortunes board that &lt;em&gt;they&lt;/em&gt; prefer, to which our survey says: feel free to make your own. This is the one &lt;em&gt;I&lt;/em&gt; grew up with; those of you of more venerable years who prefer Max Bygraves or Bob Monkhouse to Les Dennis will simply have to struggle on under the burden. (Let us not speak of the appalling colourful modern video wall, which is just literally no fun at all and looks like a pub quiz machine.) Also, it turns out that Quite A Lot Of People have Opinions on what the exact shape of the X's should be, and no two of these opinions are the same. All good clean fun, yes.&lt;/p&gt;
&lt;p&gt;Anyway, I can't think that this is ever likely to be all that important, but if you ever need a way to mock up a Family Fortunes&lt;sup id="sf-family-fortunes-board-generator-1-back"&gt;&lt;a href="#sf-family-fortunes-board-generator-1" class="simple-footnote" title="I think Americans call it Family Feud?"&gt;1&lt;/a&gt;&lt;/sup&gt; screen from the 1980s with your own custom answers and scores, we asked 100 people and they all said that &lt;a href="https://www.kryogenix.org/code/family-fortunes/"&gt;kryogenix.org/code/family-fortunes&lt;/a&gt; is right there waiting patiently for you. Enjoy.&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-family-fortunes-board-generator-1"&gt;I think Americans call it Family Feud? &lt;a href="#sf-family-fortunes-board-generator-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Mon, 19 Aug 2024 16:22:00 +0100</pubDate><guid isPermaLink="false">tag:www.kryogenix.org,2024-08-19:/days/2024/08/19/family-fortunes-board-generator/</guid><category>General musings</category></item><item><title>OED second edition CD-ROM under Wine</title><link>https://www.kryogenix.org/days/2024/05/08/oed-second-edition-cd-rom-under-wine/</link><description>&lt;p&gt;I recently discovered that there's an old software edition of the Oxford English Dictionary (the second edition) &lt;a href="https://archive.org/details/oxford-english-dictionary-second-edition"&gt;on archive.org&lt;/a&gt; for download. Not sure how legal this is, mind, but I thought it would be useful to get it running on my Ubuntu machine. So here's how I did that.&lt;/p&gt;
&lt;p&gt;Firstly, download the file; that will give you a file called &lt;code&gt;Oxford English Dictionary (Second Edition).iso&lt;/code&gt;, which is a CD image. We want to unpack that, and usefully there is 7zip in the Ubuntu archives which knows how to unpack ISO files.&lt;sup id="sf-oed-second-edition-cd-rom-under-wine-1-back"&gt;&lt;a href="#sf-oed-second-edition-cd-rom-under-wine-1" class="simple-footnote" title="and using 7zip is much easier than mounting the ISO file as a loopback thing"&gt;1&lt;/a&gt;&lt;/sup&gt; So, unpack the ISO with &lt;code&gt;7z x "Oxford English Dictionary (Second Edition).iso"&lt;/code&gt;. That will give you two more files: &lt;code&gt;OED2.DAT&lt;/code&gt; and &lt;code&gt;SETUP.EXE&lt;/code&gt;. The .DAT file is, I think, all the dictionary entries in some sort of binary format (and is 600MB, so be sure you have the space for it). You can then run &lt;code&gt;wine SETUP.EXE&lt;/code&gt;, which will install the software using wine, and that's all good.&lt;sup id="sf-oed-second-edition-cd-rom-under-wine-2-back"&gt;&lt;a href="#sf-oed-second-edition-cd-rom-under-wine-2" class="simple-footnote" title="There's a Microsoft Word macro that it offers to install; I didn't want that, and I have no idea whether it works"&gt;2&lt;/a&gt;&lt;/sup&gt; Choose a folder to install it in (I chose the same folder that &lt;code&gt;SETUP.EXE&lt;/code&gt; is in, at which point it will create an &lt;code&gt;OED&lt;/code&gt; subfolder in there and unpack a bunch of files into it, including &lt;code&gt;OED.EXE&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;That's the easy part. However, it won't quite work yet. You can see this by running &lt;code&gt;wine OED/OED.EXE&lt;/code&gt;. It should start up OK, and then complain that there's no CDROM.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://kryogenix.org/images/oed/01-no-cdrom.png" alt="a Windows dialog box reading 'CD-ROM not found'"&gt;&lt;/p&gt;
&lt;p&gt;This is because it expects there to be a CDROM drive with the &lt;code&gt;OED2.DAT&lt;/code&gt; file on it. We can set one up, though; we tell Wine to pretend that there's a CD drive connected, and what's on it. Run &lt;code&gt;winecfg&lt;/code&gt;, and in the &lt;code&gt;Drives&lt;/code&gt; tab, press &lt;code&gt;Add…&lt;/code&gt; to add a new drive. I chose &lt;code&gt;D:&lt;/code&gt; (which is a common Windows drive letter for a CD drive), and OK. Select your newly added &lt;code&gt;D:&lt;/code&gt; drive and set the &lt;code&gt;Path&lt;/code&gt; to be the folder where &lt;code&gt;OED2.DAT&lt;/code&gt; is (which is wherever you unpacked the ISO file). Then say &lt;code&gt;Show Advanced&lt;/code&gt; and change the drive &lt;code&gt;Type&lt;/code&gt; to &lt;code&gt;CD-ROM&lt;/code&gt; to tell Wine that you want this new drive to appear to be a CD. Say &lt;code&gt;OK&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://kryogenix.org/images/oed/02-winecfg.png" alt="a Windows dialog box reading 'CD-ROM not found'"&gt;&lt;/p&gt;
&lt;p&gt;Now, when you &lt;code&gt;wine OED/OED.EXE&lt;/code&gt; again, it should start up fine! Hooray, we're done! Except…&lt;/p&gt;
&lt;p&gt;&lt;img src="https://kryogenix.org/images/oed/03-bad-fonts.png" alt="the OED Windows app, except that all the text is little squares rather than actual text, which looks like a font rendering error"&gt;&lt;/p&gt;
&lt;p&gt;…that's not good. The app runs, but it looks like it's having font issues. (In particular, you can select and copy the text, even though it looks like a bunch of little squares, and if you paste that text into somewhere else it's real text! So this is some sort of font display problem.)&lt;/p&gt;
&lt;p&gt;Fortunately, the OED app does actually come with the fonts it needs. Unfortunately, it seems to unpack them to somewhere (&lt;code&gt;C:\WINDOWS\SYSTEM&lt;/code&gt;)&lt;sup id="sf-oed-second-edition-cd-rom-under-wine-3-back"&gt;&lt;a href="#sf-oed-second-edition-cd-rom-under-wine-3" class="simple-footnote" title="which we can find out from OED/INSTALL.LOG"&gt;3&lt;/a&gt;&lt;/sup&gt; that Wine doesn't appear to actually look at. What we need to do is to install those font files so Linux knows about them. You could click them all to install them, but there's a quicker way; copy them, from where the installer puts them, into our own font folder.&lt;/p&gt;
&lt;p&gt;To do this...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;first make a new folder to put them in: &lt;code&gt;mkdir ~/.local/share/fonts/oed&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then find out where the installer put the font files, as a real path on our Linux filesystem: &lt;code&gt;winepath -u "C:/WINDOWS/SYSTEM"&lt;/code&gt;. Let's say that that ends up being &lt;code&gt;/home/you/.wine/dosdevices/c:/windows/system&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Copy the TTF files from that folder (remembering to change the first path to the one that &lt;code&gt;winepath&lt;/code&gt; output just now): &lt;code&gt;cp /home/you/.wine/dosdevices/c:/windows/system/*.TTF ~/.local/share/fonts/oed&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;And tell the font system that we've added a bunch of new fonts: &lt;code&gt;fc-cache&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And now it all ought to work! Run &lt;code&gt;wine OED/OED.EXE&lt;/code&gt; one last time…&lt;/p&gt;
&lt;p&gt;&lt;img src="https://kryogenix.org/images/oed/06-working.png" alt="the OED Windows app in all its glory"&gt;&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-oed-second-edition-cd-rom-under-wine-1"&gt;and using 7zip is much easier than mounting the ISO file as a loopback thing &lt;a href="#sf-oed-second-edition-cd-rom-under-wine-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-oed-second-edition-cd-rom-under-wine-2"&gt;There's a Microsoft Word macro that it offers to install; I didn't want that, and I have no idea whether it works &lt;a href="#sf-oed-second-edition-cd-rom-under-wine-2-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-oed-second-edition-cd-rom-under-wine-3"&gt;which we can find out from &lt;code&gt;OED/INSTALL.LOG&lt;/code&gt; &lt;a href="#sf-oed-second-edition-cd-rom-under-wine-3-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Wed, 08 May 2024 23:18:00 +0100</pubDate><guid isPermaLink="false">tag:www.kryogenix.org,2024-05-08:/days/2024/05/08/oed-second-edition-cd-rom-under-wine/</guid><category>General musings</category></item><item><title>The Pastry Box Project archaeology</title><link>https://www.kryogenix.org/days/2024/05/03/the-pastry-box-project-archaeology/</link><description>&lt;p&gt;Many years ago (2012!) I was invited to be part of "The Pastry Box Project", which described itself thus:&lt;/p&gt;
&lt;blockquote&gt;Each year, The Pastry Box Project gathers 30 people who are each influential in their field and asks them to share thoughts regarding what they do. Those thoughts are then published every day throughout the year at a rate of one per day, starting January 1st and ending December 31st.&lt;/blockquote&gt;

&lt;p&gt;It was interesting. Sadly, it's dropped off the web (as has its curator, Alex Duloz, as far as I can tell), but thankfully &lt;a href="https://archive.org"&gt;the Wayback Machine&lt;/a&gt; comes to the rescue once again.&lt;sup id="sf-the-pastry-box-project-archaeology-1-back"&gt;&lt;a href="#sf-the-pastry-box-project-archaeology-1" class="simple-footnote" title="Also, the writing is all archived at Github!"&gt;1&lt;/a&gt;&lt;/sup&gt; I was quietly proud of some of the things I wrote there (and I was recently asked for a reference to a thing I said which the questioner couldn't find, which is what made me realise that the site's not around any more), so I thought I'd republish the stuff I wrote there, here, for ease of finding. This was all written in 2012, and the world has moved on in a few ways since then, a dozen years ago at time of writing, but... I think I'd still stand by most of this stuff. The posts are &lt;a href="https://web.archive.org/web/20140709052954/https://the-pastry-box-project.net/baker/stuart-langridge"&gt;still at archive.org&lt;/a&gt; and you can get to and read other people's posts from there too, some of which are really good and worth your time. But here are mine, so I don't lose them again.&lt;/p&gt;
&lt;h2&gt;Tuesday, 18 December 2012&lt;/h2&gt;
&lt;p&gt;My daughter’s got a smartphone, because, well, everyone has. It has GPS on it, because, well, every one does. What this means is that she will never understand the concept of being lost.&lt;/p&gt;
&lt;p&gt;Think about that for a second. &lt;em&gt;She won’t ever even know what it &lt;strong&gt;means&lt;/strong&gt; to be lost.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Every argument I have in the pub now goes for about ten minutes before someone says, right, we’ve spent long enough arguing now, someone look up the correct answer on Wikipedia. My daughter won’t ever understand the concept of not having a bit of information available, of being confused about a matter of fact.&lt;/p&gt;
&lt;p&gt;A while back, it was decreed that telephone directories are not subject to copyright, that a list of phone numbers is “information alone without a minimum of original creativity” and therefore held no right of ownership.&lt;/p&gt;
&lt;p&gt;What instant access to information has provided us is a world where all the simple matters of fact are now yours; free for the asking. Putting data on the internet is not a skill; it is drudgery, a mechanical task for robots. Ask yourself: why do you buy technical books? It’s not for the information inside: there is no tech book anywhere which actually reveals something which isn’t on the web already. It’s about the voice; about the way it’s written; about how interesting it is. And that &lt;em&gt;is&lt;/em&gt; a skill. Matters of fact are not interesting — they’re useful, right enough, but not interesting. Making those facts available to everyone frees up authors, creators, makers to do authorial creative things. You don’t have to spend all your time collating stuff any more: now you can be Leonardo da Vinci all the time. Be beautiful. Appreciate the people who do things well, rather than just those who manage to do things at all. Prefer those people who make you laugh, or make you think, or make you throw your laptop out of a window with annoyance: who give you a strong reaction to their writing, or their speaking, or their work. Because information wanting to be free is what creates a world of creators. Next time someone wants to build a wall around their little garden, ask yourself: is what you’re paying for, with your time or your money or your personal information, something creative and wonderful? Or are they just mechanically collating information? I hope to spend 2013 enjoying the work of people who do something more than that.&lt;/p&gt;
&lt;h2&gt;Wednesday, 31 October 2012&lt;/h2&gt;
&lt;p&gt;Not everyone who works with technology loves technology. No, really, it’s true! Most of the people out there building stuff with web tech don’t attend conferences, don’t talk about WebGL in the pub, don’t write a blog with CSS3 “experiments” in it, don’t like what they do. It’s a job: come in at 9, go home at 5, don’t think about HTML outside those hours. Apparently 90% of the stuff in the universe is “dark matter”: undetectable, doesn’t interact with other matter, can’t be seen even with a really big telescope. Our “dark matter developers”, who aren’t part of the community, who barely even know that the community exists… how are we to help them? You can write all the &lt;em&gt;A List Apart&lt;/em&gt; articles you like but dark matter developers don’t read it. And so everyone’s intranet is horrid and Internet-Explorer-specific and so the IE team have to maintain backwards compatibility with that and that hurts the web. What can we do to reach this huge group of people? Everyone’s written a book about web technologies, and books help, but books are dying. We want to get the word out about all the amazing things that are now possible to everyone: do we know how? Do we even have to care? The theory is that this stuff will “trickle down”, but that doesn’t work for economics: I’m not sure it works for &lt;code&gt;@-moz-keyframes&lt;/code&gt; either. &lt;/p&gt;
&lt;h2&gt;Monday, 8 October 2012&lt;/h2&gt;
&lt;p&gt;The web moves really fast. How many times have you googled for a tutorial on or an example of something and found that the results, written six months or a year or two years ago, no longer work? The syntax has changed, or there’s a better way now, or it never worked right to begin with. You’ll hear people bemoaning this: trying to stop the web moving so quickly in order that knowledge about it doesn’t go out of date. But that ship’s sailed. This is the world we’ve built: it moves fast, and we have to just hat up and deal with it. So, how? How can we make sure that old and wrong advice doesn’t get found? It’s a difficult question, and I don’t think anyone’s seriously trying to answer it. We should try and think of a way. &lt;/p&gt;
&lt;h2&gt;Tuesday, 18 September 2012&lt;/h2&gt;
&lt;p&gt;Software isn’t always a solution to problems. If you’re a developer, everything generally looks like a nail: a nail which is solved by making a new bit of code. I’ve got half-finished mobile apps done for tracking my running with GPS, for telling me when to switch between running and walking, and… I’m still fat, because I’m writing software instead of &lt;em&gt;going running&lt;/em&gt;. One of the big ideas behind computers was to automate repetitive and boring tasks, certainly, which means that it should work like this: identify a thing that needs doing, do it for a while, think “hm, a computer could do this more easily”, write a bit of software to do it. However, there’s too much premature optimisation going on, so it actually looks like this: identify a thing that needs doing, think “hm, I’m sure a computer would be able to do this more easily”, write a bit of software to do it. See the difference? If the software never gets finished, then in the first approach the thing &lt;em&gt;still gets done&lt;/em&gt;. Don’t always reach for the keyboard: sometimes it’s better to reach for Post-It notes, or your running shoes. &lt;/p&gt;
&lt;h2&gt;Saturday, 18 August 2012&lt;/h2&gt;
&lt;p&gt;Changing the world is within your grasp.&lt;/p&gt;
&lt;p&gt;This is not necessarily a good thing.&lt;/p&gt;
&lt;p&gt;If you go around and talk to normal people, it becomes clear that, weirdly, they don’t ever imagine how to get ten million dollars. They don’t think about new ways to redesign a saucepan or the buttons in their car. They don’t contemplate why sending a parcel is slow and how it could be a slicker process. They don’t think about &lt;em&gt;ways to change the world&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I find it hard to talk to someone who doesn’t think like that.&lt;/p&gt;
&lt;p&gt;To an engineer, the world is a toy box full of sub-optimized and feature-poor toys, as Scott Adams once put it. To a designer, the world is full of bad design. And to both, it is not only possible but at a high level &lt;em&gt;obvious&lt;/em&gt; how to (a) fix it (b) for everyone (c) and make a few million out of doing so.&lt;/p&gt;
&lt;p&gt;At first, this seems a blessing: you can see how the world could be better! And make it happen!&lt;/p&gt;
&lt;p&gt;Then it’s a curse. Those normal people I mentioned? Short of winning the lottery or Great Uncle Brewster dying, there’s no possibility of becoming a multi-millionaire, and so they’re not thinking about it. Doors that have a handle on them but say “Push” are not a source of distress. Wrong kerning in signs is not like sandpaper on &lt;em&gt;their&lt;/em&gt; nerves.&lt;/p&gt;
&lt;p&gt;The curse of being able to change the world is… the frustration that you have so far failed to do so.&lt;/p&gt;
&lt;p&gt;Perhaps there is a Zen thing here. Some people have managed it. Maybe you have. So the world is better, and that’s a good thing all by itself, right? &lt;/p&gt;
&lt;h2&gt;Friday, 27 July 2012&lt;/h2&gt;
&lt;p&gt;The best systems are built by people who can accept that no-one will ever know how hard it was to do, and who therefore don’t seek validation by explaining to everyone how hard it was to do.&lt;/p&gt;
&lt;h2&gt;Tuesday, 12 June 2012&lt;/h2&gt;
&lt;p&gt;The most poisonous idea in the world is when you’re told that something which achieved success through lots of hard work actually got there just because it was excellent.&lt;/p&gt;
&lt;h2&gt;Friday, 18 May 2012&lt;/h2&gt;
&lt;p&gt;Ever notice how the things you slave over and work crushingly hard on get less attention, sometimes, than the amusing things you threw together in a couple of evenings?&lt;/p&gt;
&lt;p&gt;I can't decide whether this is a good thing or not.&lt;/p&gt;
&lt;h2&gt;Thursday, 5 April 2012&lt;/h2&gt;
&lt;p&gt;It's OK to not want to build websites for everybody and every browser. Making something which is super-dynamic in Chrome 18 and also works excellently in w3m is jolly hard work, and a lot of the time you might well be justified in thinking it's not worth it. If your site stats, or your belief, or your prediction of the market's direction, or your favourite pundit tell you that the best use of your time is to only support browsers with &lt;code&gt;querySelector&lt;/code&gt;, or only support browsers with JavaScript, or only support WebKit, or only support iOS Safari, then that's a reasonable decision to make; don't let anyone else tell you what your relationship with your users and customers and clients is, because you know better than them.&lt;/p&gt;
&lt;p&gt;Just don't confuse what you're doing with supporting "the web". State your assumptions up front. Own your decisions, and be prepared to back them up, for your project. If you're building something which doesn't work in IE6, that requires JavaScript, that requires mobile WebKit, that requires Opera Mobile, then you &lt;em&gt;are&lt;/em&gt; letting some people down. That's OK; you've decided to do that. But your view's no more valid than theirs, for a project you didn't build. Make your decisions, and state what the axioms you worked from were, and then everyone else can judge whether what you care about is what they care about. Just don't push your view as being what everyone else should do, and we'll all be fine.&lt;/p&gt;
&lt;h2&gt;Sunday, 18 March 2012&lt;/h2&gt;
&lt;p&gt;Publish and be damned, said the Duke of Wellington; these days, in between starting wars in France and being sick of everyone repeating the jokes about his name from Blackadder, he’d probably say that we should publish &lt;em&gt;or&lt;/em&gt; be damned. If you’re anything like me, you’ve got folders full of little experiments that you never got around to finishing or that didn’t pan out. Put ’em up somewhere. These things are useful.&lt;/p&gt;
&lt;p&gt;Twitter, autobiographies, collections of letters from authors, all these have shown us that the minutiae can be as fascinating as carefully curated and sieved and measured writings, and who knows what you’ll inspire the next person to do from the germ of one of your ideas?&lt;/p&gt;
&lt;h2&gt;Monday, 27 February 2012&lt;/h2&gt;
&lt;p&gt;There's a lot to think about when you're building something on the web. Is it accessible? How do I handle translations of the text? Is the design OK on a 320px-wide screen? On a 2320px-wide screen? Does it work in IE8? In Android 4.0? In Opera Mini? Have I minimized the number of HTTP requests my page requires? Is my JavaScript minified? Are my images responsive? Is Google Analytics hooked up properly? AdSense? Am I handling Unicode text properly? Avoiding CSRF? XSS? Have I encoded my videos correctly? Crushed my pngs? Made a print stylesheet?&lt;/p&gt;
&lt;p&gt;We've come a long way since:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;HEADER&amp;gt;
&amp;lt;TITLE&amp;gt;The World Wide Web project&amp;lt;/TITLE&amp;gt;
&amp;lt;NEXTID N="55"&amp;gt;
&amp;lt;/HEADER&amp;gt;
&amp;lt;BODY&amp;gt;
&amp;lt;H1&amp;gt;World Wide Web&amp;lt;/H1&amp;gt;The WorldWideWeb (W3) is a wide-area&amp;lt;A
NAME=0 HREF="WhatIs.html"&amp;gt;
hypermedia&amp;lt;/A&amp;gt; information retrieval
initiative aiming to give universal
access to a large universe of documents.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Look at &lt;a href="http://html5boilerplate.com/"&gt;http://html5boilerplate.com/&lt;/a&gt;—a base level page which helps you to cover some (nowhere near all) of the above list of things to care about (and the rest of the things you need to care about too, which are the other 90% of the list). A year in development, 900 sets of changes and evolutions from the initial version, seven separate files. That's not over-engineering; that's what you need to know to build things these days.&lt;/p&gt;
&lt;p&gt;The important point is: one of the skills in our game is knowing what you don't need to do right now but still leaving the door open for you to do it later. If you become the next Facebook then you will have to care about all these things; initially you may not. You don't have to build them all on day one: that &lt;em&gt;is&lt;/em&gt; over-engineering. But you, designer, developer, translator, evangelist, web person, do have to understand what they all mean. And you do have to be able to layer them on later without having to tear everything up and start again. Feel guilty that you're not addressing all this stuff in the first release if necessary, but you should feel a lot guiltier if you didn't think of some of it.&lt;/p&gt;
&lt;h2&gt;Wednesday, 18 January 2012&lt;/h2&gt;
&lt;p&gt;Don't be creative. Be a creat&lt;em&gt;or&lt;/em&gt;. No one ever looks back and wishes that they'd given the world less stuff.&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-the-pastry-box-project-archaeology-1"&gt;Also, the writing is all &lt;a href="https://github.com/the-pastry-box-project"&gt;archived at Github!&lt;/a&gt; &lt;a href="#sf-the-pastry-box-project-archaeology-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Fri, 03 May 2024 19:08:00 +0100</pubDate><guid isPermaLink="false">tag:www.kryogenix.org,2024-05-03:/days/2024/05/03/the-pastry-box-project-archaeology/</guid><category>General musings</category></item><item><title>The Matrix has you, part 2</title><link>https://www.kryogenix.org/days/2024/03/24/the-matrix-has-you-part-2/</link><description>&lt;p&gt;I've recently &lt;a href="https://mastodon.social/@sil/112144967827317228"&gt;switched back from vscode to Sublime Text&lt;/a&gt;, which means that after all the time I spent training my fingers to type "&lt;code&gt;code somefile.txt&lt;/code&gt;" instead of "&lt;code&gt;subl somefile.txt&lt;/code&gt;" I now need to undo all that conditioning and go back to &lt;code&gt;subl&lt;/code&gt; again. So I thought, hey, maybe I should dump a little shell script called &lt;code&gt;code&lt;/code&gt; in my &lt;code&gt;bin&lt;/code&gt; folder which admonished me in some amusing way, thus Pavlov-ing myself into learning to do it right.&lt;/p&gt;
&lt;p&gt;And then I thought, hey, what'd be cool is if I had that Matrix-esque "raining code" effect in the Terminal and then it was superimposed with a box saying "STOP TYPING code AND USE subl INSTEAD", like the "SYSTEM ERROR" message at the end of the first movie.&lt;/p&gt;
&lt;p&gt;And then I thought: someone's already done this, right? And they have; it is called &lt;a href="https://github.com/abishekvashok/cmatrix"&gt;&lt;code&gt;cmatrix&lt;/code&gt;&lt;/a&gt;. But I don't like cmatrix because it doesn't do the colours right; the text just sorta stops rather than fading away like the movie does, and it feels unreal and too sharp for me. Now, don't get me wrong, I understand why this is; terminals support a full proper range of colour these days, but writing a program which gets released to actual people and which can deal with the bewildering array of terminal settings out there is a miserable waste of everyone's time. But I'm not writing this for anyone else; it only has to work in &lt;em&gt;my&lt;/em&gt; terminal (in true &lt;a href="https://www.kryogenix.org/days/2007/03/18/works-on-my-machine/"&gt;works on my machine&lt;/a&gt; fashion). And this will give me a chance to noodle about with Python terminal libraries such as &lt;a href="https://pypi.org/project/blessed/"&gt;blessed&lt;/a&gt; to make something interesting. Hence, &lt;a href="https://kryogenix.org/random/matrix24.py"&gt;matrix24.py&lt;/a&gt;:&lt;/p&gt;
&lt;video style="max-width: 100%" controls src="https://kryogenix.org/random/matrix-24bit.mp4"&gt;&lt;/video&gt;

&lt;p&gt;It's a bodge all round, and it still doesn't look right, and &lt;a href="http://jessica.tech/"&gt;Jess&lt;/a&gt; pointed out that making something cool happen when I make a mistake is the opposite of conditioning, but I got to fiddle about with a new library for a bit, so that was fun. Can I do something productive now?&lt;/p&gt;
&lt;p&gt;(title from &lt;a href="https://www.kryogenix.org/days/2003/06/18/mtrx/"&gt;a classic post about the Matrix&lt;/a&gt; which still makes me laugh even after all these years, although it is very unfair to Keanu Reeves who is a cool bloke and should be emulated in his approach to life)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Sun, 24 Mar 2024 15:40:00 +0000</pubDate><guid isPermaLink="false">tag:www.kryogenix.org,2024-03-24:/days/2024/03/24/the-matrix-has-you-part-2/</guid><category>General musings</category></item><item><title>Somewhere between silver and tin</title><link>https://www.kryogenix.org/days/2024/01/30/somewhere-between-silver-and-tin/</link><description>&lt;p&gt;There’s a YouTube channel called 
&lt;a href="https://youtube.com/@Clickspring"&gt;Clickspring&lt;/a&gt;, 
run by an Australian bloke called Chris 
who is a machinist: a mechanical engineer 
with a lathe and a mill and all manner of 
little tools. I am not a machinist — at 
school I was fairly inept at what we 
called CDT, for Craft Design and 
Technology, and what Americans much more 
prosaically call “shop class”. My dad was, 
though, or an engineer at least. Although 
Chris builds clocks and beautiful brass 
mechanisms, and my dad built aeroplanes. 
Heavy engineering. All my engineering is 
software, which actual engineers don’t 
think is engineering at all, and most of 
the time I don’t either. &lt;/p&gt;
&lt;p&gt;You can 
romanticise it: claim that software 
development isn’t craft, it’s &lt;em&gt;art&lt;/em&gt;. And 
there is a measure of truth in this. It’s 
like writing, which is the other thing I 
spend a lot of time doing for money; 
that’s an art, too. &lt;/p&gt;
&lt;p&gt;If you’re doing it 
right, at least. &lt;/p&gt;
&lt;p&gt;Most of the writing 
that’s done, though, isn’t art. And most 
of the software development isn’t, either. 
Or most of the engineering. For every one 
person creating beauty in prose or code or 
steel, there are fifty just there doing 
the job with no emotional investment in 
what they’re doing at all. Honestly, 
that’s probably a good thing, and not a 
complaint. While I might like the 
theoretical idea of a world where 
everything is hand made by someone who 
cares, I don’t think that you should have 
to care in order to get paid. The people 
who are paying you don’t care, so you 
shouldn’t have to either. &lt;/p&gt;
&lt;p&gt;It’s nice if you 
can swing it so you get both, though. &lt;/p&gt;
&lt;p&gt;The 
problem is that it’s not possible to 
instruct someone to give a damn. You can’t 
regulate the UK government into giving a 
damn about people who fled a war to come 
here to find their dream of being a nurse, 
you can’t regulate Apple bosses into 
giving a damn about the open web, you 
can’t regulate CEOs into giving a damn 
about their employees or governments about 
their citizens or landlords about their 
tenants. That’s not what regulation is 
for; people who give a damn largely don’t 
need regulation because they want to do 
the right thing. They might need a little 
steering into knowing what the right thing 
is, but that’s not the same. &lt;/p&gt;
&lt;p&gt;No, 
regulation is there as a reluctant 
compromise: since you can’t make people 
care, the best you can do is in some rough 
and ready fashion make them behave in a 
similar way to the way they would if they 
did. Of course, this is why the most 
insidious kind of response is not an 
attempt to evade responsibility but an attack on 
the system of regulation itself. Call 
judges saboteurs or protesters criminals 
or insurgents patriots. And why the most 
heinous betrayal is one done in the name 
of the very thing you’re destroying. Claim 
to represent the will of the people while 
hurting those people. Claim to be 
defending the law while hiding violence 
and murder behind a badge. Claim privacy 
as a shield for surveillance or for 
exclusion. &lt;a href="https://www.kryogenix.org/days/2017/01/26/we-all-sorta-thought/"&gt;We all sorta 
thought&lt;/a&gt; 
that the system could protect us, that 
those with the power could be trusted to 
use it at least a little responsibly.  And 
the last year has been one more in a 
succession of years demonstrating just how 
wrong that is. This and no other is the 
root from which a tyrant springs; when he 
first appears he is a protector. &lt;/p&gt;
&lt;p&gt;The worst 
thing about it is that the urge to protect 
other people is not only real but the best 
thing about ourselves. When it’s actually 
real. Look after others, especially those 
who need it, and look after yourself, 
because you’re one of the people who needs 
it. &lt;/p&gt;
&lt;p&gt;Chris from Clickspring polishes things 
to a high shine using tin, which surprised 
me. I thought bringing out the beauty in 
something needed a soft cloth but no, it’s 
done with metal. Some things, like silver, 
are basically shiny with almost no effort; 
there’s a reason people have prized silver 
things since before we could even write 
down why, and it’s not just because you 
could find lumps of it lying around the 
place with no need to build a smelting 
furnace. Silver looks good, and makes you 
look good in turn. Tin is useful, and it 
helps polish other things to a high shine. &lt;/p&gt;
&lt;p&gt;Today’s my 48th 
&lt;a href="https://www.kryogenix.org/days/2023/01/30/ronin/"&gt;birthday&lt;/a&gt;. 
A highly composite number. The ways Torah 
wisdom is acquired. And somewhere between 
silver and tin. That sounds OK to me.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Tue, 30 Jan 2024 21:50:00 +0000</pubDate><guid isPermaLink="false">tag:www.kryogenix.org,2024-01-30:/days/2024/01/30/somewhere-between-silver-and-tin/</guid><category>General musings</category></item><item><title>Making a Discord bot with PHP</title><link>https://www.kryogenix.org/days/2024/01/14/making-a-discord-bot-with-php/</link><description>&lt;p&gt;Discord have changed the way bots work quite a few times. Recently, though, they built a system that lets you create and register "slash commands" -- commands that you can type into the Discord chat and which do things, like &lt;code&gt;/hello&lt;/code&gt; -- and which are powered by "webhooks". That is: when someone uses your command, it sends an HTTP request to a URL of your choice, and your URL then responds, and that process powers what your users see in Discord. Importantly, this means that operating a Discord bot does not require a long-running server process. You don't need to host it somewhere where you worry about the bot process crashing, how you're going to recover from that, all that stuff. No daemon required. In fact, you can make a complete Discord bot in one single PHP file. You don't even need any PHP libraries. One file, which you upload to your completely-standard shared hosting webspace, the same way you might upload any other simple PHP thing. Here's some notes on how I did that.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://discord.com/developers/docs/getting-started"&gt;Discord documentation&lt;/a&gt; is pretty annoying and difficult to follow; all the stuff you need is in there, somewhere, but it's often hard to find where, and there's very little that explains &lt;em&gt;why&lt;/em&gt; a thing is the way it is. It's tough to grasp the "Zen" of how Discord &lt;em&gt;wants&lt;/em&gt; you to work with their stuff. But in essence, you'll need to create a Discord app: &lt;a href="https://discord.com/developers/docs/getting-started#step-1-creating-an-app"&gt;follow their instructions&lt;/a&gt; to do that. Then, we'll write our small PHP file, and upload it; finally, fill in the URL of that PHP file as the "interactive endpoint URL" in your newly-created app's general information page in the Discord developer admin. You can then add the bot to a server by visiting the URL from the "URL generator" for your app in the Discord dev admin.&lt;/p&gt;
&lt;p&gt;The PHP file will get sent blocks of JSON, which describe what a user is doing -- a command they've typed, parameters to that command, or whatever -- and respond with something which is shown to the user -- the text of a message which is your bot's reply, or a command to alter the text of a previous message, or add a clickable button to it, and the like. I won't go into detail about all the things you can do here (if that would be interesting, let me know and maybe I'll write a followup or two), but the basic structure of your bot needs to be that it &lt;strong&gt;authenticates&lt;/strong&gt; the incoming request from Discord, it &lt;strong&gt;interprets&lt;/strong&gt; that request, and it &lt;strong&gt;responds&lt;/strong&gt; to that request.&lt;/p&gt;
&lt;p&gt;Authentication first. When you create your app, you get a &lt;code&gt;client_public_key&lt;/code&gt; value, a big long string of hex digits that will look like &lt;code&gt;c78c32c3c7871369fa67&lt;/code&gt; or whatever. Your PHP file needs to know this value somehow. (How you do that is up to you; think of this like a MySQL username and password, and handle this the same way you do those.) Then, every request that comes in will have two important HTTP headers: &lt;code&gt;X-Signature-ED25519&lt;/code&gt; and &lt;code&gt;X-Signature-Timestamp&lt;/code&gt;. You use a combination of these (which provide a signature for the incoming request) and your public key to check whether the request is legitimate. There are PHP libraries to do this, but fortunately we don't need them; PHP has the relevant &lt;a href="https://www.php.net/manual/en/function.sodium-crypto-sign-verify-detached.php"&gt;signature verification&lt;/a&gt; stuff built in, these days. So, to read the content of the incoming post and verify the signature on it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="x"&gt;/* read the incoming request data */&lt;/span&gt;
&lt;span class="x"&gt;$postData = file_get_contents(&amp;#39;php://input&amp;#39;);&lt;/span&gt;
&lt;span class="x"&gt;/* get the signature and timestamp header values */&lt;/span&gt;
&lt;span class="x"&gt;$signature = isset($_SERVER[&amp;#39;HTTP_X_SIGNATURE_ED25519&amp;#39;]) ? &lt;/span&gt;
&lt;span class="x"&gt;    $_SERVER[&amp;#39;HTTP_X_SIGNATURE_ED25519&amp;#39;] : &amp;quot;&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;$timestamp = isset($_SERVER[&amp;#39;HTTP_X_SIGNATURE_TIMESTAMP&amp;#39;]) ? &lt;/span&gt;
&lt;span class="x"&gt;    $_SERVER[&amp;#39;HTTP_X_SIGNATURE_TIMESTAMP&amp;#39;] : &amp;quot;&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;/* check the signature */&lt;/span&gt;
&lt;span class="x"&gt;$sigok = sodium_crypto_sign_verify_detached(&lt;/span&gt;
&lt;span class="x"&gt;    hex2bin($signature), &lt;/span&gt;
&lt;span class="x"&gt;    $timestamp . $postData,&lt;/span&gt;
&lt;span class="x"&gt;    hex2bin($client_public_key));&lt;/span&gt;
&lt;span class="x"&gt;/* If signature is not OK, reject the request */&lt;/span&gt;
&lt;span class="x"&gt;if (!$sigok) {&lt;/span&gt;
&lt;span class="x"&gt;    http_response_code(401);&lt;/span&gt;
&lt;span class="x"&gt;    die();&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We need to correctly reject invalidly signed requests, because Discord will check that we do -- they will occasionally send test requests with bad signatures to confirm that you're doing the check. (They do this when you first add the URL to the Discord admin screens; if it won't let you save the settings, then it's because Discord thinks your URL returned the wrong thing. This is annoying, because you have no idea &lt;em&gt;why&lt;/em&gt; Discord didn't like it; best bet is to add lots of &lt;code&gt;error_log()&lt;/code&gt; logging of inputs and outputs to your PHP file and inspect the results carefully.)&lt;/p&gt;
&lt;p&gt;Next, interpret the incoming request and do things with it. The only thing we have to respond to here is a &lt;code&gt;ping&lt;/code&gt; message; Discord will send them as part of their irregular testing, and expects to get back a correctly-formatted &lt;code&gt;pong&lt;/code&gt; message.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="x"&gt;$data = json_decode($postData);&lt;/span&gt;
&lt;span class="x"&gt;if ($data-&amp;gt;type == 1) { // this is a ping message&lt;/span&gt;
&lt;span class="x"&gt;    echo json_encode(array(&amp;#39;type&amp;#39; =&amp;gt; 1)); // response: pong&lt;/span&gt;
&lt;span class="x"&gt;    die();&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The magic numbers there (1 for a &lt;code&gt;ping&lt;/code&gt;, 1 for a &lt;code&gt;pong&lt;/code&gt;) are both defined in the Discord docs (incoming values being the &lt;a href="https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-interaction-type"&gt;"Interaction Type" field&lt;/a&gt; and outgoing values the &lt;a href="https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-response-object-interaction-callback-type"&gt;"Interaction Callback Type"&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;After that, the world's approximately your oyster. You check the incoming &lt;code&gt;type&lt;/code&gt; field for the type of incoming thing this is -- a slash command, a button click in a message, whatever -- and respond appropriately. This is all stuff for future posts if there's interest, but the docs (in particular the &lt;a href="https://discord.com/developers/docs/interactions/receiving-and-responding"&gt;"receiving and responding&lt;/a&gt; and &lt;a href="https://discord.com/developers/docs/interactions/message-components"&gt;"message components"&lt;/a&gt; sections) have all the detail. For your bot to provide a slash command, you have to &lt;a href="https://discord.com/developers/docs/interactions/application-commands#registering-a-command"&gt;register it first&lt;/a&gt;, which is a faff; I wrote a little Python script to do that. You only have to do it once. The script looks approximately like this; you'll need your APP_ID and your BOT_TOKEN from the Discord dashboard.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="n"&gt;MY_COMMAND&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;doit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Do the thing&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;discord_endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;
    &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://discord.com/api/v10/applications/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;APP_ID&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/commands&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PUT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;discord_endpoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MY_COMMAND&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;Authorization&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Bot &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;BOT_TOKEN&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;User-Agent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mybotname (myboturl, 1.0.0)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once you've done that, you can use &lt;code&gt;/doit&lt;/code&gt; in a channel with your bot in, and your PHP bot URL will receive the incoming request for you to process.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Sun, 14 Jan 2024 21:57:00 +0000</pubDate><guid isPermaLink="false">tag:www.kryogenix.org,2024-01-14:/days/2024/01/14/making-a-discord-bot-with-php/</guid><category>General musings</category></item><item><title>A software Matter device that Alexa can talk to</title><link>https://www.kryogenix.org/days/2023/10/05/a-software-matter-device-that-alexa-can-talk-to/</link><description>&lt;blockquote cite="https://en.wikipedia.org/wiki/Shaddap_You_Face?useskin=vector"&gt;What's-a matter you? Hey!&lt;br&gt;
Gotta no respect?&lt;br&gt;
What-a you t'ink you do, why you look-a so sad?&lt;br&gt;
It's-a not so bad, it's-a nice-a place
    &lt;footer&gt;&lt;cite&gt;Shaddap Your Face, Joe Dolce&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;(If you just want to know about how to make your own Matter device in software and don't want to read a whole story to get to that point, then first of all that's, I mean, that's &lt;em&gt;fine&lt;/em&gt;, it's not a problem, you go ahead, I'm not hurt at &lt;em&gt;all&lt;/em&gt;, definitely not, and secondly skip down to &lt;a href="#matterpart4"&gt;Part 4&lt;/a&gt; or check out the &lt;a href="https://github.com/stuartlangridge/simple-js-matter-device"&gt;Github repo&lt;/a&gt;. But, I mean, really? You're that busy? You might wanna find a way to chill out a bit. Have a cup of tea. Enjoy life. It's better, I promise.)&lt;/p&gt;
&lt;h1&gt;Part the first: the kingdom of the blind&lt;/h1&gt;
&lt;p&gt;I've got new window blinds in my flat. They're pretty cool; ivory and purple, we're all very pleased. They're from Hillarys, who don't get a link because although the actual blinds are great, their customer service is... less so, so I'm loath to recommend them. But one of the neat things about them is that they're electrically operated. There's a remote control; press the up or down button and they go up and down. Some people would be like a fascinated small child with this technology and spend half of the first day just pressing the buttons and giggling, but not me, no no.&lt;/p&gt;
&lt;p&gt;&lt;img alt="A white room interior with a window covered by a day-night blind in a deep purple. The blind is alternating horizontal strips of deep purple fabric with a light texture, and almost-transparent white muslin. The room interior looks like a show home, because it probably is; the image is taken from Hillarys' website rather than being of my flat" src="https://kryogenix.org/images/purple-blinds-hillarys.jpg"&gt;&lt;/p&gt;
&lt;p&gt;One of the questions I was asked when speccing them out was: do you want them to be controllable by Alexa? And I thought: well, yes, I would like that. Being able to command my blinds to open or close is one more step on the quest to be a James Bond villain. All I need after that is a monorail and a big picture on the wall which revolves to show my world domination map and I'm golden.&lt;/p&gt;
&lt;p&gt;But... I do not like or trust the IoT industry. I'm not entirely against the whole concept -- I mean, I &lt;em&gt;have&lt;/em&gt; an Amazon Echo, after all. It gets used for cooking timers, my shopping list, and music&lt;sup id="sf-a-software-matter-device-that-alexa-can-talk-to-1-back"&gt;&lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-1" class="simple-footnote" title="less so music than before, after the bloody shysters at Amazon decided to take away the free music playing from Amazon Prime and make people pay extra for it"&gt;1&lt;/a&gt;&lt;/sup&gt;, but it doesn't get used for IoT stuff because I don't have any. This is, basically, because the whole IoT industry is full of grifters and thieves and I do not trust them with my data or with still being around in two years. The whole idea that I speak to a thing in my flat, that thing routes my command up to some server run by an IoT vendor, and then the IoT vendor's server speaks to another thing in my flat to make it do work... this is a stupid plan. It's the vendor forcibly inserting themselves as a middle man for literally no reason other than to exploit me later. Because they'll get bored or bought in a few years and they'll shut down the servers, with a sorry-not-sorry email about how it's "no longer viable to support" a thing I paid for and therefore they're turning it into a brick, but I can buy a replacement for the low low cost of... anyway, I'm not doing it. No. I don't want some random vendor's server to punch a hole into my internal network, I don't want my stuff to stop working if they turn their servers off or they go down, and the whole concept is hugely irritating.&lt;/p&gt;
&lt;p&gt;&lt;img alt='A tweet from j_opdenakker reading "the S in IoT stands for Security' src="https://kryogenix.org/images/s-in-iot.png"&gt;&lt;/p&gt;
&lt;p&gt;(You might be thinking: why do you have an Echo at all, then? That's got all the same problems! And you're not wrong. But I trust Amazon to still be around for a while. Trusting them with my data is another thing, of course, but I'm already on board with that... although I entirely sympathise with people who choose to not do so either from distrust or from objections to their crappy employment or sales practices.)&lt;/p&gt;
&lt;p&gt;Anyway, I looked up these blinds and the Alexa integration they do comes via a company called &lt;a href="https://www.somfy.co.uk/products/electric-blinds"&gt;Somfy&lt;/a&gt;. Their APIs seem semi-reasonably documented and I've heard nothing specifically bad about them as a company... but I still don't like the idea. If I were &lt;a href="https://mjg59.dreamwidth.org/"&gt;Matthew Garrett&lt;/a&gt; then I would probably find joy in reverse-engineering whatever the protocol is and making it work for me, but I'm not as clever as he is&lt;sup id="sf-a-software-matter-device-that-alexa-can-talk-to-2-back"&gt;&lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-2" class="simple-footnote" title="I make up for it by being, like, twice his size, though"&gt;2&lt;/a&gt;&lt;/sup&gt;. And they'll get bored or bought: I'm not sure I trust them to keep their servers running for years and years. Maybe I'd be OK with a thing that required an internet connection to someone else's server and only let me fiddle with that to the extent that I am given &lt;em&gt;permission&lt;/em&gt; for&lt;sup id="sf-a-software-matter-device-that-alexa-can-talk-to-3-back"&gt;&lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-3" class="simple-footnote" title="honestly, this is the big issue. I react very badly to stuff where I ought to be able to do a thing and I'm not permitted to do so because they don't want me to or can't be bothered to implement it, and won't let me do it myself. This is one of the big things that makes me move away from iOS every few years"&gt;3&lt;/a&gt;&lt;/sup&gt;, if I'd only expect to keep that thing for a short time, but these are window blinds. How often do you change &lt;em&gt;your&lt;/em&gt; window blinds? I expect these will still be here in twenty years! Do I expect these servers to also be there that long? Hell no. So, I'm not doing that.&lt;/p&gt;
&lt;h1&gt;Part the second: keep government local&lt;/h1&gt;
&lt;p&gt;I do actually have one "IoT" device in my flat, though. It's a remotely-controllable wall socket. It's from a company called &lt;a href="https://www.mylocalbytes.com/"&gt;LocalBytes&lt;/a&gt;, and it's basically a "smart plug": it's a cylinder that plugs into a wall socket, and has another socket on the other side of it, rather like one of those mini gangplug cube things. &lt;/p&gt;
&lt;p&gt;&lt;img alt="A LocalBytes smart plug, as described, plugged into a wall socket" src="https://kryogenix.org/images/localbytes-smart-plug.jpg"&gt;&lt;/p&gt;
&lt;p&gt;It contains a little microcontroller and wifi chip, and it runs software called &lt;a href="https://tasmota.github.io/docs/"&gt;Tasmota&lt;/a&gt;. And it's entirely locally controlled; you get a Tasmota app (or talk the documented protocol yourself from code) which can send the plug a command to turn on and off (and also a bunch more complex stuff such as turning on at a specific time), and it involves no internet servers at all. I can't get screwed by you turning off your servers (or failing to secure them properly) if there aren't any&lt;sup id="sf-a-software-matter-device-that-alexa-can-talk-to-4-back"&gt;&lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-4" class="simple-footnote" title="insert picture here of that bloke tapping his temple knowingly"&gt;4&lt;/a&gt;&lt;/sup&gt;. Now, I would not recommend these Tasmota devices to a normal person; the app is unreliable and pretends it can't find the device some of the time, and the configuration API is obscure and weird. But I am, as has been said by kings and queens, not a normal person. I'm a computer bloke. So I am OK with this, and I'd be OK with something similar to control my blinds; something that runs locally and accepts commands from Alexa and then talks to the blinds to open and close them.&lt;/p&gt;
&lt;p&gt;Now, the bit that actually talks to the blinds, I haven't started working on yet. As far as I can tell from reading, the remote control works on a standard &lt;a href="https://en.wikipedia.org/wiki/LPD433"&gt;"smart home" frequency of 433MHz&lt;/a&gt;, and there are loads of little dongles and boards that plug into USB or Raspberry Pi GPIO pins which can talk that. I'll get to that eventually; once I have a working thing, making it talk 433MHz is step 2. Step 1 is to make something that I control and which Alexa can talk to, but which &lt;em&gt;doesn't&lt;/em&gt; require servers on the internet to make it work. This rules out writing a custom Alexa skill; I can do that, and have, but you can't write a skill which makes the actual Echo in my flat do network connections. The connection comes from Amazon's servers, which means I'd have to put my little device on the internet, which I don't want to do. The concern of the servers going away doesn't apply here -- if Amazon's servers go away, my Echo stops working anyway and all of this is moot -- but I do not want to punch a hole into my internal network from outside, and I shouldn't have to. This is one thing in my house talking to another thing in my house. &lt;/p&gt;
&lt;p&gt;This problem used to be unsolvable. And then, just like in the beginning of all things, someone invented &lt;a href="https://csa-iot.org/all-solutions/matter/"&gt;Matter&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Part the third: does it Matter?&lt;/h1&gt;
&lt;p&gt;It is, obviously, stupid that every device invents its own protocol to talk to it, and none of it's documented, and none of it's standardised, and everything gets reinvented from scratch by programmers who clearly have their minds on lunchtime. So, equally obviously, the way to solve this is to have all the biggest tech companies in the world collaboratively agree on a standard way to do things.&lt;/p&gt;
&lt;p&gt;I can hear you laughing from here.&lt;/p&gt;
&lt;p&gt;This has, equally equally obviously, resulted in a disastrous nine-way collision of corporate speak, absurd specifications, paywalls for things, requirements to sign up as a "partner" before you're told anything, and documentation by press release. But to my surprise it has actually resulted in something! The Matter specifications have basically everybody on board -- Amazon, Apple, Google, most of the big players in the device world -- and have finally started to actually appear in real shipping products rather than only in conference talks. The Amazon Echo supports Matter back to the 3rd gen Dot (there's a &lt;a href="https://www.amazon.co.uk/b?ie=UTF8&amp;amp;node=63710514031"&gt;list of Matter-supporting Echo devices here&lt;/a&gt;). If you've got a Matter-supporting thingy, then it'll have the Matter logo on it:&lt;/p&gt;
&lt;p&gt;&lt;img alt='The Matter logo: three arrows with curved heads all pointing into a single central point; it has threefold symmetry like the radiation symbol and similar things. It also has the word "matter" in a curvy slightly childish font' src="https://kryogenix.org/images/matter-logo.jpg"&gt;&lt;/p&gt;
&lt;p&gt;and then you can say "Alexa, discover devices" and your Echo will search and then say "I have found a Matter device!". You then use the Alexa app on your phone to pair it, either by scanning a QR code or typing in a code, both of which should be on the device itself.&lt;/p&gt;
&lt;p&gt;Now, Matter is a big corporate spec and wants to deal with all sorts of complicated and detailed edge cases. In particular, there is a standard problem with an IoT device in your house, which is that you can't talk to it until it's on the wifi, but you can't put it on the wifi without talking to it. This normally involves the device pretending to be a wifi access point, and you connecting to it with a mobile app you have to install&lt;sup id="sf-a-software-matter-device-that-alexa-can-talk-to-5-back"&gt;&lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-5" class="simple-footnote" title="you should not need a mobile app to connect to a device pretending to be an access point. You should be able to do this from the web browser on your phone. But you can't, as I have laboriously discussed before in these pages and am still annoyed about"&gt;5&lt;/a&gt;&lt;/sup&gt;, but Matter attempts to improve this; a Matter device can potentially exchange data over wifi, over Bluetooth, over some extra network thing called Thread that I don't understand, over ethernet, the works. A lot of the setup and spec for Matter involves dealing with all this.&lt;/p&gt;
&lt;p&gt;I, personally, for myself, for this device, do not care about this. If I were making a device that would be sold to real people, I'd implement all this stuff. But since it's just me, I'm OK with requiring that my window blind device is &lt;em&gt;already&lt;/em&gt; on my wifi, and getting it that way is my problem, &lt;em&gt;before&lt;/em&gt; I try detecting it with Alexa.&lt;/p&gt;
&lt;p&gt;So, I need a way to make a Matter device; it only has to deal with wifi. The Matter specification&lt;sup id="sf-a-software-matter-device-that-alexa-can-talk-to-6-back"&gt;&lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-6" class="simple-footnote" title='as usual with corporate technology things, the Matter specification is difficult to find; one of these things where you need to sign up, or be a "partner", or pay money, or something. But it is obtainable. The Alexa Matter docs link to a page on the Matter website which lets you fill in an email address and then emails you a link to a PDF of the spec in all its 895 page glory'&gt;6&lt;/a&gt;&lt;/sup&gt; describes how to talk Matter&lt;sup id="sf-a-software-matter-device-that-alexa-can-talk-to-7-back"&gt;&lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-7" class="simple-footnote" title="super reassuringly, Matter seems to use all standard protocols! device discovery is mdns! They even have example commands for avahi-publish-service to show you how to do it, right there in the spec!"&gt;7&lt;/a&gt;&lt;/sup&gt;, but there's a lot of detail in there. Surely someone has already implemented this stuff?&lt;/p&gt;
&lt;p&gt;Well, they have... but it's not great. The &lt;a href="https://github.com/project-chip/connectedhomeip"&gt;@project-chip/connectedhomeip&lt;/a&gt; Github repository, named back in the days when Matter was still called "project CHIP" before the Branding People got their hands on it, is the reference implementation. And it's a nightmare. It's all in C, it's &lt;em&gt;huge&lt;/em&gt; (I checked out the repo and all its submodules and ran out of disk space; to get the repo and all sub-repos and then build it, you'd better have 30GB or so free), compiling it all is a massive headache, it contains code for all sorts of different single-board computers to make them Matter devices, and I couldn't make head nor tail of it. I'm sure you need all this if you're looking to build a device and ship millions of them to people in Best Buy and Currys, but I ain't. Normally, people write stuff like this in Python, but in looking around all I could find was a &lt;a href="https://github.com/home-assistant-libs/python-matter-server"&gt;Python library&lt;/a&gt; designed to work with &lt;a href="https://www.home-assistant.io/"&gt;Home Assistant&lt;/a&gt;, which is not what I wanted (I want to make a device, not a controller) and which required the CHIP SDK anyway, the big complicated nightmare thing mentioned above. I resigned myself to having to write a very noddy implementation of enough of Matter's pairing and communications stuff in Python to get a device up and running, and bitched about having to do this on social media. And then &lt;a href="https://mastodon.ie/@AlanBell"&gt;Alan Bell&lt;/a&gt;, hero of the revolution, said: have you tried &lt;a href="https://github.com/project-chip/matter.js"&gt;matter.js&lt;/a&gt;?&lt;sup id="sf-a-software-matter-device-that-alexa-can-talk-to-8-back"&gt;&lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-8" class="simple-footnote" title="There is an unfortunate naming collision here. There already was a Matter.js: it's a 2d physics engine for the web, which I've used before. But I can't see what else the people implementing the Matter spec in JavaScript could have called their thing. Only so many words in the world, I guess"&gt;8&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;I had not. So I gave it a look.&lt;/p&gt;
&lt;h1 id="matterpart4"&gt;Part the fourth: yes it Matters!&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/project-chip/matter.js"&gt;Matter.js&lt;/a&gt; is an implementation of the Matter suite of protocols in JavaScript. It does not build on the huge complicated Project CHIP SDK; it's its own thing. And it just works.&lt;/p&gt;
&lt;p&gt;If you want to build a Matter device in JavaScript, take a look at &lt;a href="https://github.com/project-chip/matter.js/blob/main/packages/matter-node.js-examples/README.md"&gt;the Matter.js Node examples&lt;/a&gt; and they work fine. You can do that right now.&lt;/p&gt;
&lt;p&gt;I did something a little tiny bit different. The Matter.js stuff is not actually JS; it's TypeScript. I don't like TypeScript&lt;sup id="sf-a-software-matter-device-that-alexa-can-talk-to-9-back"&gt;&lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-9" class="simple-footnote" title="feel free to email your long diatribe about why TypeScript is the future to IDontCare@Whatever.Bored"&gt;9&lt;/a&gt;&lt;/sup&gt; and so I wanted a plain JS thing. So I did a simple reimplementation of the simplest Matter.js example in plain JS, and made it even simpler; the original correctly lets you pass in a bunch of details on the command line to configure it, but I'm not bothered about that and wanted to keep it as simple as possible. So, &lt;a href="https://github.com/stuartlangridge/simple-js-matter-device"&gt;the simplest possible "virtual" Matter device implemented in JavaScript&lt;/a&gt;. It's a lightbulb; Alexa, and Matter, do support multiple types of devices (including window blind controllers!) but Matter.js only does lightbulbs and sockets at the moment. I'm probably going to build and contribute the window blind controller device type, if someone else doesn't get there first. Anyway, let's get this code running! Use is pretty easy for a developer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;https://github.com/stuartlangridge/simple-js-matter-device.git
Cloning&lt;span class="w"&gt; &lt;/span&gt;into&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'simple-js-matter-device'&lt;/span&gt;...
remote:&lt;span class="w"&gt; &lt;/span&gt;Enumerating&lt;span class="w"&gt; &lt;/span&gt;objects:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;.
remote:&lt;span class="w"&gt; &lt;/span&gt;Counting&lt;span class="w"&gt; &lt;/span&gt;objects:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;%&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;/11&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;.
remote:&lt;span class="w"&gt; &lt;/span&gt;Compressing&lt;span class="w"&gt; &lt;/span&gt;objects:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;%&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;/10&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;.
remote:&lt;span class="w"&gt; &lt;/span&gt;Total&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;delta&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;reused&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;delta&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;pack-reused&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
Receiving&lt;span class="w"&gt; &lt;/span&gt;objects:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;%&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;/11&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;.16&lt;span class="w"&gt; &lt;/span&gt;KiB&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.48&lt;span class="w"&gt; &lt;/span&gt;MiB/s,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;.
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;simple-js-matter-device
$&lt;span class="w"&gt; &lt;/span&gt;npm&lt;span class="w"&gt; &lt;/span&gt;install

added&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;90&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;packages,&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;audited&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;91&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;packages&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;5s

&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;packages&lt;span class="w"&gt; &lt;/span&gt;are&lt;span class="w"&gt; &lt;/span&gt;looking&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;funding
&lt;span class="w"&gt;  &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;npm&lt;span class="w"&gt; &lt;/span&gt;fund&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;details

found&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;vulnerabilities
$&lt;span class="w"&gt; &lt;/span&gt;node&lt;span class="w"&gt; &lt;/span&gt;sil.mjs&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="m"&gt;2023&lt;/span&gt;-10-06&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;:38:24.231&lt;span class="w"&gt; &lt;/span&gt;INFO&lt;span class="w"&gt;  &lt;/span&gt;Device&lt;span class="w"&gt;               &lt;/span&gt;node-matter
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
█&lt;span class="w"&gt; &lt;/span&gt;▄▄▄▄▄&lt;span class="w"&gt; &lt;/span&gt;██▀▄▀▄█&lt;span class="w"&gt; &lt;/span&gt;▄▄▄▄▄&lt;span class="w"&gt; &lt;/span&gt;█
█&lt;span class="w"&gt; &lt;/span&gt;█&lt;span class="w"&gt;   &lt;/span&gt;█&lt;span class="w"&gt; &lt;/span&gt;█▄▀▄▀▄█&lt;span class="w"&gt; &lt;/span&gt;█&lt;span class="w"&gt;   &lt;/span&gt;█&lt;span class="w"&gt; &lt;/span&gt;█
█&lt;span class="w"&gt; &lt;/span&gt;█▄▄▄█&lt;span class="w"&gt; &lt;/span&gt;██&lt;span class="w"&gt; &lt;/span&gt;▀▀▄█&lt;span class="w"&gt; &lt;/span&gt;█▄▄▄█&lt;span class="w"&gt; &lt;/span&gt;█
█▄▄▄▄▄▄▄█&lt;span class="w"&gt; &lt;/span&gt;█&lt;span class="w"&gt; &lt;/span&gt;▀▄█▄▄▄▄▄▄▄█
█&lt;span class="w"&gt; &lt;/span&gt;▄&lt;span class="w"&gt; &lt;/span&gt;█▄&lt;span class="w"&gt; &lt;/span&gt;▄▄▄█&lt;span class="w"&gt; &lt;/span&gt;█&lt;span class="w"&gt;  &lt;/span&gt;▄▀██&lt;span class="w"&gt; &lt;/span&gt;█▀█
██▀&lt;span class="w"&gt;  &lt;/span&gt;█▀▄█▄&lt;span class="w"&gt; &lt;/span&gt;█&lt;span class="w"&gt; &lt;/span&gt;▀▀▄█&lt;span class="w"&gt;  &lt;/span&gt;▀█▀█
██▄█▄▄█▄▄█▄▄▀&lt;span class="w"&gt; &lt;/span&gt;▀▄&lt;span class="w"&gt; &lt;/span&gt;█▄▀▄▀█
█&lt;span class="w"&gt; &lt;/span&gt;▄▄▄▄▄&lt;span class="w"&gt; &lt;/span&gt;█&lt;span class="w"&gt;  &lt;/span&gt;▄█▄█▄▄&lt;span class="w"&gt; &lt;/span&gt;▄&lt;span class="w"&gt; &lt;/span&gt;█&lt;span class="w"&gt; &lt;/span&gt;█
█&lt;span class="w"&gt; &lt;/span&gt;█&lt;span class="w"&gt;   &lt;/span&gt;█&lt;span class="w"&gt; &lt;/span&gt;█▄▄&lt;span class="w"&gt; &lt;/span&gt;█▄&lt;span class="w"&gt; &lt;/span&gt;▄&lt;span class="w"&gt; &lt;/span&gt;▀▄&lt;span class="w"&gt; &lt;/span&gt;▀██
█&lt;span class="w"&gt; &lt;/span&gt;█▄▄▄█&lt;span class="w"&gt; &lt;/span&gt;█&lt;span class="w"&gt;  &lt;/span&gt;▀█▄█&lt;span class="w"&gt; &lt;/span&gt;▀█&lt;span class="w"&gt;  &lt;/span&gt;▀&lt;span class="w"&gt; &lt;/span&gt;█
█▄▄▄▄▄▄▄█▄███▄██▄██▄█▄█
▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀

&lt;span class="m"&gt;2023&lt;/span&gt;-10-06&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;:38:24.330&lt;span class="w"&gt; &lt;/span&gt;INFO&lt;span class="w"&gt;  &lt;/span&gt;Device&lt;span class="w"&gt;               &lt;/span&gt;QR&lt;span class="w"&gt; &lt;/span&gt;Code&lt;span class="w"&gt; &lt;/span&gt;URL:&lt;span class="w"&gt; &lt;/span&gt;https://project-chip.github.io/connectedhomeip/qrcode.html?data&lt;span class="o"&gt;=&lt;/span&gt;MT:Y.K90-Q000KA0648G00
&lt;span class="m"&gt;2023&lt;/span&gt;-10-06&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;:38:24.330&lt;span class="w"&gt; &lt;/span&gt;INFO&lt;span class="w"&gt;  &lt;/span&gt;Device&lt;span class="w"&gt;               &lt;/span&gt;Manual&lt;span class="w"&gt; &lt;/span&gt;pairing&lt;span class="w"&gt; &lt;/span&gt;code:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;34970112332&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We've git cloned the repository, done &lt;code&gt;npm install&lt;/code&gt; to install the dependencies, and run it. That starts up our virtual device, and also prints the QR code and manual pairing code used for pairing. Job done; your device now exists.&lt;/p&gt;
&lt;p&gt;Next, we teach Alexa about it. Exercise your most commanding voice and say "Alexa, discover new devices!" Your Echo will tell you it's doing it, and then after a few seconds of searching, tell you that it's found one Matter device and send you off to the devices section of the Alexa app on your phone to connect it up; I also got a notification on my phone telling me the same thing.&lt;/p&gt;
&lt;p&gt;&lt;img alt='an iOS lock screen showing a notification reading "Tap to begin setup with Alexa: New Matter Device found' src="https://kryogenix.org/images/matter-ios-shots/01-notification.png"&gt;&lt;/p&gt;
&lt;p&gt;Hit that notification and you end up on the Devices screen, where it'll tell you to "Connect your Matter Light Bulb":&lt;/p&gt;
&lt;p&gt;&lt;img alt="the Alexa app's Devices screen, with &amp;quot;Connect your Matter Light Bulb&amp;quot; in a newly showing &amp;quot;Available Devices&amp;quot; section" src="https://kryogenix.org/images/matter-ios-shots/02-devices.png"&gt;&lt;/p&gt;
&lt;p&gt;(For some reason, my device seems to present as two separate devices; a light bulb and an unnamed "Matter device". I don't know why. It seems that you can pick either.)&lt;/p&gt;
&lt;p&gt;Choose to connect to this Matter device, and you get a screen called "Control your Matter device with Alexa", which is exactly what we want to do:&lt;/p&gt;
&lt;p&gt;&lt;img alt='the Alexa app showing a screen headlined "Control your Matter device with Alexa", and Cancel and Next buttons' src="https://kryogenix.org/images/matter-ios-shots/03-control.png"&gt;&lt;/p&gt;
&lt;p&gt;When asked if your device has a Matter logo, say yes (it would do if it were a real Matter device, of course):&lt;/p&gt;
&lt;p&gt;&lt;img alt='the Alexa app showing a screen headlined "Does your device have a Matter logo?", and No and Yes buttons' src="https://kryogenix.org/images/matter-ios-shots/04-logo.png"&gt;&lt;/p&gt;
&lt;p&gt;Then you have to scan the QR code. Usefully, the device has printed out a QR code in the Terminal where you ran it, above; scan that. If that didn't work for some reason, it has also printed a URL for that QR code which you can follow to show the QR in the browser, and if that doesn't work either, you can enter the numeric code it printed (the "manual pairing code) instead:&lt;/p&gt;
&lt;p&gt;&lt;img alt='the Alexa app showing a screen headlined "Locate a QR code shown for your device", and "Try numeric code instead?" and "Scan QR code" buttons' src="https://kryogenix.org/images/matter-ios-shots/05-qr.png"&gt;&lt;/p&gt;
&lt;p&gt;Alexa will then claim to be "Looking for your device" (and the stuff in the Terminal will print a bunch of logging things about "Pase server: Received pairing request from udp://192.168.1.103:5541" and whatnot):&lt;/p&gt;
&lt;p&gt;&lt;img alt='the Alexa app showing a screen headlined "Looking for your device", and a waiting spinner' src="https://kryogenix.org/images/matter-ios-shots/06-looking.png"&gt;&lt;/p&gt;
&lt;p&gt;and then, all else being good, you'll get a screen telling you your light is connected! It's called "Kryogenix Light" in this screen, and "Stuart Light" elsewhere; you can see those strings in &lt;code&gt;sil.mjs&lt;/code&gt; and can customise them to your heart's content.&lt;/p&gt;
&lt;p&gt;&lt;img alt='the Alexa app showing a screen headlined "Kryogenix Light found and connected", and a Next button' src="https://kryogenix.org/images/matter-ios-shots/07-connected.png"&gt;&lt;/p&gt;
&lt;p&gt;You should now have a "Lights" section in the Devices screen of your Alexa app. You can use this to turn the "light" on and off from the Alexa app, or you can say "Alexa, turn Stuart Light on" to do it by voice. When you do that, the Terminal should print &lt;code&gt;!!!!!!!!!!!!!!!! GOT COMMAND true&lt;/code&gt; (or &lt;code&gt;false&lt;/code&gt;), which means it's calling the &lt;code&gt;onOffListener&lt;/code&gt; we &lt;a href="https://github.com/stuartlangridge/simple-js-matter-device/blob/56e4d964c1f1fc5ff9164292bca3b20cea262d5f/sil.mjs#L45"&gt;defined in sil.mjs&lt;/a&gt;. You can customise this to do whatever you'd like!&lt;/p&gt;
&lt;p&gt;&lt;img alt='the Alexa app showing a screen headlined "Stuart Light", and a big circular on/off power button, currently set to On with a blue halo around it' src="https://kryogenix.org/images/matter-ios-shots/08-onoff.png"&gt;&lt;/p&gt;
&lt;p&gt;And that's it working. That's a software device, which you can pair with Alexa and customise how you choose; it doesn't require you to write an Alexa skill, and the device does not need to be accessible from the internet. That's just what I want.&lt;/p&gt;
&lt;p&gt;Now I suppose I have to make it do something useful...&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-a-software-matter-device-that-alexa-can-talk-to-1"&gt;less so music than before, after the bloody shysters at Amazon decided to take away the free music playing from Amazon Prime and make people pay extra for it &lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-a-software-matter-device-that-alexa-can-talk-to-2"&gt;I make up for it by being, like, twice his size, though &lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-2-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-a-software-matter-device-that-alexa-can-talk-to-3"&gt;honestly, this is the big issue. I react very badly to stuff where I &lt;em&gt;ought&lt;/em&gt; to be able to do a thing and I'm not permitted to do so because they don't want me to or can't be bothered to implement it, and won't let me do it myself. This is one of the big things that makes me move away from iOS every few years &lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-3-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-a-software-matter-device-that-alexa-can-talk-to-4"&gt;insert picture here of that bloke tapping his temple knowingly &lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-4-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-a-software-matter-device-that-alexa-can-talk-to-5"&gt;you should not need a mobile app to connect to a device pretending to be an access point. You should be able to do this from the web browser on your phone. But you can't, as &lt;a href="https://www.kryogenix.org/days/2020/08/18/iot-devices-and-android-and-disappointment/"&gt;I have laboriously discussed before in these pages&lt;/a&gt; and am still annoyed about &lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-5-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-a-software-matter-device-that-alexa-can-talk-to-6"&gt;as usual with corporate technology things, the Matter specification is difficult to find; one of these things where you need to sign up, or be a "partner", or pay money, or something. But it is obtainable. &lt;a href="https://developer.amazon.com/en-US/docs/alexa/smarthome/matter-support.html"&gt;The Alexa Matter docs&lt;/a&gt; link to &lt;a href="https://csa-iot.org/developer-resource/specifications-download-request/"&gt;a page on the Matter website&lt;/a&gt; which lets you fill in an email address and then emails you a link to &lt;a href="https://csa-iot.org/wp-content/uploads/2022/11/22-27349-001_Matter-1.0-Core-Specification.pdf"&gt;a PDF of the spec&lt;/a&gt; in all its 895 page glory &lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-6-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-a-software-matter-device-that-alexa-can-talk-to-7"&gt;super reassuringly, Matter seems to use all standard protocols! device discovery is mdns! They even have example commands for &lt;code&gt;avahi-publish-service&lt;/code&gt; to show you how to do it, right there in the spec! &lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-7-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-a-software-matter-device-that-alexa-can-talk-to-8"&gt;There is an unfortunate naming collision here. There already was a &lt;a href="https://brm.io/matter-js/"&gt;Matter.js&lt;/a&gt;: it's a 2d physics engine for the web, which I've used before. But I can't see what else the people implementing the Matter spec in JavaScript could have called their thing. Only so many words in the world, I guess &lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-8-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-a-software-matter-device-that-alexa-can-talk-to-9"&gt;feel free to email your long diatribe about why TypeScript is the future to IDontCare@Whatever.Bored &lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-9-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Thu, 05 Oct 2023 09:44:00 +0100</pubDate><guid isPermaLink="false">tag:www.kryogenix.org,2023-10-05:/days/2023/10/05/a-software-matter-device-that-alexa-can-talk-to/</guid><category>General musings</category></item><item><title>Numeric Pangrams</title><link>https://www.kryogenix.org/days/2023/08/06/numeric-pangrams/</link><description>&lt;p&gt;A few days ago I had an interesting maths thought which I dropped &lt;a href="https://mastodon.social/@sil/110833073093233760"&gt;on Mastodon&lt;/a&gt;:&lt;/p&gt;
&lt;iframe src="https://mastodon.social/@sil/110833073093233760/embed" class="mastodon-embed" style="max-width: 100%; border: 0" width="400" allowfullscreen="allowfullscreen"&gt;
&lt;p&gt;Today’s interesting maths problem to think about: what is the largest total from a correct maths equation which uses any number of +*\- symbols, one =, and the digits from 0-9 once each?&lt;/p&gt;

&lt;p&gt;For example, if we’re doing it for digits 0-4, then 40-12=3 isn’t valid (answer is wrong), 1+3=4 isn’t valid (correct but doesn’t use 0 or 2), 12/4+0=3 is good, and 4*3+0=12 is better (because 12 is higher than 3).&lt;/p&gt;

&lt;p&gt;Is there an interesting way to solve this which isn’t “have a computer check all possibilities”?&lt;/p&gt;
&lt;/iframe&gt;
&lt;script src="https://mastodon.social/embed.js" async="async"&gt;&lt;/script&gt;

&lt;p&gt;Disappointingly, I couldn't think of an interesting way to solve it which wasn't "have a computer check all the possibilities", so I had a computer check all the possibilities.&lt;/p&gt;
&lt;p&gt;I'm not publishing the script, because it's not very good; in particular, I'm sure this is the sort of thing that someone could make run in a few seconds if they were clever. I wasn't feeling clever, so I brute-forced it and just left it to run for a few hours.&lt;/p&gt;
&lt;p&gt;These are numeric pangrams, I suppose you might call them. A pangram is a sentence which uses all the letters in the alphabet at least once: there are a bunch of famous English examples, starting with "The quick brown fox jumps over a lazy dog" and getting less and less comprehensible as they get shorter. Vexing quizzes show up a lot. Anyway, after I thought up the term "numeric pangrams" I checked to see if anybody else had already done so and of course Greg Ross at &lt;a href="https://www.futilitycloset.com/2007/10/11/numerical-pangrams/"&gt;Futility Closet&lt;/a&gt; did sixteen years ago. His examples are the digits from 1-9, though (his biggest example is &lt;code&gt;4 × 1963 = 7852&lt;/code&gt;), and my 0-9 suggestion allows for much larger total values.&lt;/p&gt;
&lt;p&gt;Anyway, the best equations I could come up with which use all the digits from 0-9 were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;42 × 8 × 91 = 30576&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;46 × 715 = 32890&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;4 × 9127 = 36508&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;63 × 927 = 58401&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;7 × 9403 = 65821&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is the sort of thing that &lt;a href="https://www.kryogenix.org/days/2018/02/08/sorry-henry/"&gt;Henry Dudeney&lt;/a&gt; would have cleverly done by hand. Python is the way forward, of course.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Sun, 06 Aug 2023 14:11:00 +0100</pubDate><guid isPermaLink="false">tag:www.kryogenix.org,2023-08-06:/days/2023/08/06/numeric-pangrams/</guid><category>General musings</category></item></channel></rss>