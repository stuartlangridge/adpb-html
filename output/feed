<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>as days pass by</title><link>http://www.kryogenix.org/days/</link><description>scratched tallies on the prison wall</description><atom:link href="http://www.kryogenix.org/days/feed" rel="self"></atom:link><lastBuildDate>Wed, 13 Jan 2016 14:32:00 +0000</lastBuildDate><item><title>Managing my books</title><link>http://www.kryogenix.org/days/2016/01/13/managing-my-books/</link><description>&lt;p&gt;I read a lot of books, and these days quite a few of them are ebooks. I keep a &lt;a href="http://kryogenix.org/booklist"&gt;list of books I’ve read&lt;/a&gt;, and I try to review a reasonable proportion of those when I get time. &lt;a href="https://twitter.com/mumak/status/686968511508385792"&gt;Jono Lange asked&lt;/a&gt; how I maintain this list, so I said I’d write it up.&lt;/p&gt;
&lt;p&gt;First, books are in &lt;a href="http://calibre-ebook.com/"&gt;Calibre&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img style="max-width: 100%" src="http://kryogenix.org/images/calibre-2016.png"&gt;&lt;/p&gt;
&lt;p&gt;I keep the metadata about each book up to date there, and I write my reviews in the “Comments” section.&lt;/p&gt;
&lt;p&gt;I then have a little script I run called &lt;code&gt;calibre-dump-library&lt;/code&gt;. It looks like this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

calibredb &lt;span class="nb"&gt;export&lt;/span&gt; --all --dont-save-cover --dont-write-opf &lt;span class="se"&gt;\&lt;/span&gt;
    --formats&lt;span class="o"&gt;=&lt;/span&gt;EPUB --to-dir&lt;span class="o"&gt;=&lt;/span&gt;/home/aquarius/Documents/Books &lt;span class="se"&gt;\&lt;/span&gt;
    --template&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"{authors}/{series:|(| }{series_index:0&amp;gt;2s| |) }{title}"&lt;/span&gt;

python ~/bin/calibre-dump-comments.py &amp;gt; ~/Documents/Books/comments.json
scp ~/Documents/Books/comments.json kryogenix.org:public_html/booklist/
python ~/bin/calibre-export-link-recent.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;This does four things:&lt;/p&gt;
&lt;h2&gt;Export the books from Calibre into an external folder&lt;/h2&gt;
&lt;p&gt;This is done in quite a careful way; my &lt;code&gt;Documents/Books&lt;/code&gt; folder has all my books in it, organised by author&lt;sup id="sf-managing-my-books-1-back"&gt;&lt;a title="Do not access books inside calibre’s own Calibre Library folder. That is calibre’s private property and should not be fiddled with; in particular, books are often in a sort of “unpacked” state inside there" href="#sf-managing-my-books-1" class="simple-footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;. It’s synced elsewhere, and also available to my phone so I can fetch any book from my collection. The &lt;code&gt;--template&lt;/code&gt; stuff is somewhat laboriously worked out so that &lt;em&gt;The Name of the Wind&lt;/em&gt; by Patrick Rothfuss is in a folder named &lt;code&gt;Patrick Rothfuss&lt;/code&gt; and is itself named &lt;code&gt;(Kingkiller Chronicles 01) Name of the Wind, The.epub&lt;/code&gt;, so all the books in a series stay together and in order.&lt;/p&gt;
&lt;p&gt;It uses &lt;code&gt;calibredb&lt;/code&gt;, which is the command line tool to access, export, work with, and edit calibre’s database. Calibre does a pretty impressive job of making all its stuff available to external tools and scripts; you do not need to run the app itself to fiddle with the database. Here we’re using &lt;code&gt;calibredb export&lt;/code&gt; to export a bunch of books to an external folder.&lt;/p&gt;
&lt;h2&gt;Export my reviews and some book metadata to a &lt;span class="caps"&gt;JSON&lt;/span&gt; file&lt;/h2&gt;
&lt;p&gt;I need the &lt;span class="caps"&gt;JSON&lt;/span&gt; file so I can drop it onto my website and build the booklist. So, this relatively trivial Python&lt;sup id="sf-managing-my-books-2-back"&gt;&lt;a title="Python 2. Yes. No upgrading in Castle Langridge" href="#sf-managing-my-books-2" class="simple-footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; script runs &lt;code&gt;calibredb list&lt;/code&gt; to dump the metadata contents out into a pipe-separated text list; we then parse that list in Python so that it’s sorted and any missing metadata is added, and then dump it as &lt;span class="caps"&gt;JSON&lt;/span&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;
&lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_output&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;"calibredb"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"list"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"-f"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"authors,title,comments,timestamp,series,series_index"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;"--separator"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"-w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"10000"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bookid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;comments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;series&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;series_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;comments&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"None"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;comments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;series&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;"None"&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;series_index&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;series_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;series_index&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;anti_series_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;999&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;series_index&lt;/span&gt;
        &lt;span class="nl"&gt;else:&lt;/span&gt;
            &lt;span class="n"&gt;series&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;None&lt;/span&gt;
            &lt;span class="n"&gt;series_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;None&lt;/span&gt;
            &lt;span class="n"&gt;anti_series_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;"authors"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"comments"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;comments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"timestamp"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"bookid"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bookid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"series"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;series&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"series_index"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;series_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"ymd"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;"anti_series_index"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;anti_series_index&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"ymd"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"series"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"anti_series_index"&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Copy the &lt;span class="caps"&gt;JSON&lt;/span&gt; file to my website&lt;/h2&gt;
&lt;p&gt;The actual &lt;a href="http://kryogenix.org/booklist"&gt;book list&lt;/a&gt; is a reasonably simple &lt;span class="caps"&gt;PHP&lt;/span&gt; script which reads the &lt;span class="caps"&gt;JSON&lt;/span&gt; file and displays the list of books, or displays a list of reviews if that’s what you picked. Not very complicated; if you’re desperate for the source, ask and I’ll send it over, but it’s really not hard.&lt;/p&gt;
&lt;h2&gt;Set up the recent list&lt;/h2&gt;
&lt;p&gt;It’s handy, when browsing my &lt;code&gt;Books&lt;/code&gt; folder from my phone, to be able to see the books I added most recently to my list. So as a final step we create a folder called &lt;code&gt;000RECENT&lt;/code&gt; (so it is at the top of the list) and copy the ten most recently added books into it.&lt;sup id="sf-managing-my-books-3-back"&gt;&lt;a title="You might be saying: why not symlink them? And the answer is that AndFTP, which is the SFTP app I use from Android to copy books from my Books folder onto my phone, doesn’t like symlinks and thinks they’re a folder. So, we copy them. Low-tech." href="#sf-managing-my-books-3" class="simple-footnote"&gt;3&lt;/a&gt;&lt;/sup&gt; This is also not complex stuff; walk through all the list, sort them in last-modified time order, pick the top 10, copy them.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;shutil&lt;/span&gt;
&lt;span class="n"&gt;RECENT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"/home/aquarius/Documents/Books/000RECENT"&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getfiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;epubs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;these&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".epub"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s"&gt;"000RECENT"&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;epubs&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;st_mtime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;these&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;epubs&lt;/span&gt;
&lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getfiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/home/aquarius/Documents/Books"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cmp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="n"&gt;shutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rmtree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RECENT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RECENT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RECENT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;". "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;shutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copyfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"Recent files now are:"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;So, that’s what I do. It means that I have a list of all my books, I have the ability to review books, my reviews are published on my own website (and &lt;a href="goodreads.com/review/list/11006320-stuart-langridge"&gt;on Goodreads&lt;/a&gt; if you prefer to follow them there; Calibre takes care of syncing my book list with Goodreads), and I can get at any of my books easily from wherever I am on whatever device I want, as long as it can do &lt;code&gt;ssh&lt;/code&gt;. This has all evolved in fits and starts over a few years, but… I like books, and spending some time to make my access to them easier is a good thing in, er, in my book.&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-managing-my-books-1"&gt;Do not access books inside calibre’s own Calibre Library folder. That is calibre’s private property and should not be fiddled with; in particular, books are often in a sort of “unpacked” state inside there &lt;a href="#sf-managing-my-books-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-managing-my-books-2"&gt;Python 2. Yes. No upgrading in Castle Langridge &lt;a href="#sf-managing-my-books-2-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-managing-my-books-3"&gt;You might be saying: why not symlink them? And the answer is that AndFTP, which is the &lt;span class="caps"&gt;SFTP&lt;/span&gt; app I use from Android to copy books from my Books folder onto my phone, doesn’t like symlinks and thinks they’re a folder. So, we copy them. Low-tech. &lt;a href="#sf-managing-my-books-3-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Wed, 13 Jan 2016 14:32:00 +0000</pubDate><guid>tag:www.kryogenix.org/days,2016-01-13:2016/01/13/managing-my-books/</guid></item><item><title>Book review: Adaptive Web Design by Aaron Gustafson</title><link>http://www.kryogenix.org/days/2016/01/11/book-review-adaptive-web-design-by-aaron-gustafson/</link><description>&lt;p&gt;There&amp;#8217;s been a lot of talk over the years and especially recently 
about progressive enhancement: building things for the Web that work, 
that are 
&lt;a href="http://www.kryogenix.org/days/2015/06/28/availability/"&gt;available&lt;/a&gt; 
to all, whether that&amp;#8217;s people in a bad cellphone area or people on 
dodgy hotel wifi or people with a Windows phone or cognitive issues 
or Safari on some retina screen in a coffee shop. And one of the lead 
voices in that discussion has been &lt;a href="https://aaron-gustafson.com/"&gt;Aaron 
Gustafson&lt;/a&gt; who has just written a book. 
It&amp;#8217;s called &lt;a href="http://www.peachpit.com/store/adaptive-web-design-crafting-rich-experiences-with-9780134216140"&gt;Adaptive Web Design: Crafting Rich Experiences with 
Progressive Enhancement, Second 
Edition&lt;/a&gt;. 
Bit of a mouthful as a title, but it&amp;#8217;s worth it. I won&amp;#8217;t give a tldr 
because it&amp;#8217;s &lt;em&gt;not&lt;/em&gt; too long and I &lt;em&gt;did&lt;/em&gt; read it, but the short 
version is: this book is worth your time. And I was sent a free copy 
to review, I should&amp;nbsp;note. &lt;/p&gt;
&lt;p&gt;It surprised me to discover that it&amp;#8217;s not actually really a technical book. Well, it is of course &amp;#8212; it&amp;#8217;s 
useless to you if you&amp;#8217;re not building things for the Web, and it&amp;#8217;s 
full of code snippets &amp;#8212; but it&amp;#8217;s not just about &lt;span class="caps"&gt;HTML&lt;/span&gt; or about server 
technologies or whatever. It&amp;#8217;s got lots of advice on how to write 
copy, on design, on how to think about building the Web. It&amp;#8217;s not, if 
I&amp;#8217;m honest, a single book putting together and proposing a single 
idea; it&amp;#8217;s more a collection of related relevant stuff that broadly 
fits under the heading. It&amp;#8217;s &amp;#8220;How To Do My Job, by Aaron Gustafson&amp;#8221;, 
if you&amp;nbsp;will. &lt;/p&gt;
&lt;p&gt;I agree with most of it. Making your Web stuff available 
to everyone is not just a conversation about the technology; it 
&lt;em&gt;does&lt;/em&gt; involve thinking about all of your design and your technology 
and your strategy and your copy. Technology is the least important 
bit, most of the&amp;nbsp;time. &lt;/p&gt;
&lt;p&gt;I have a few complaints, mind. Some minor nitpicking and some&amp;#8230; well, some a bit more&amp;nbsp;serious. &lt;/p&gt;
&lt;p&gt;On the nitpicking front, the clear leader is that all the links in the book 
(I have the epub ebook version) are to shortened perma.cc URLs. In 
any book this would annoy me; in one such as this which waxes 
rhapsodic about the Web as a platform it&amp;#8217;s practically criminal. I 
have no idea where these links go. Yes, it&amp;#8217;s a link archiving 
service, but being able to see what the link actually &lt;em&gt;is&lt;/em&gt; is also 
important! And, as Pat Lauke 
&lt;a href="https://twitter.com/patrick_h_lauke/status/682537945950208000"&gt;notes&lt;/a&gt;, 
sometimes the service goes down, which it did over New Year 2015. 
Full credit to Aaron for getting on their case, and it came back 
after some time, but in the interim I was entirely lost. Yes, there&amp;#8217;s 
a risk &amp;#8212; nay, a certainty &amp;#8212; that over time the book will become 
less and less useful as the links therein head off to the 404 
Promised Land. But perma.cc is a single point of failure; it fails, 
as we&amp;#8217;ve seen; and even if it doesn&amp;#8217;t, it&amp;#8217;s useless without the 
Internet. I feel strangely reluctant to visit links with no 
indication whatever of what they&amp;#8217;re for; I feel the same way about 
&lt;span class="caps"&gt;URL&lt;/span&gt; shortened links. At least if I had the &lt;span class="caps"&gt;URL&lt;/span&gt; I could punch it into 
archive.org, and maybe making sure they were all &lt;em&gt;there&lt;/em&gt; would have 
been a better use of&amp;nbsp;time. &lt;/p&gt;
&lt;p&gt;There&amp;#8217;s also a little bit of a tendency to 
go for the sonorous quotable soundbite even if it undermines the 
point: as an example, take &amp;#8220;The purpose of design is not to make 
something pretty; it’s to clarify.&amp;#8221; Nice quotable sentiment, but no 
it isn&amp;#8217;t. It&amp;#8217;s to do both. The aesthetic usability effect is a real 
thing. People like things more when they&amp;#8217;re pretty, and they 
objectively find things easier to use when they&amp;#8217;re pretty, all else 
being equal. Certainly being pretty at the expense of clarity is a 
bad thing (Aaron himself says rather elegantly that &amp;#8220;beauty has its 
place, but a beautiful, unusable thing is not design; it’s art&amp;#8221;) and 
you can doubtless name a number of products which do exactly that. 
But being clear and not pretty is just as bad, because then nobody 
uses your&amp;nbsp;thing. &lt;/p&gt;
&lt;p&gt;There are places where warnings are given but 
solutions are not. &amp;#8220;Remember Jason Samuels and the 1,000 different 
screen sizes he was seeing every quarter? You can’t design every one 
of those experiences&amp;#8221;, says our author.  But the counter argument is: 
we&amp;#8217;ll design the important ones (which normally means &amp;#8220;the designer&amp;#8217;s 
iPhone and the designer&amp;#8217;s high dpi macbook&amp;#8221;) and the rest aren&amp;#8217;t 
important. Having more ammunition to counter this claim would have 
been nice. The next page actually gives such designers the excuse 
they need by saying that it&amp;#8217;d be foolish to not do this! &amp;#8220;That 
content is largely lost to history because the format evolved in a 
way that made newer versions of Word incapable of reading those older 
files.&amp;#8221; Agreed entirely. Now, how do we stop people repeating the 
same mistake by buying an iPhone? There&amp;#8217;s the aesthetic usability 
effect&amp;nbsp;again. &lt;/p&gt;
&lt;p&gt;But there is a larger complaint, and it&amp;#8217;s related to 
the desire to make important-sounding pronouncements. Firstly, 
though, cards on the table: I am at &lt;em&gt;least&lt;/em&gt; as guilty of this as 
Aaron is, and likely more. So know that I say it with&amp;nbsp;love. &lt;/p&gt;
&lt;p&gt;You see, there&amp;#8217;s very little in the way of problems, things to be overcome in 
our industry, in building for the web, that we honestly don&amp;#8217;t know 
how to solve. There&amp;#8217;s not much where everyone&amp;#8217;s scratching their 
heads and saying, well, this is just difficult, sorry. Most things 
are known. Some are known better than others, and some are certainly 
&lt;em&gt;explained&lt;/em&gt; better than others; doing that explanation is why books 
such as this exist. But that ain&amp;#8217;t the secret. The secret is that 
most people who work on the web aren&amp;#8217;t Aaron. They don&amp;#8217;t know; they 
don&amp;#8217;t follow; they don&amp;#8217;t read. And a part of that is because some of 
them don&amp;#8217;t care, but most people do. No, the reason most web 
developers don&amp;#8217;t leap into action to make great things is that most 
of what we say just doesn&amp;#8217;t seem relevant to them. It&amp;#8217;s all well and 
good saying &amp;#8220;start by writing the kind of copy you want to read&amp;#8221;, but 
what do you do when you&amp;#8217;re writing the safety manual for an airport? 
Or a table of delivery instructions? And when last time you did this 
you put in a bit of a joke to make the copy better and nearly got 
fired for it? I&amp;#8217;ve heard a bunch of people &amp;#8212; to be clear, &lt;em&gt;not&lt;/em&gt; 
Aaron &amp;#8212; say &amp;#8220;well, just don&amp;#8217;t take on clients with boring work&amp;#8221; or 
&amp;#8220;quit your job and do something you enjoy instead&amp;#8221;. Would that 
everyone were that lucky, Mr Rock Star Consultant Bloke. And there&amp;#8217;s 
a touch of this attitude in some of this book: &amp;#8220;We often use fake 
text&amp;#8230; while we are waiting for &amp;#8216;final, approved copy&amp;#8217; (as though 
such a thing exists).&amp;#8221; You know, I know, everyone knows that there 
isn&amp;#8217;t any magic anointed &amp;#8220;final approved copy&amp;#8221;, but that doesn&amp;#8217;t mean 
that a developer can &lt;em&gt;act&lt;/em&gt; like they know that. Superstar consultants 
can. People on the front lines normally can&amp;#8217;t, even if they know it 
for the truth. And I think this prevailing attitude &amp;#8212; the &amp;#8220;if you 
don&amp;#8217;t like your job, quit and get a better one&amp;#8221; &amp;#8212; turns off people 
in our industry who want to do better but don&amp;#8217;t have the free hand 
that, say, I do. This is something I want to work on in myself during&amp;nbsp;2016.&lt;/p&gt;
&lt;p&gt;But all this is beside the point. The book is worth it. Whatever 
you do on the web there&amp;#8217;ll be something in this book you didn&amp;#8217;t 
know and will be better off for 
knowing. &lt;a href="http://adactio.com/journal/4272"&gt;Jeremy&amp;#8217;s datalist trick?&lt;/a&gt; Well 
impressed. That feels like Duff&amp;#8217;s device must have done to C 
people. PageRank being named for Larry rather than because it 
ranks pages? Blimey. So, good work, Aaron. People: read this&amp;nbsp;book. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Mon, 11 Jan 2016 23:14:00 +0000</pubDate><guid>tag:www.kryogenix.org/days,2016-01-11:2016/01/11/book-review-adaptive-web-design-by-aaron-gustafson/</guid></item><item><title>SCaLE 14x plans</title><link>http://www.kryogenix.org/days/2016/01/11/scale-14x-plans/</link><description>&lt;p&gt;In a week and a half I am flying out to Pasadena to the &lt;a href="https://www.socallinuxexpo.org/scale/14x"&gt;SCALE14x&lt;/a&gt; conference. I will be there from the evening of Wed 20th Jan 2016 to Sun 24th Jan&amp;nbsp;2016.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;SCALE&lt;/span&gt; is a tremendous conference, as I have mentioned many times before. This is a busy year for me, so I wanted to share what I will be up&amp;nbsp;to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Thursday 21st January 2016 at 4pm &amp;#8212; Ubucon developer track. I&amp;#8217;m doing a talk named &lt;a href="http://ubucon.org/en/events/ubucon-summit-us/talks/#beyond-building-ubuntu-phone-apps"&gt;Beyond building Ubuntu phone apps
&lt;/a&gt;, which covers the things that you do with your app after you&amp;#8217;re excited that you could build it at all; analytics, in-app payments, advertising, all the things that other platforms will expect, but done in a way that fits the Ubuntu vibe (at least a&amp;nbsp;bit).&lt;/li&gt;
&lt;li&gt;Friday 22nd January 2016 at some point (you&amp;#8217;ll know as soon as I do) &amp;#8212; Alan Pope and I are talking about &lt;a href="http://popey.com/blog/2015/12/16/testing-ubuntu-apps-as-a-service/"&gt;marvin&lt;/a&gt;, a cloud service where you can upload your Ubuntu phone apps and have them run on a bunch of phones to confirm they&amp;nbsp;work&lt;/li&gt;
&lt;li&gt;Friday 22nd Jan 2016 at 8pm &amp;#8212; Ballroom &lt;span class="caps"&gt;DE&lt;/span&gt;. &lt;strong&gt;Bad Voltage: Live&lt;/strong&gt; &amp;#8212; yes! The live show of the &lt;a href="http://badvoltage.org"&gt;podcast&lt;/a&gt;. Come join us for a fun, informative, and irreverent live Bad Voltage performance. There will be free beer, lots of prizes (including a $2200 Pogo Linux workstation, Zareason Strata laptop, Amazon Fire Stick, Mycroft, Raspberry Pi 2 kit, plenty of swag and more), and plenty of audience participation and surprises. If you&amp;#8217;re not sure if you&amp;#8217;re coming to SCaLE yet, then (1) this ought to be enough to swing the balance, (2) how are you not sure?, and (3) you can save money on your SCaLE ticket by using our &lt;a href="http://badvoltage.org/live"&gt;discount code&lt;/a&gt;, yes&amp;nbsp;indeed.&lt;/li&gt;
&lt;li&gt;Sat 23rd Jan 2016 at 8pm &amp;#8212; Ballroom &lt;span class="caps"&gt;DE&lt;/span&gt;. The Weakest Geek. In which I am a participant. Should be fun, I do&amp;nbsp;believe&amp;#8230;!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I am looking forward to seeing you all there and if you would like have a meeting while I am there, then&amp;#8230; well, I&amp;#8217;ll be in the bar, most likely. Track me down for a chat. Or &lt;a href="http://kryogenix.org/contact"&gt;drop me a note&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(With apologies to &lt;a href="http://www.jonobacon.org/2016/01/11/scale14x-plans/"&gt;Jono&lt;/a&gt; for stealing his format and, like, half his&amp;nbsp;words&amp;#8230;)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Mon, 11 Jan 2016 18:38:00 +0000</pubDate><guid>tag:www.kryogenix.org/days,2016-01-11:2016/01/11/scale-14x-plans/</guid></item><item><title>Titan, the toughest cable ever</title><link>http://www.kryogenix.org/days/2015/12/29/titan-the-toughest-cable-ever/</link><description>&lt;p&gt;I was rather decently sent a &lt;a href="http://www.fusechicken.com/collections/titan-the-toughest-cable-on-earth"&gt;Titan charging cable&lt;/a&gt; by the people at Fusechicken, and I reviewed it for the upcoming episode of Bad Voltage. I thought my review could also gain itself a home&amp;nbsp;here:&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve got a bunch of &lt;span class="caps"&gt;USB&lt;/span&gt; cables for charging things; my flat is littered with them. Some came with phones, or Kindles, or speakers; most are the now-standard micro-&lt;span class="caps"&gt;USB&lt;/span&gt; although some are that stupid old-style mini-&lt;span class="caps"&gt;USB&lt;/span&gt; trapezium shaped thing which I keep around so half the crap in my laptop graveyard stays working. A couple are lightning cables for iphones. And most are a bit frayed or bent or have dodgy connections because they&amp;#8217;ve been run over by a chair or screwed up in my pocket or used to tie a damsel to the railroad tracks or whatever. one company, Fusechicken, believe they&amp;#8217;ve solved this problem and kindly sent us what they call Titan: the toughest cable on earth. Apparently, it&amp;#8217;s the last cable you&amp;#8217;ll ever need. Because it&amp;#8217;s wrapped in flexible steel. According to them, you can chainsaw this cable and it won&amp;#8217;t be harmed, so if you need to charge your phone while in Leatherhead&amp;#8217;s cellar, this is clearly the place to go. I&amp;#8217;ll say this: when they call it tough, they are not kidding. I have dropped it off a balcony and had it run over by a car and played a game of tug-of-war with it and it still doesn&amp;#8217;t have any problem charging. The box for &amp;#8220;undamageable cable&amp;#8221; is firmly ticked. It doesn&amp;#8217;t coil up very small because it is basically the same vibe as that huge flying snake thing from the end of the Avengers; you don&amp;#8217;t wanna keep this in your coat pocket, unless you also need a convenient way of hanging a car off the edge of a bridge while you&amp;#8217;re out in town. It comes in microusb and lightning flavours so it&amp;#8217;ll charge any phone or device you&amp;#8217;ve got lying around. The micro &lt;span class="caps"&gt;USB&lt;/span&gt; one is $25 and the lightning one is $35, which on the one hand is thirty times the price of a bog standard cable but on the other hand, forgoing three pints or a happy ending to your next massage to ensure you&amp;#8217;ll never have a frayed cable again sounds like a good idea to me. The Bad Voltage verdict: if your cables get frayed, get a Titan and they won&amp;#8217;t. Plus, it&amp;#8217;s nice and&amp;nbsp;shiny.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Tue, 29 Dec 2015 23:39:00 +0000</pubDate><guid>tag:www.kryogenix.org/days,2015-12-29:2015/12/29/titan-the-toughest-cable-ever/</guid></item><item><title>No UI is some UI</title><link>http://www.kryogenix.org/days/2015/11/19/no-ui-is-some-ui/</link><description>&lt;p&gt;Tony Aubé writes interestingly about how &lt;a href="https://medium.com/swlh/no-ui-is-the-new-ui-ab3f7ecec6b3#.u35jxjja3"&gt;No &lt;span class="caps"&gt;UI&lt;/span&gt; is the New &lt;span class="caps"&gt;UI&lt;/span&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;Out of all the possible forms of input, digital text is the most direct one. Text is constant, it doesn’t carry all the ambiguous information that other forms of communication do, such as voice or gestures. Furthermore, messaging makes for a better user experience than traditional apps because it feels natural and familiar. When messaging becomes the &lt;span class="caps"&gt;UI&lt;/span&gt;, you don’t need to deal with a constant stream of new interfaces all filled with different menus, buttons and labels. This explains the current rise in popularity of invisible and conversational apps, but the reason you should care about them goes beyond that.&lt;/blockquote&gt;

&lt;p&gt;He’s talking here about “invisible apps”: Magic and Operator and to some extent Google Now and Siri; apps that aren’t on a screen. Voice or messaging or text control. And he’s wholly right. Point and click has benefits — it’s a lot easier to find a thing you want to do, if you don’t know what it’s called — but it throws away all the nuance and skill of language and reduces us to cavemen jabbing a finger at a fire and grunting. We’ve spent thousands of years refining words as a way to do things; they are good at communicating intent&lt;sup id="sf-no-ui-is-some-ui-1-back"&gt;&lt;a title="and I leave completely aside here that French is not English is not Kiswahili, although this is indeed a problem for communication too" href="#sf-no-ui-is-some-ui-1" class="simple-footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;. On balance, they’re better than pictures, although obviously some sort of harmony of the two is better still. Ikea do a reasonable job of providing build instructions for Billy bookcases without using any words at all, but I don’t think I’d like to see their drawings of what “honour” is, or how to run a conference.&lt;/p&gt;
&lt;p&gt;The problem is that, until very recently, and honestly pretty much still, a computer can’t understand the nuance of language. So “use language to control computers” meant “learn the computer’s language”, not “the computer learns yours”. Echo, Cortana, Siri, Google Now, Mycroft are all steps in a direction of improving that; Soli is a step in a different direction, but still a valuable one. But we’re still at the stage of “understand the computer’s language”, although the computer’s language has got better. I can happily ask Google Now “what’s this song?”, or “what am I listening to?”, but if I ask it “who sang this?” then my result is a search rather than music identification. Interactive fiction went from “&lt;span class="caps"&gt;OPEN&lt;/span&gt; &lt;span class="caps"&gt;DOOR&lt;/span&gt;” to being able to understand a bewildering variety of more complex statements, but you still have to speak in “textadventurese”: “push over the large jewelled idol” is fine, but “gently push it over” generally isn’t. And tellingly &lt;span class="caps"&gt;IF&lt;/span&gt; still tends to avoid conversations, replacing them with conversation &lt;em&gt;menus&lt;/em&gt; or “tell Eric about (topic)”.&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;User interface” doesn’t just mean “pixels on a screen”, though. “In a world where computer can see, listen, talk, understand and reply to you, what is the purpose of a user interface?”, asks Aubé. The computer seeing you, listening to you, talking to you, understanding you, and replying to you &lt;em&gt;is&lt;/em&gt; the user interface.&lt;/p&gt;
&lt;p&gt;In that list, currently:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;seeing you is hard and not very reliable (obvious example: Kinect)&lt;/li&gt;
&lt;li&gt;listening to you is either easy (if “listening” and “hearing” are the same thing) or very difficult (if “listening” implies active interest rather than just passively recording everything said around it)&lt;/li&gt;
&lt;li&gt;talking to you is easy, although (as with humans) working out what to say is not, and it’s still entirely obvious that a voice is a computer&lt;/li&gt;
&lt;li&gt;understanding you is laughably incomplete and is obviously the core of the problem, although explaining one’s ideas and being understood by people is also the core problem of civilisation and we haven’t cracked that one yet either&lt;/li&gt;
&lt;li&gt;replying to you requires listening to you, talking to you, &lt;em&gt;and&lt;/em&gt; understanding you. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Replying by having listened, talked, and understood works fine if you’re asking “what’s this song?” But “Should I eat this chocolate bar?” is a harder question to answer. The main reason it’s hard is because of an important thing that isn’t even on that list: knowing you. Which is not the same thing as “knowing a huge and rather invasive list of things about your preferences”, and is also not something a computer is good at. In fact, if a computer were to &lt;em&gt;actually&lt;/em&gt; know you then it wouldn’t collect the huge list of trivia about your preferences because it would know that you find it a little bit disquieting. If a friend of mine asks “should I eat this chocolate bar?”, what do I consider in my answer? Do I like that particular one myself? Do I know if they like it? Do lots of other people like it? Are they diabetic? Are they on a diet? Do they generally eat too much chocolate? Did they ask the question excitedly or resignedly? Have they had a bad day and need a pick-me-up? Do I care?&lt;/p&gt;
&lt;p&gt;That list of questions I might ask myself before replying starts off with things computers are good at knowing — did the experts rate Fry’s Turkish Delight on &lt;span class="caps"&gt;MSN&lt;/span&gt;? And ends up with things we’re still a million, million miles away from being able to analyse. Does the computer care? What does it even mean to ask that question? But we can do the first half, so we &lt;em&gt;do&lt;/em&gt; do it… and that leads inevitably to the disquieting database collection, the replacement of understanding with a weighted search over all knowledge. Like making a chess champion by just being able to analyse all possible games. Fun technical problem, certainly. Advancement in our understanding of chess? Not so much.&lt;/p&gt;
&lt;blockquote&gt;“When I was fifteen years old, I missed a period. I was terrified. Our family dog started treating me differently - supposedly, they can smell a pregnant woman. My mother was clueless. My boyfriend was worse than clueless. Anyway, my grandmother came to visit. And then she figured out the whole situation in, maybe, ten minutes, just by watching my face across the dinner table. I didn’t say more than ten words — ‘Pass the tortillas.’ I don’t know how my face conveyed that information, or what kind of internal wiring in my grandmother’s mind enabled her to accomplish this incredible feat. To condense fact from the vapor of nuance.”&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;That’s&lt;/em&gt; understanding, and thank you Neal Stephenson’s &lt;em&gt;Snow Crash&lt;/em&gt; for the definition. Hell, &lt;em&gt;we&lt;/em&gt; can’t do that, most of us, most of the time. Until we can… are apps controlled with words doomed to failure? I don’t know. I will say that point-and-grunt is not a very sophisticated way of communicating, but it may be all that technology can currently understand. Let’s hope Mycroft and Siri and Echo and Magic and Operator and Cortana and Google Now are the next step. Aulé’s right when he says this: “It will push us to leave our comfort zone and look at the bigger picture, bringing our focus on the design of the experience rather than the actual screen. And that is an exciting future for designers.” Exciting future for people generally, I think.&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-no-ui-is-some-ui-1"&gt;and I leave completely aside here that French is not English is not Kiswahili, although this is indeed a problem for communication too &lt;a href="#sf-no-ui-is-some-ui-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Thu, 19 Nov 2015 09:45:00 +0000</pubDate><guid>tag:www.kryogenix.org/days,2015-11-19:2015/11/19/no-ui-is-some-ui/</guid></item><item><title>The Blue Moods of Spain</title><link>http://www.kryogenix.org/days/2015/11/04/the-blue-moods-of-spain/</link><description>&lt;blockquote&gt;Walked away, released, from all my crimes &amp;mdash; Spain&lt;/blockquote&gt;

&lt;p&gt;I didn&amp;#8217;t really understand music until I went to university. Oh, I&amp;#8217;d listen to songs, and I&amp;#8217;d like them, but the idea that one might be wedded to a band, that music was something to fight over, to be a part of you; I&amp;#8217;d never had that. And then I had my viewpoint forcibly broadened by being thrown into a room with a bunch of people who knew more than me. Mike, who was obsessed with the Beatles. Nick, who was and remains technically the best guitarist I&amp;#8217;ve ever known. Andy, who I christened &amp;#8220;Indie Andy&amp;#8221; during that first year. Jody, the world&amp;#8217;s biggest and yet shortest fan of the Jesus and Mary Chain. I heard things I&amp;#8217;d never heard before; things I should have heard before and hadn&amp;#8217;t; things I&amp;#8217;d never have listened to had I not been&amp;nbsp;there.&lt;/p&gt;
&lt;p&gt;Honestly, if I had to pick the thing we listened to the most, I&amp;#8217;m not sure what it&amp;#8217;d be. But, given that this was the year we collectively discovered weed, there was a certain commonality, a certain &lt;em&gt;mise-en-scene&lt;/em&gt; in the albums going on. Van Morrison&amp;#8217;s &lt;em&gt;Astral Weeks&lt;/em&gt;. Portishead&amp;#8217;s &lt;em&gt;Dummy&lt;/em&gt;, still to this day the greatest album ever released by anyone ever in the entire history of the universe. &lt;em&gt;Exile on Main Street&lt;/em&gt;. &lt;em&gt;Five Leaves Left&lt;/em&gt;, and everything else Nick Drake ever did, most of it on vinyl because we were just that pretentious. And &lt;em&gt;The Blue Moods of Spain&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;There was a chap, who I shall leave nameless for various reasons, who would show up every time to a smoking session and flake out an hour in. He later revealed that this legendary lack of fortitude owed itself to him skinning and smoking two neat gear spliffs before ever showing up, a feat which to this day leaves me breathtakingly astounded. But the soundtrack to these sessions almost always involved Spain. &lt;em&gt;Spiritual&lt;/em&gt; stuck in my memory, not least for being covered by the late great Johnny Cash (in, honestly, a better version) on &lt;em&gt;Unchained&lt;/em&gt;, another album that got played a lot. (It wasn&amp;#8217;t the best song on the album, nor even the fourth best. But Cash having played a Spain song immediately lifted them further in my&amp;nbsp;estimation.)&lt;/p&gt;
&lt;p&gt;There are few songs I still play from those days. Every now and again I&amp;#8217;ll go on a little voyage of memory, of nostalgic playback remembering what it was like sitting there on C Curve and arguing long into the night and listen to the background music. But a few tracks stick in the memory and get played today, not because they were great then, but because they&amp;#8217;re great always, in spite of, because. &lt;em&gt;Untitled #1&lt;/em&gt; is one of them. If what you&amp;#8217;re looking for is something intricate, langorous, filled with the &lt;em&gt;fin de siecle&lt;/em&gt; because it was literally the &lt;em&gt;fin&lt;/em&gt; of the &lt;em&gt;siecle&lt;/em&gt;, then &lt;em&gt;The Blue Moods of Spain&lt;/em&gt; is that thing that you want. I used to wonder what their orange moods were like. Maybe that&amp;#8217;ll be what they do&amp;nbsp;next.&lt;/p&gt;
&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/QjYVUMz1Pgs" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Wed, 04 Nov 2015 00:26:00 +0000</pubDate><guid>tag:www.kryogenix.org/days,2015-11-04:2015/11/04/the-blue-moods-of-spain/</guid></item><item><title>The platform is just another library</title><link>http://www.kryogenix.org/days/2015/09/23/the-platform-is-just-another-library/</link><description>&lt;p&gt;I’ve been listening to &lt;a href="https://jakearchibald.com/"&gt;Jake&lt;/a&gt; and &lt;a href="https://aerotwist.com/"&gt;Paul&lt;/a&gt;‘s new &lt;a href="http://feeds.feedburner.com/Http203Podcast"&gt;&lt;span class="caps"&gt;HTTP203&lt;/span&gt; audio podcast&lt;/a&gt; &lt;sup id="sf-the-platform-is-just-another-library-1-back"&gt;&lt;a title="not the same as the videos! Loads more hot Paul and Jake action! nice one, chaps!" href="#sf-the-platform-is-just-another-library-1" class="simple-footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; and in the middle of it, a weird thing happened. They were talking about &lt;a href="http://momentjs.com/"&gt;moment.js&lt;/a&gt;, an excellent date parsing and formatting library for &lt;span class="caps"&gt;JS&lt;/span&gt;, and pointed out &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl"&gt;Intl&lt;/a&gt;, “the ECMAScript Internationalization &lt;span class="caps"&gt;API&lt;/span&gt;, which provides language sensitive string comparison, number formatting, and date and time formatting”. And that seems great. But there was a sort of air, an idea, that I picked up from them when listening with which I disagreed. Specifically, they seemed pretty keen on Intl because it’s part of the platform, rather than being a library. Now, I might be making this up, and they may be horrified that I misunderstood them, in which case I apologise. I may be accusing them of this unfairly because they work on a specific browser and therefore I see them as liking the platform more than they maybe should. But here’s the thing.&lt;/p&gt;
&lt;p&gt;The platform is just another library.&lt;/p&gt;
&lt;p&gt;That something’s available “in the platform”, for me, when developing, is no major benefit. I pretty much prefer “use this one library, which works everywhere”, to “use this platform &lt;span class="caps"&gt;API&lt;/span&gt;, which works some places, and polyfill it for other places”. I admit that I rather expect that the library I choose will itself use the underlying platform &lt;span class="caps"&gt;API&lt;/span&gt; if it’s available, and I prefer in general to use libraries which polyfill platform APIs rather than provide their own distinct APIs, but that something is available “in the platform” is no major benefit in my eyes. Sure, there are performance benefits to having the browser do it, and greater performance benefits in not having to load a library to do it (and I am by preference a &lt;a href="http://vanilla-js.com/"&gt;Vanilla &lt;span class="caps"&gt;JS&lt;/span&gt;&lt;/a&gt; coder) but in practice there are hardly any APIs that I’m learning about now which are actually available wherever I want them. “It works everywhere except on iPhones” is about the same as “it doesn’t work anywhere”. “It works in Chrome and others will catch up soon” is about the same as “it doesn’t work anywhere”. “It works everywhere except Internet Explorer” is… well, I’m impure and horrid, so sometimes I just give in and say “fine, no &lt;span class="caps"&gt;IE&lt;/span&gt; support” and feel guilty about it, but basically it feels about the same as “it doesn’t work anywhere”. Now, &lt;em&gt;obviously&lt;/em&gt; browsers need to build this stuff so that it’s everywhere, and some browser has to be first. But the idea that “this is available in a library, and that’s not great” but “&lt;em&gt;this&lt;/em&gt; is available in the &lt;em&gt;platform&lt;/em&gt; and is therefore better”… doesn’t actually seem to play out as better for me.&lt;/p&gt;
&lt;p&gt;Maybe I’m alone in this. Maybe I’m completely mischaracterising Jake and Paul and if so, sorry chaps, don’t burn my house down.&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-the-platform-is-just-another-library-1"&gt;not the same as the videos! Loads more hot Paul and Jake action! nice one, chaps! &lt;a href="#sf-the-platform-is-just-another-library-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Wed, 23 Sep 2015 00:39:00 +0100</pubDate><guid>tag:www.kryogenix.org/days,2015-09-23:2015/09/23/the-platform-is-just-another-library/</guid></item><item><title>Using the content hub on Ubuntu</title><link>http://www.kryogenix.org/days/2015/08/20/using-the-content-hub-on-ubuntu/</link><description>&lt;p&gt;On an Ubuntu phone, apps are&lt;sup id="sf-using-the-content-hub-on-ubuntu-1-back"&gt;&lt;a title="correctly" href="#sf-using-the-content-hub-on-ubuntu-1" class="simple-footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; isolated from one another; each app has its own little folder where &lt;em&gt;its&lt;/em&gt; files go, and no other app can intrude. This, obviously, requires some way to exchange files between apps, because frankly there are times when my epub ebook is in my file downloader app and I need it in my ebook reader app. And so on.&lt;/p&gt;
&lt;p&gt;To deal with this, Ubuntu provides the Content Hub: a way for an app to say “I need a photo” and all the other apps on your phone which have photos to say “I have photos! Ask me! Me!”.&lt;/p&gt;
&lt;p&gt;This is, at a high level, the right thing to do. If my app wants to use a picture of you as an avatar, it should not be able to snarf your whole photo gallery and do what it wants with it. More troubling yet, adding some new social network app should not give it access to your whole address book so that it can hassle your friends to join, or worse just snaffle that information and store it away on its own server for future reference. So when some new app needs a photo of you to be an avatar, it asks the content hub; you, the punter, choose an app to provide that photo, and then a photo from within that app, and our avatar demander gets that photo, and none of the pictures of your kids or your holiday or whatever you take photos of. This is, big picture&lt;sup id="sf-using-the-content-hub-on-ubuntu-2-back"&gt;&lt;a title="ha!" href="#sf-using-the-content-hub-on-ubuntu-2" class="simple-footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; a good idea.&lt;/p&gt;
&lt;p&gt;Sadly, the content hub is spectacularly under-documented, so actually &lt;em&gt;using&lt;/em&gt; it in your Ubuntu apps is jolly hard work. However, with an assist&lt;sup id="sf-using-the-content-hub-on-ubuntu-3-back"&gt;&lt;a title="a bit more than that, if I’m honest" href="#sf-using-the-content-hub-on-ubuntu-3" class="simple-footnote"&gt;3&lt;/a&gt;&lt;/sup&gt; from Michael Zanetti, I now understand how to offer files you have to others via the content hub. So I come to explain this to you.&lt;/p&gt;
&lt;p&gt;First, you need permission to access the content hub at all. So, in your &lt;code&gt;appname.apparmor&lt;/code&gt; file&lt;sup id="sf-using-the-content-hub-on-ubuntu-4-back"&gt;&lt;a title="or whatever you called it; hooks.$APPNAME.apparmor in manifest.json" href="#sf-using-the-content-hub-on-ubuntu-4" class="simple-footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;, add &lt;code&gt;content_exchange_source&lt;/code&gt;.&lt;sup id="sf-using-the-content-hub-on-ubuntu-5-back"&gt;&lt;a title="This is more confusing than it should be. If you’re using Ubuntu SDK as your editor, then clicking the big “+” button will load a list of possible apparmor permissions. Don’t double-click a permission; this will just show you what it means in code terms, rather irrelevantly. Instead, choose your permission (content_exchange_source in this case) and then say Add" href="#sf-using-the-content-hub-on-ubuntu-5" class="simple-footnote"&gt;5&lt;/a&gt;&lt;/sup&gt; This tells Ubuntu that you’re prepared to provide files for others (you are a “source” of data). You then need to, also in &lt;code&gt;manifest.json&lt;/code&gt;, configure what you’re allowed to do with the content hub; add a &lt;code&gt;hooks.content-hub&lt;/code&gt; key which names a file (&lt;code&gt;myappname.content-hub&lt;/code&gt; or whatever you prefer). That file that you just named needs to also be json, and looks something like &lt;code&gt;{"source": ["all"]}&lt;/code&gt;, which dictates which sorts of files you want to be a source &lt;em&gt;for&lt;/em&gt;.&lt;sup id="sf-using-the-content-hub-on-ubuntu-6-back"&gt;&lt;a title="you can also do `{“source”:[“pictures”]}. There may be other things you can write in there instead of “all” or “pictures”, but the documentation is surlily silent on such things." href="#sf-using-the-content-hub-on-ubuntu-6" class="simple-footnote"&gt;6&lt;/a&gt;&lt;/sup&gt; Once you’ve done all this, you’re allowed to use the content hub. So now we explore how.&lt;/p&gt;
&lt;p&gt;In your &lt;span class="caps"&gt;QML&lt;/span&gt; app, you need to add a &lt;code&gt;ContentPeerPicker&lt;/code&gt;. This is a normal &lt;span class="caps"&gt;QML&lt;/span&gt; Item; specifically, showing it to the user is &lt;em&gt;your&lt;/em&gt; responsibility. So you might want to drop it in a Dialog, or a Page, or you might just put it at top level with &lt;code&gt;visible:hidden&lt;/code&gt; and then show it when appropriate (such as when your user taps a file or image or whatever that they want to open in another app).&lt;/p&gt;
&lt;p&gt;Your &lt;code&gt;ContentPeerPicker&lt;/code&gt; should look, at minimum, like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ContentPeerPicker&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;handler:&lt;/span&gt; &lt;span class="n"&gt;ContentHandler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Destination&lt;/span&gt;
    &lt;span class="nl"&gt;contentType:&lt;/span&gt; &lt;span class="n"&gt;ContentType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;All&lt;/span&gt;
    &lt;span class="nl"&gt;onPeerSelected:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;transfer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;peer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;exportItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cm"&gt;/* whatever the URL of the file you want to share is */&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exportItem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;transfer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;transfer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ContentTransfer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Charged&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;cpp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;visible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nl"&gt;onCancelPressed:&lt;/span&gt; &lt;span class="n"&gt;cpp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;visible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The important parts here are &lt;code&gt;handler: ContentHandler.Destination&lt;/code&gt; (which means “I am a source for files which need to be opened in some other app”), and &lt;code&gt;contentType: ContentType.All&lt;/code&gt; (which means “I am a source for all types of file”).&lt;sup id="sf-using-the-content-hub-on-ubuntu-7-back"&gt;&lt;a title="You can see all the possible content types in the Ubuntu SDK ContentType documentation (https://developer.ubuntu.com/api/apps/qml/sdk-15.04/Ubuntu.Content.ContentType/), with misleading typos and all" href="#sf-using-the-content-hub-on-ubuntu-7" class="simple-footnote"&gt;7&lt;/a&gt;&lt;/sup&gt; After that&lt;sup id="sf-using-the-content-hub-on-ubuntu-8-back"&gt;&lt;a title="as mzanetti excellently described it" href="#sf-using-the-content-hub-on-ubuntu-8" class="simple-footnote"&gt;8&lt;/a&gt;&lt;/sup&gt; show it to the user somehow and connect to its &lt;code&gt;onPeerSelected&lt;/code&gt; method. When the user picks some other app to export to from this new Item, &lt;code&gt;onPeerSelected&lt;/code&gt; will be called; when the callback &lt;code&gt;onPeerSelected&lt;/code&gt; is called, the &lt;code&gt;peer&lt;/code&gt; property is valid. Get a transfer object to this peer: &lt;code&gt;var transfer = peer.request();&lt;/code&gt;, and then you need to fill in &lt;code&gt;transfer.items&lt;/code&gt;. This is a JavaScript list of &lt;code&gt;ContentItem&lt;/code&gt;s; specifically, define &lt;code&gt;ContentItem { id: exportItem }&lt;/code&gt; in your app, and then make a “list” of one item with &lt;code&gt;var items = new Array(); exportItem.url = PATH_TO_FILE_YOU_ARE_EXPORTING; items.push(exportItem); transfer.items = items;&lt;/code&gt;.&lt;sup id="sf-using-the-content-hub-on-ubuntu-9-back"&gt;&lt;a title="You can transfer more than one item, here." href="#sf-using-the-content-hub-on-ubuntu-9" class="simple-footnote"&gt;9&lt;/a&gt;&lt;/sup&gt; After that, set &lt;code&gt;transfer.state = ContentTransfer.Charged&lt;/code&gt; and your transfer begins; you can hide the &lt;code&gt;ContentPeerPicker&lt;/code&gt; by setting &lt;code&gt;cpp.visible=false&lt;/code&gt; at this point.&lt;/p&gt;
&lt;p&gt;And that’s how to export files over the Content Hub so that your app can make files available to others. There’s a second half of this (other apps export the files; your app wants to retrieve them, so let’s say they’re an app which needs a photo, and you’re an app with photos), which I’ll come to in a future blog post.&lt;/p&gt;
&lt;p&gt;As you can see from the large number of footnotes&lt;sup id="sf-using-the-content-hub-on-ubuntu-10-back"&gt;&lt;a title="not this one, though" href="#sf-using-the-content-hub-on-ubuntu-10" class="simple-footnote"&gt;10&lt;/a&gt;&lt;/sup&gt; there are a number of caveats with this whole process, in particular that a bunch of it isn’t documented. It will, I’m sure, over time, get better. Meanwhile, the above gives you the basics. Have fun.&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-using-the-content-hub-on-ubuntu-1"&gt;correctly &lt;a href="#sf-using-the-content-hub-on-ubuntu-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-using-the-content-hub-on-ubuntu-2"&gt;ha! &lt;a href="#sf-using-the-content-hub-on-ubuntu-2-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-using-the-content-hub-on-ubuntu-3"&gt;a bit more than that, if I’m honest &lt;a href="#sf-using-the-content-hub-on-ubuntu-3-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-using-the-content-hub-on-ubuntu-4"&gt;or whatever you called it; &lt;code&gt;hooks.$APPNAME.apparmor&lt;/code&gt; in &lt;code&gt;manifest.json&lt;/code&gt; &lt;a href="#sf-using-the-content-hub-on-ubuntu-4-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-using-the-content-hub-on-ubuntu-5"&gt;This is more confusing than it should be. If you’re using Ubuntu &lt;span class="caps"&gt;SDK&lt;/span&gt; as your editor, then clicking the big “+” button will load a list of possible apparmor permissions. Don’t double-click a permission; this will just show you what it means in code terms, rather irrelevantly. Instead, choose your permission (&lt;code&gt;content_exchange_source&lt;/code&gt; in this case) and then say Add &lt;a href="#sf-using-the-content-hub-on-ubuntu-5-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-using-the-content-hub-on-ubuntu-6"&gt;you can also do `{“source”:[“pictures”]}. There may be other things you can write in there instead of “all” or “pictures”, but the documentation is surlily silent on such things. &lt;a href="#sf-using-the-content-hub-on-ubuntu-6-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-using-the-content-hub-on-ubuntu-7"&gt;You can see all the possible content types in the Ubuntu &lt;span class="caps"&gt;SDK&lt;/span&gt; ContentType documentation (https://developer.ubuntu.com/api/apps/qml/sdk-15.04/Ubuntu.Content.ContentType/), with misleading typos and all &lt;a href="#sf-using-the-content-hub-on-ubuntu-7-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-using-the-content-hub-on-ubuntu-8"&gt;as mzanetti excellently described it &lt;a href="#sf-using-the-content-hub-on-ubuntu-8-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-using-the-content-hub-on-ubuntu-9"&gt;You can transfer more than one item, here. &lt;a href="#sf-using-the-content-hub-on-ubuntu-9-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-using-the-content-hub-on-ubuntu-10"&gt;not this one, though &lt;a href="#sf-using-the-content-hub-on-ubuntu-10-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Thu, 20 Aug 2015 02:19:00 +0100</pubDate><guid>tag:www.kryogenix.org/days,2015-08-20:2015/08/20/using-the-content-hub-on-ubuntu/</guid></item><item><title>Fooling the natives</title><link>http://www.kryogenix.org/days/2015/08/14/fooling-the-natives/</link><description>&lt;blockquote&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;It’s not death if you refuse it.” — &lt;em&gt;The 
Crow&lt;/em&gt;&lt;/blockquote&gt;

&lt;p&gt;Over the last two weeks I have, inadvertently, 
conducted a very enlightening experiment on myself. I don’t think 
it’s repeatable or replicable — like gods interfering with free 
will or The Truman Show, the experiment doesn’t work if you know 
you’re inside it — but it’s rather illustrative. &lt;/p&gt;
&lt;p&gt;I’m a Google+ user&lt;sup id="sf-fooling-the-natives-1-back"&gt;&lt;a title="until they shut it down, which I hope they don’t do" href="#sf-fooling-the-natives-1" class="simple-footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;. 
And the Android G+ app has been doing this annoying thing 
recently&lt;sup id="sf-fooling-the-natives-2-back"&gt;&lt;a title="since I switched phones from my old Nexus 4 with dodgy  wifi to the newer Nexus 4 which used to be my daughter’s" href="#sf-fooling-the-natives-2" class="simple-footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; where 
if I pull down to get new posts, sometimes it doesn’t work. Opening 
the side menu and closing it again always fixed it, so I put it down 
to some sort of bug in the G+ app and waited for it to be fixed. 
&lt;a href="https://plus.google.com/+StuartLangridge/posts/eZZxGkUj94L"&gt;Not very patiently.&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Other people reportedly didn’t have the problem, so I just put it 
down to weirdness and carried on. Well. I’ve just, this moment, 
realised why. When I first factory reset this phone and then started 
it up for the first time, I didn’t use the G+ app. I used the G+ 
website and bookmarked it to my home screen. And then, it seems, I 
forgot that I’d done it. &lt;/p&gt;
&lt;p&gt;The actual app doesn’t have the problem. &lt;/p&gt;
&lt;p&gt;This is interesting in two ways. &lt;/p&gt;
&lt;p&gt;The first and most obvious conclusion is that the web app isn’t quite as good as the native 
app. Obvious conclusion to draw, and also obviously correct; it had 
a bug that the native app didn’t, and one could reasonably make the 
case that it had that bug &lt;em&gt;because&lt;/em&gt; it’s a web app and not native. &lt;/p&gt;
&lt;p&gt;But. I used the thing constantly for a couple of weeks without 
realising it &lt;em&gt;was&lt;/em&gt; a web app. At no point other than this bug did it 
betray that it was anything other than the G+ app. Now I compare the 
two side by side, there are differences, but I didn’t notice them as 
being worse, or even different; I just used the app and it never 
occurred to me to question it. More importantly, at no point did the 
bug make me think that it was because I was using a web app, or 
question the nature of the app. Plenty of people will say that 
they’ve used web apps and found bugs and therefore web apps are bad. 
But I wonder how much that would get said if those people hadn’t 
&lt;em&gt;known&lt;/em&gt; they were using a web app? I just put it down to an app bug; 
it never occurred to me that it might be because it’s in JavaScript 
rather than Java, and at no other point and in no other way did the 
G+ web app give me cause to suspect or even question that it was 
anything other than the native app. &lt;/p&gt;
&lt;p&gt;Now, this is not always the 
case, by any stretch of the imagination. The Google team put a 
&lt;em&gt;lot&lt;/em&gt; of effort into their web stuff. Most “web apps” betray their 
true nature constantly. But this shows it’s basically &lt;em&gt;possible&lt;/em&gt;. If 
you don’t have the easy, lazy fallback of blaming any issues on a 
thing being of the web, then you don’t necessarily think of that as 
being a problem itself. &lt;/p&gt;
&lt;p&gt;This is encouraging.&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-fooling-the-natives-1"&gt;until they shut it down, which I hope they don’t do &lt;a href="#sf-fooling-the-natives-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-fooling-the-natives-2"&gt;since I switched phones from my old Nexus 4 with dodgy 
wifi to the newer Nexus 4 which used to be my daughter’s &lt;a href="#sf-fooling-the-natives-2-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Fri, 14 Aug 2015 23:33:00 +0100</pubDate><guid>tag:www.kryogenix.org/days,2015-08-14:2015/08/14/fooling-the-natives/</guid></item><item><title>Availability</title><link>http://www.kryogenix.org/days/2015/06/28/availability/</link><description>&lt;p&gt;Some very interesting discussions happened at &lt;a href="https://www.edgeconf.com/2015-london"&gt;Edgeconf 5&lt;/a&gt;, including a detailed breakout session on making your web apps work for everyone which was well run by &lt;a href="https://twitter.com/lyzadanger"&gt;Lyza Danger Gardner&lt;/a&gt;. We talked about performance, and how if your page contains &lt;span class="caps"&gt;HTML&lt;/span&gt; then your users see your interface sooner. About fallbacks, and how if you&amp;#8217;re on a train with a dodgy 3g connection the site should work and that&amp;#8217;s a competitive advantage for you, because your competitors&amp;#8217; sites probably don&amp;#8217;t. About isomorphic JavaScript and how the promise of it is that your Angular website won&amp;#8217;t have to wait until it&amp;#8217;s all downloaded before showing anything. About Opera Mini&amp;#8217;s 250 million users. It&amp;#8217;s about whether the stuff you build is available to the most people. About your reach, and you being able to reach more than the&amp;nbsp;others. &lt;/p&gt;
&lt;p&gt;In the past, we&amp;#8217;ve called this &amp;#8220;progressive enhancement&amp;#8221;, but people don&amp;#8217;t like that word. Because it sounds hard. It sounds like you&amp;#8217;re not allowed to use modern tools in case one user has &lt;span class="caps"&gt;IE4&lt;/span&gt;. Like you have to choose between slick design and theoretical users in&amp;nbsp;Burma. &lt;/p&gt;
&lt;p&gt;Much rhetorical use has been made of the &lt;a href="https://gds.blog.gov.uk/2013/10/21/how-many-people-are-missing-out-on-javascript-enhancement/"&gt;gov.&lt;span class="caps"&gt;UK&lt;/span&gt; team&amp;#8217;s results of people not getting the script on their pages&lt;/a&gt;. The important part of that result was that 0.9% of visits didn&amp;#8217;t run the client side scripting even though they should have done. It&amp;#8217;s not people with JavaScript turned off, it&amp;#8217;s people with browsers that for some reason didn&amp;#8217;t run it at all. Did you open a hundred web pages yesterday? I probably did. So for every hundred web pages opened by someone, one of them didn&amp;#8217;t work. Maybe they were in a tunnel and the 3g cut out. Maybe they were on hotel WiFi. Maybe the &lt;span class="caps"&gt;CDN&lt;/span&gt; went down for ten seconds. Maybe the assets server crashed. But, for whatever reason, some of your site didn&amp;#8217;t work. Did that make your site &lt;em&gt;unavailable&lt;/em&gt; to them? Not if it was written right, written to be&amp;nbsp;available. &lt;/p&gt;
&lt;p&gt;And &amp;#8220;written right&amp;#8221; does not mean that you have double the work to build a version of your WebGL photo editor that works in Lynx. If you do this by having isomorphic &lt;span class="caps"&gt;JS&lt;/span&gt;, so your node server provides &lt;span class="caps"&gt;HTML&lt;/span&gt; which makes your pages load before your &lt;span class="caps"&gt;2MB&lt;/span&gt; of bower &lt;span class="caps"&gt;JS&lt;/span&gt; arrives, that&amp;#8217;s fine. Because you&amp;#8217;re available to everybody; a Macbook user in a cafe, a finance director on her Windows desktop, a phone-using tween in a field with no coverage, and yes even Opera Mini users in&amp;nbsp;Burma.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s not about giving up your frameworks to cater for fictional example users with scripting disabled. It is true that &lt;a href="http://kryogenix.org/code/browser/everyonehasjs.html"&gt;not everyone has &lt;span class="caps"&gt;JS&lt;/span&gt;&lt;/a&gt; and that sometimes that&amp;#8217;s you, so let&amp;#8217;s work out how to do this without regressing to&amp;nbsp;1998.&lt;/p&gt;
&lt;p&gt;So I&amp;#8217;m not going to be talking about progressive enhancement any more. I&amp;#8217;m going to be talking about availability. About reach. About my web apps being for everyone even when the universe tries to get in the&amp;nbsp;way. &lt;/p&gt;
&lt;p&gt;(Also, more on &lt;a href="http://www.kryogenix.org/code/browser/why-availability/"&gt;why availability matters&lt;/a&gt;, with smiling&amp;nbsp;diagrams!)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Sun, 28 Jun 2015 15:20:00 +0100</pubDate><guid>tag:www.kryogenix.org/days,2015-06-28:2015/06/28/availability/</guid></item></channel></rss>