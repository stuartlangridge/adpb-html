<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>as days pass by</title><link>http://www.kryogenix.org/days/</link><description>scratched tallies on the prison wall</description><atom:link href="http://www.kryogenix.org/days/feed" rel="self"></atom:link><lastBuildDate>Mon, 06 Apr 2015 14:03:00 +0100</lastBuildDate><item><title>A music thing for my parents</title><link>http://www.kryogenix.org/days/2015/04/06/a-music-thing-for-my-parents/</link><description>&lt;p&gt;A while back my parents said: we’ve got a telly in the dining room now. Could we play music through it so we can put songs on while we’re doing things around the house?&lt;/p&gt;
&lt;p&gt;Sure, I said.&lt;/p&gt;
&lt;h2&gt;Dad Music &lt;span class="caps"&gt;TV&lt;/span&gt;&lt;/h2&gt;
&lt;p style="text-align: center"&gt;&lt;img alt="For parents everywhere" src="http://www.kryogenix.org/images/dadmusictv-startup.png" style="max-width:100%"&gt;&lt;/p&gt;

&lt;p&gt;So, we have a set of constraints. We need to find or build a thing which can play music through a telly, and which they can put new music on without my help. I’m sure there are devices out there which can do this, but I thought it might be fun to build something. And I set the biggest constraint of all on the device, which is this: it is not connected to the network. Wifi is annoying to configure, and on the Raspberry Pi it basically requires a powered hub.&lt;sup id="sf-a-music-thing-for-my-parents-1-back"&gt;&lt;a title="you will say, no it doesn’t. and I will not believe you. and I’ve tried. A wifi dongle plugged into a powered hub which is then plugged into the Pi works always. A dongle plugged directly into the Pi works sometimes. At best. No network." href="#sf-a-music-thing-for-my-parents-1" class="simple-footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; No ethernet network connection while it’s running. Non-negotiable requirement.&lt;/p&gt;
&lt;p&gt;Therefore, there are two complexities here: how do you get music onto this thing? And how do you control it?&lt;/p&gt;
&lt;p&gt;My thought was: we’ll base this on a Raspberry Pi, because they’re nice and standard and you can buy nice looking cases for them. That way, it needs only two wires: power, and &lt;span class="caps"&gt;HDMI&lt;/span&gt; into the telly, and that’s it. How you put music on it is: you unplug it, put the &lt;span class="caps"&gt;SD&lt;/span&gt; card into a computer, copy music onto the &lt;span class="caps"&gt;SD&lt;/span&gt; card, then put the card back in the Pi and turn it on. Ta daaah; easy.&lt;sup id="sf-a-music-thing-for-my-parents-2-back"&gt;&lt;a title="actually, that’s probably easier than faffing about copying it over the network, to be honest; no passwords, no hassle, no dodgy wifi" href="#sf-a-music-thing-for-my-parents-2" class="simple-footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; This requires something on the Pi which knows how to play music, and knows how to look at a folder of mp3s and index them. Sounds like a job for &lt;a href="http://www.musicpd.org/"&gt;mpd&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;And indeed that works. We create a folder named &lt;code&gt;MUSIC&lt;/code&gt; at the root of the Pi’s &lt;span class="caps"&gt;SD&lt;/span&gt; card&lt;sup id="sf-a-music-thing-for-my-parents-3-back"&gt;&lt;a title="it’s running Raspbian, obviously; there is now a build of proper Ubuntu (not snappy) for the Pi 2, but Raspbian is fine here and at this level Ubuntu and Debian are pretty much identical" href="#sf-a-music-thing-for-my-parents-3" class="simple-footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;, and stick &lt;a href="http://askubuntu.com/questions/143315/how-to-hide-files-and-folders-in-nautilus"&gt;a file named &lt;code&gt;.hidden&lt;/code&gt; in the root&lt;/a&gt; to ensure that only the &lt;code&gt;MUSIC&lt;/code&gt; folder shows up. Now, when my dad puts the &lt;span class="caps"&gt;SD&lt;/span&gt; card into his machine, it’ll pop up a file browser window which only shows the &lt;code&gt;MUSIC&lt;/code&gt; folder. Winner. Configure &lt;code&gt;mpd&lt;/code&gt; on the Pi to treat &lt;code&gt;/MUSIC&lt;/code&gt; as its music root directory, and that all works; whenever the Pi starts up, &lt;code&gt;mpd&lt;/code&gt; reindexes all the music in the folder, and you can’t add music without taking out the &lt;span class="caps"&gt;SD&lt;/span&gt; card which means that you have to restart the Pi. Now we can put music on the device and there’s a daemon which knows how to play it. Step 1: done.&lt;/p&gt;
&lt;p&gt;It should really show something on the screen while it’s playing, though, shouldn’t it? So, a trivial little Python script which (a) uses &lt;span class="caps"&gt;SDL&lt;/span&gt; to (b) display things on the framebuffer while (c) being an mpd client, so when mpd does anything, the screen display changes. This is pretty easy stuff, thanks to &lt;a href="https://learn.adafruit.com/pi-video-output-using-pygame/pointing-pygame-to-the-framebuffer"&gt;an Adafruit writeup about using the framebuffer on the Pi&lt;/a&gt;.&lt;/p&gt;
&lt;p style="text-align: center"&gt;&lt;img title="Santana. Yes." alt="The main screen" src="http://www.kryogenix.org/images/dadmusictv-running.png" style="max-width:100%"&gt;&lt;/p&gt;

&lt;p&gt;Now, how do we control it? It has no network. There is a thing named &lt;a href="http://en.wikipedia.org/wiki/HDMI#CEC"&gt;&lt;span class="caps"&gt;HDMI&lt;/span&gt;-&lt;span class="caps"&gt;CEC&lt;/span&gt;&lt;/a&gt; which allows a &lt;span class="caps"&gt;TV&lt;/span&gt; to pass commands down an &lt;span class="caps"&gt;HDMI&lt;/span&gt; cable to a connected device. This would be the obvious way to do it, and &lt;a href="http://www.instructables.com/id/Raspberry-Pi-Remote-For-Free/"&gt;the Pi supports it&lt;/a&gt;; just have the &lt;span class="caps"&gt;TV&lt;/span&gt;’s remote control buttons for left/right/up/down/whatever get sent to the Pi, which then reacts to them appropriately.&lt;/p&gt;
&lt;p&gt;Sadly, their telly doesn’t do &lt;span class="caps"&gt;CEC&lt;/span&gt;. So that’s that idea kiboshed. Shame; this would have been a good way to do it.&lt;/p&gt;
&lt;p&gt;So, next step. Bluetooth it is! For that, we need a bluetooth &lt;span class="caps"&gt;USB&lt;/span&gt; dongle for the Pi. I have two, but one of them I couldn’t get to work. The one that does work names itself in lsusb as &lt;code&gt;0a12:0001 Cambridge Silicon Radio, Ltd Bluetooth Dongle (HCI mode)&lt;/code&gt;. So now what we need is some way to control &lt;code&gt;mpd&lt;/code&gt; on the Pi over Bluetooth. Well… Bluetooth supports what it calls “&lt;span class="caps"&gt;RFCOMM&lt;/span&gt;” connections, which basically are a socket, like telnet, but which goes over Bluetooth. So what if we make a little “proxy” server which listens on a Bluetooth socket and connects to &lt;code&gt;mpd&lt;/code&gt;&lt;span class="quo"&gt;‘&lt;/span&gt;s socket &lt;span class="caps"&gt;API&lt;/span&gt;? So when someone connects over Bluetooth to it, they can act just like they’re connected to &lt;code&gt;mpd&lt;/code&gt; normally because they send an &lt;code&gt;mpd&lt;/code&gt; command to the Bluetooth socket, the little proxy sends it on to &lt;code&gt;mpd&lt;/code&gt;, &lt;code&gt;mpd&lt;/code&gt; responds, and the proxy sends the output back? That way, all you need is an &lt;code&gt;mpd&lt;/code&gt; client where you can switch out its “use a socket to connect” code with “use a Bluetooth socket to connect” code and Robert’s your mother’s brother. And indeed, that works; another relatively trivial bit of Python code to just open the two sockets and shuffle data between them.&lt;/p&gt;
&lt;p&gt;Now we need an mpd client which can connect over Bluetooth. Both my parents have Android phones, so that’s the obvious place to have the client. I don’t like Java, so taking an existing open source Android mpd client and altering it is sadly not on the cards. One way to do this would be something like Cordova/PhoneGap, but nobody seems to have written a Cordova mpd app which makes socket connections itself, sadly.&lt;sup id="sf-a-music-thing-for-my-parents-4-back"&gt;&lt;a title="there are a million billion mpd clients where the “client” running on the web is actually talking to a server which then in turn connects to mpd, but we can’t do that here because there’s nowhere to run the server, and making a webview use a bluetooth socket rather than a tcp socket sounds really low-level and difficult" href="#sf-a-music-thing-for-my-parents-4" class="simple-footnote"&gt;4&lt;/a&gt;&lt;/sup&gt; So, time to write a relatively noddy mpd client for Android. The ideal here is &lt;a href="http://kivy.org"&gt;Kivy&lt;/a&gt;; it’s Python, it does all the &lt;span class="caps"&gt;GUI&lt;/span&gt; stuff, and they have both &lt;a href="http://kivy.org/docs/guide/packaging-android.html"&gt;good documentation and the “buildozer” utility for packaging a Kivy app for Android&lt;/a&gt;. This also has the advantage that, because it’s in Python and I understand it, I can write the client with a switchable socket back-end, so on Android it uses Bluetooth, and on my desktop it uses an ordinary socket to connect over the network, so I can test the client in a nice convenient environment. I can also have the client connect to &lt;code&gt;mpd&lt;/code&gt; running on my actual computer, so I can use other mpd clients to confirm that it does what it’s trying to do, that the screen display thing changes when it’s supposed to, and so on: this makes testing really, really easy because I don’t have to push any of it to the Pi or the Android phone while I’m working on it or to test it out. Having a test environment like this makes life much nicer.&lt;/p&gt;
&lt;p style="text-align: center"&gt;&lt;img title="The Beastie Boys!" alt="The Android client" src="http://www.kryogenix.org/images/dadmusictv-client.png" style="max-width:100%"&gt;&lt;/p&gt;

&lt;p&gt;And, indeed, all of this works! It’s not quite finished yet, but all of this stuff hangs together. I’m quietly pleased with the amount of different stuff that had to come together for this project; Raspbian on a Raspberry Pi, mpd and its pretty-good &lt;span class="caps"&gt;API&lt;/span&gt;, creating Bluetooth server sockets with PyBluez on the Pi, proxying between two sockets, rendering a screen with &lt;span class="caps"&gt;SDL&lt;/span&gt; to the framebuffer, supervisord to ensure that all the server-side stuff gets run and keeps running and reports errors, building apps with Kivy, Android packaging for Kivy, using PyJnius from Python to use the underlying Android Java &lt;span class="caps"&gt;API&lt;/span&gt;, Bluetooth clients… I knew &lt;em&gt;about&lt;/em&gt; all of this stuff at a high level, but there’s something satisfying about pulling it all together into a working product. &lt;/p&gt;
&lt;p&gt;Code is at &lt;a href="https://github.com/stuartlangridge/dadmusictv"&gt;github.com/stuartlangridge/dadmusictv&lt;/a&gt; for both the Pi server and the Android client if you’re very keen to look at it. I’ve written down instructions, but they’re really for me as reference if I’m honest; setting this up yourself will require some jiggery-pokery, I don’t doubt. Nonetheless, this was a fun project to do. Easter hacking time 2015: 10 marks out of 10.&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-a-music-thing-for-my-parents-1"&gt;you will say, no it doesn’t. and I will not believe you. and I’ve tried. A wifi dongle plugged into a powered hub which is then plugged into the Pi works always. A dongle plugged directly into the Pi works sometimes. At best. No network. &lt;a href="#sf-a-music-thing-for-my-parents-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-a-music-thing-for-my-parents-2"&gt;actually, that’s probably easier than faffing about copying it over the network, to be honest; no passwords, no hassle, no dodgy wifi &lt;a href="#sf-a-music-thing-for-my-parents-2-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-a-music-thing-for-my-parents-3"&gt;it’s running Raspbian, obviously; there is now a build of proper Ubuntu (not snappy) for the Pi 2, but Raspbian is fine here and at this level Ubuntu and Debian are pretty much identical &lt;a href="#sf-a-music-thing-for-my-parents-3-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-a-music-thing-for-my-parents-4"&gt;there are a million billion mpd clients where the “client” running on the web is actually talking to a server which then in turn connects to mpd, but we can’t do that here because there’s nowhere to run the server, and making a webview use a bluetooth socket rather than a tcp socket sounds really low-level and difficult &lt;a href="#sf-a-music-thing-for-my-parents-4-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Mon, 06 Apr 2015 14:03:00 +0100</pubDate><guid>tag:www.kryogenix.org/days,2015-04-06:2015/04/06/a-music-thing-for-my-parents/</guid></item><item><title>Send a URL to your Ubuntu phone with Caxton</title><link>http://www.kryogenix.org/days/2015/04/03/send-a-url-to-your-ubuntu-phone-with-caxton/</link><description>&lt;p&gt;I fairly often need to send a &lt;span class="caps"&gt;URL&lt;/span&gt; from my desktop to my phone; there has been a product called Chrome2phone (and Fox2phone) for Android for this for years, and there&amp;#8217;s Ansible for iPhones. But not for an Ubuntu phone. At least until&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://caxton.herokuapp.com"&gt;Caxton&lt;/a&gt; does precisely that; you install the Caxton app on your Ubuntu phone and add the Caxton extension to Chrome or Firefox and then you can just click the button to send the &lt;span class="caps"&gt;URL&lt;/span&gt; you&amp;#8217;re looking at in your desktop browser to your Ubuntu phone.&amp;nbsp;Hooray!&lt;/p&gt;
&lt;p&gt;&lt;img src="https://caxton.herokuapp.com/caxton-chrome-desktop.png" style="max-width: 80%; margin: auto"&gt;&lt;/p&gt;
&lt;h3&gt;but that&amp;#8217;s not&amp;nbsp;all&lt;/h3&gt;
&lt;p&gt;Caxton is quite a lot more general than that. You can use it to send any &lt;span class="caps"&gt;URL&lt;/span&gt; from anywhere to any app on your Ubuntu phone. For example, Caxton works with &lt;a href="http://ifttt.com"&gt;&lt;span class="caps"&gt;IFTTT&lt;/span&gt;&lt;/a&gt;. Do you want to get a notification on your phone when your package ships? Use &lt;span class="caps"&gt;IFTTT&lt;/span&gt; and make a recipe which gets alerts from your courier and sends a note to your phone. Need immediate alerts if your scripts fail? Add a line to your script which sends a message to the Caxton &lt;span class="caps"&gt;API&lt;/span&gt; on failure and you&amp;#8217;ll never miss an alert again. And you don&amp;#8217;t have to just send web URLs. If you&amp;#8217;re an app developer on Ubuntu and you want your users to be able to send things from other devices or computers to your app, then you can have your app register for a custom &lt;span class="caps"&gt;URL&lt;/span&gt; and then have your users install Caxton; Caxton then handles all the push notifications stuff for you and your users get all the benefits of instant push while saving you the need to run a&amp;nbsp;server.&lt;/p&gt;
&lt;h3&gt;cheers&lt;/h3&gt;
&lt;p&gt;I shall say thank you here to Alan Pope and Mike Sheldon for early testing, Marc Deslauriers for security and privacy advice, and Sam Hewitt for icon design. Speaking of privacy advice, Caxton is very careful to not explicitly store details of what you send through it, and it doesn&amp;#8217;t know who you are; it also doesn&amp;#8217;t keep a record of your&amp;nbsp;tokens.&lt;/p&gt;
&lt;h3&gt;so let me&amp;nbsp;know&lt;/h3&gt;
&lt;p&gt;If you find Caxton useful (or if you find it broken) do let me know on &lt;a href="http://twitter.com/sil"&gt;twitter&lt;/a&gt; or &lt;a href="http://kryogenix.org/+"&gt;google+&lt;/a&gt;; I&amp;#8217;d love to see people easily sending web pages over to their phone, and using the &lt;span class="caps"&gt;API&lt;/span&gt; to do cool things that I haven&amp;#8217;t thought&amp;nbsp;of!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Fri, 03 Apr 2015 18:33:00 +0100</pubDate><guid>tag:www.kryogenix.org/days,2015-04-03:2015/04/03/send-a-url-to-your-ubuntu-phone-with-caxton/</guid></item><item><title>Chrome improves Add To Home Screen. Sorta</title><link>http://www.kryogenix.org/days/2015/03/16/chrome-improves-add-to-home-screen-sorta/</link><description>&lt;p&gt;So, Chrome &lt;a href="http://updates.html5rocks.com/2015/03/increasing-engagement-with-app-install-banners-in-chrome-for-android"&gt;improve their add to home screen&lt;/a&gt; feature. Yay! Finally! This is great!&lt;/p&gt;
&lt;p&gt;Well. It’s &lt;em&gt;sorta&lt;/em&gt; great. &lt;/p&gt;
&lt;p&gt;There are two ways of viewing the point of “add to home screen”. The first is as a sort of super-powered bookmark. It’s a favourite which you can get at really easily, without having to open the browser and go fishing around in your bookmarks menu. The second way is that it’s essentially “install this app”, but for web apps rather than native apps. And nobody’s very sure what it’s supposed to mean.&lt;/p&gt;
&lt;p&gt;This causes tension. &lt;/p&gt;
&lt;p&gt;Native apps get to say “install our app” without providing a link, a &lt;span class="caps"&gt;QR&lt;/span&gt; code, whatever: people &lt;em&gt;know&lt;/em&gt; how to do that. You can write it on posters or &lt;span class="caps"&gt;TV&lt;/span&gt; adverts: “StuartApp is the greatest new thing! Install from the App Store or Google Play”. And everyone knows what that means: open up the App Store or Google Play app and search for StuartApp, and touch Install. How do you install my web app? Well, the poster could say “install our web app: StuartApp.com”, and I think people would get that they type that into the browser. No problem there. But then installation is a problem, because it’s browser-specific and it’s a pain in the arse. It’s quite difficult to install a web app (by which I mean “bookmark it to the home screen”&lt;sup id="sf-chrome-improves-add-to-home-screen-sorta-1-back"&gt;&lt;a title="although Matteo Spinelli’s brilliant add to home screen iOS Safari library makes it easier" href="#sf-chrome-improves-add-to-home-screen-sorta-1" class="simple-footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;) in iOS Safari&lt;sup id="sf-chrome-improves-add-to-home-screen-sorta-2-back"&gt;&lt;a title="other iOS browsers can’t do it at all; it’s a secret Safari-only feature" href="#sf-chrome-improves-add-to-home-screen-sorta-2" class="simple-footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;, and it’s &lt;em&gt;really&lt;/em&gt; difficult in Android Chrome. what Chrome have done now supposedly makes it easier. If your web app is prepared to be installed (it’s got an icon, a manifest, and so forth), Chrome will offer your users the chance to install it when they use it. This is great. &lt;/p&gt;
&lt;p&gt;Well. It’s &lt;em&gt;sorta&lt;/em&gt; great.&lt;/p&gt;
&lt;p&gt;You see, the Chrome team don’t want to hassle users to install apps when they don’t want to. So the automatic “install this” prompt won’t appear until the second day you’re using that web app. This is good from the point of view of not hassling people, and not hassling people is important. But it is no improvement at all for people who want to deliver an app (which is what people have been conditioned to want) but do it on the web (which is the best way to do it, if you can). Before this release, I couldn’t say “install our app: StuartApp.com” (because doing so was too hard), and now I &lt;em&gt;still&lt;/em&gt; can’t say it, because you have to come back twice over two days. &lt;/p&gt;
&lt;p&gt;How popular would Clash of Clans be if you couldn’t install it until the second day you played it, I wonder?&lt;/p&gt;
&lt;p&gt;I get that there are constraints here. What the Chrome team are trying to avoid is having every site you visit say “install me as an app! Install me! &lt;span class="caps"&gt;DO&lt;/span&gt; &lt;span class="caps"&gt;IT&lt;/span&gt;! &lt;span class="caps"&gt;INSTAAAAAAAALL&lt;/span&gt;!” every time you go there, and they are wholly right with this concern. But from a practical perspective, “install my app” when I want to deliver it on the web is no better now than it was a month ago. Which is not forward progress. &lt;/p&gt;
&lt;p&gt;There are a couple of pernicious ideas here which should be nipped in the bud. The first is that I’ve seen it suggested that perhaps if you prove to be a &lt;em&gt;good&lt;/em&gt; app developer who doesn’t hassle people, maybe those restrictions will be relaxed. But who decides whether you’ve been bad or good? The Google Chrome team. I do not want them to be gatekeepers. I really don’t. The web is a better way at least partially &lt;em&gt;because&lt;/em&gt; we’re not praying that a big corporation will let us play in their sandbox. Bringing the iOS/Android approval model to the web defeats the point. If it’s possible to build a web app which provides a better-than-native install experience but only if Google permit it? Not useful. (And Apple are hardly going to implement that.)&lt;/p&gt;
&lt;p&gt;The second pernicious thing is people who believe that “bookmark to home screen” means “grant extra privileges”. Specifically, there’s a whole bunch of “aha! They added this to the home screen! That means they &lt;em&gt;trust&lt;/em&gt; it! So now we don’t have to do geolocation permission popups!” thinking. This is wrong thinking. Android, which demands all possible permissions up front, is the most eloquent demonstration imaginable of why this is a dreadful idea. And the sausage machine works in reverse here too: if you start with the idea that web apps on the home screen are privileged, then you will instinctively want to make adding to home screen be &lt;em&gt;hard&lt;/em&gt;, because it’s an implicit grant of privilege. And so someone who wants &lt;em&gt;discoverability&lt;/em&gt; and doesn’t care about free access to the address book gets screwed. &lt;/p&gt;
&lt;p&gt;Adding to home screen is not a declaration of trust. It’s a declaration of interest. I want this thing in my life more. I don’t want more of my life in it. &lt;/p&gt;
&lt;p&gt;Apple have this right: ask for permissions when you need them, not when the user first uses the app. &lt;/p&gt;
&lt;p&gt;So. It is, at least in theory, a good idea to change and incrementally improve the add-to-home-screen experience, and it’s great that the Chrome team are working on this. But I think that as an attempt to make the web install experience easier than the native one, which it really could be… this hasn’t made as much forward progress as we might hope. &lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-chrome-improves-add-to-home-screen-sorta-1"&gt;although Matteo Spinelli’s brilliant &lt;a href="http://cubiq.org/add-to-home-screen"&gt;add to home screen iOS Safari library&lt;/a&gt; makes it easier &lt;a href="#sf-chrome-improves-add-to-home-screen-sorta-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-chrome-improves-add-to-home-screen-sorta-2"&gt;other iOS browsers can’t do it at all; it’s a secret Safari-only feature &lt;a href="#sf-chrome-improves-add-to-home-screen-sorta-2-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Mon, 16 Mar 2015 22:38:00 +0000</pubDate><guid>tag:www.kryogenix.org/days,2015-03-16:2015/03/16/chrome-improves-add-to-home-screen-sorta/</guid></item><item><title>Bad Voltage Live 2015</title><link>http://www.kryogenix.org/days/2015/02/25/bad-voltage-live-2015/</link><description>&lt;p&gt;&lt;img src="http://kryogenix.org/images/IMG_5909.jpg" width="100%"&gt;&lt;/p&gt;
&lt;p&gt;This week we did the first &lt;a href="http://badvoltage.org"&gt;Bad Voltage&lt;/a&gt; live 
show, at the SCaLE conference in Los Angeles. It was the first time that
Bryan, Jono, Jeremy, and I had actually all been in the same place.
And it was a really good&amp;nbsp;laugh.&lt;/p&gt;
&lt;p&gt;We&amp;#8217;d been planning this for some time, as you can imagine. The show
normally has discussions about technical things, reviews, and amusing
things, and the live show had that in spades. It also had hundreds of
glowsticks, fifty rubber ducks, Bryan Lunduke dressed in a towel,
Jeremy giving us all insects to eat (which we all did, apart from Jono
who has still not eaten an insect because he is a little child),
a very very young child saying that Jono and I are bobbins,
a chap on a video calling Jono something &lt;em&gt;considerably&lt;/em&gt; more offensive
which we were forced to bleep out, a shower made from a tent,
shots of Fireball rum, some Creme Eggs, a trivia quiz run by Jorge
Castro, and competitions where audience members won a System76 Galago
UltraPro laptop, a PogoLinux server, and a BananaPi from Owncloud. And
lots of people liked&amp;nbsp;it. &lt;/p&gt;
&lt;p&gt;&lt;img src="http://www.badvoltage.org/wp-content/uploads/2015/02/IMG_5851-960x600.jpg" width="100%"&gt;&lt;/p&gt;
&lt;p&gt;I rather enjoyed the discussions. We had two. The first was about the
idea of having a &amp;#8220;developer mode&amp;#8221; for Linux desktops. This was actually
a result of an idea &lt;a href="https://plus.google.com/u/0/+SamHewitt/posts/AiMipv62yLg"&gt;posted to G+ by Sam Hewitt&lt;/a&gt;
where he&amp;nbsp;said&lt;/p&gt;
&lt;blockquote&gt;How controversial would a &amp;#8220;developer mode&amp;#8221; be for a Linux 
desktop environment? For instance it would hide things like the
terminal, debug tools, etc. from an application overview/menu/launcher.&lt;/blockquote&gt;

&lt;p&gt;﻿&lt;/p&gt;
&lt;p&gt;Now, I happen to think that this is a good idea. Bryan (and the SCaLE audience
generally) do not. I have some reservations, and you can read about those
on the G+ post and watch the discussion in the show video, but it&amp;#8217;s a
really interesting topic; it shows up how people think about their desktop,
what assumptions we make about it, and how the mainstream think perhaps
differently from some existing Ubuntu&amp;nbsp;users.&lt;/p&gt;
&lt;p&gt;We also discussed the recently-released Ubuntu phone. My detailed review
is still being written, but this was a good chance to talk about the
phone and whether it&amp;#8217;s brilliant or&amp;nbsp;bollocks.&lt;/p&gt;
&lt;p&gt;So, watch the show! It&amp;#8217;s available on YouTube at &lt;a href="https://www.youtube.com/watch?v=k02EeD0rXYo"&gt;https://www.youtube.com/watch?v=k02EeD0rXYo&lt;/a&gt;
and you should watch it; you&amp;#8217;ll like it. Tell us about what you thought
of the show on our forum at &lt;a href="http://community.badvoltage.org"&gt;community.badvoltage.org&lt;/a&gt;.
And next year, come to SCaLE. It&amp;#8217;s a really great conference, and I for one
would like to say a really big thank you to Ilan and Gareth, who were
super-duper helpful and then were prepared to dress up in clown outfits
for the show. Nice one, chaps. Couldn&amp;#8217;t have done it without&amp;nbsp;you.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;d also like to personally thank Melissa Sealy, who is the most helpful
member of hotel staff I have ever met. We were putting up &lt;a href="https://plus.google.com/u/0/+StuartLangridge/posts/EkSeRdNmiJU"&gt;posters that Jono designed&lt;/a&gt;
around the hotel and she showed up (she&amp;#8217;s some sort of all-powerful floor
manager or something) and we expected the Mother Of All Bollockings for
sticking the posters on the walls. And indeed, she said: don&amp;#8217;t stick
posters on my walls, you horrible reprobates. And then she said: but you
can stick them on boards and put the boards on easels, no problem. And then
found us eight easels. And then later on when we were sorting out the beer
for the live event she sorted everything out. &lt;em&gt;And&lt;/em&gt; she knew about the
secret after-hours party in one of the conference rooms and found it amusing.
Nice one, Melissa. Your bosses at the Hilton &lt;span class="caps"&gt;LAX&lt;/span&gt; ought to give you a pay 
rise or a big bunch of flowers or&amp;nbsp;something.&lt;/p&gt;
&lt;p&gt;Come to Bad Voltage Live when we do another one. And watch this one&amp;nbsp;here!&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/k02EeD0rXYo" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Wed, 25 Feb 2015 21:39:00 +0000</pubDate><guid>tag:www.kryogenix.org/days,2015-02-25:2015/02/25/bad-voltage-live-2015/</guid></item><item><title>Bad Voltage live show at SCALE 2015</title><link>http://www.kryogenix.org/days/2015/02/02/bad-voltage-live-show-at-scale-2015/</link><description>&lt;p&gt;We&amp;#8217;ve been talking about doing this for some time, and now it&amp;#8217;s nearly here. Yes. &lt;a href="http://www.badvoltage.org"&gt;Bad Voltage&lt;/a&gt;, the finest podcast in this or any other galaxy, the source of all the tech knowledge you&amp;#8217;ll ever need, and a certain amount of unjustified abuse of your humble correspondent (and &lt;em&gt;completely&lt;/em&gt; justified abuse of my co-presenters), is now hitting the real world. &lt;strong&gt;&lt;a href="http://www.badvoltage.org/live/"&gt;Live Voltage&lt;/a&gt; 2015&lt;/strong&gt;, a Bad Voltage show performed and recorded live on stage, is happening on Friday 20th February at &lt;a href="http://www.socallinuxexpo.org/scale/13x"&gt;&lt;span class="caps"&gt;SCALE&lt;/span&gt; 13x&lt;/a&gt; in Los&amp;nbsp;Angeles.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://farm6.staticflickr.com/5613/15470441550_2d9abc58b2_o.jpg" style="width: 100%" alt=""&gt;&lt;/p&gt;

&lt;p&gt;If you like the show you&amp;#8217;ll like Live Voltage. If you like Live Voltage you&amp;#8217;ll like &lt;span class="caps"&gt;SCALE&lt;/span&gt;. So, come to Los Angeles in a few weeks, take in the rest of &lt;span class="caps"&gt;SCALE&lt;/span&gt;, and see Bad Voltage live for the very first&amp;nbsp;time!&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re in the &lt;span class="caps"&gt;UK&lt;/span&gt; and you can&amp;#8217;t make it to Los Angeles, then Joe Borg is organising an event at The Wellington in Birmingham to watch the show on the live stream, on Saturday 21st February from 11am. The Welly is one of the best pubs in Birmingham and has a fantastic selection of real ales; people are travelling from around the country for the get-together. If you&amp;#8217;d like to go, check out &lt;a href="http://community.badvoltage.org/t/uk-live-voltage-mirror-birmingham-21-february-whos-in/9644/7"&gt;the thread on the Bad Voltage forum&lt;/a&gt; for details, and come along to meet Bad Voltageites, have a drink, and watch the&amp;nbsp;show!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Mon, 02 Feb 2015 12:32:00 +0000</pubDate><guid>tag:www.kryogenix.org/days,2015-02-02:2015/02/02/bad-voltage-live-show-at-scale-2015/</guid></item><item><title>Temporarily older than Benedict Cumberbatch for six months again, dammit</title><link>http://www.kryogenix.org/days/2015/01/30/temporarily-older-than-benedict-cumberbatch-for-six-months-again-dammit/</link><description>&lt;p&gt;Jesus Christ on a one-wheeled bicycle, I’m thirty-nine. &lt;/p&gt;
&lt;p&gt;Next year I’ll be forty. But that’s pretty cool. People congratulate you for that. Thirty-nine? My parents are thirty-nine.&lt;/p&gt;
&lt;p&gt;Well, no, obviously they aren’t. But they are in my head. &lt;/p&gt;
&lt;p&gt;Whining about age aside, this has been a fab year. &lt;a href="http://www.kryogenix.org/days/2014/01/30/but-these-posts-go-to-eleven/"&gt;I’ve&lt;/a&gt; &lt;a href="http://kryogenix.org/days/2013/01/30/thirty-seven-for-gods-sake-how-did-that-happen/"&gt;been&lt;/a&gt; &lt;a href="http://kryogenix.org/days/2012/01/30/a-year-goes-past/"&gt;writing&lt;/a&gt; &lt;a href="http://kryogenix.org/days/2011/01/31/brave-new-age/"&gt;these&lt;/a&gt; &lt;a href="http://kryogenix.org/days/2009/01/30/mini-hippo-returns/"&gt;little&lt;/a&gt; &lt;a href="http://kryogenix.org/days/2008/01/30/another-year-passes/"&gt;birthday&lt;/a&gt; &lt;a href="http://kryogenix.org/days/2007/01/30/my-week/"&gt;summaries&lt;/a&gt; &lt;a href="http://kryogenix.org/days/2006/01/30/turning-thirty/"&gt;for&lt;/a&gt; &lt;a href="http://kryogenix.org/days/2005/01/30/staring/"&gt;some&lt;/a&gt; &lt;a href="http://kryogenix.org/days/2004/01/31/birthdays/"&gt;time&lt;/a&gt; &lt;a href="http://kryogenix.org/days/2003/01/30/revolution/"&gt;now&lt;/a&gt;, and one of the things I like most about that is that not only have I been writing them but that I’ve reinvented the website they’ve been written &lt;em&gt;on&lt;/em&gt; about half a dozen times in that period and, you know what? Someone sitting at a crappy &lt;span class="caps"&gt;PC&lt;/span&gt; in St Aidan’s computer room in Durham, telnetted in to one of the servers, reading webpages with Lynx because that’s what we had in 1994…he&lt;sup id="sf-temporarily-older-than-benedict-cumberbatch-for-six-months-again-dammit-1-back"&gt;&lt;a title="it was a he, then. I hope it is better now" href="#sf-temporarily-older-than-benedict-cumberbatch-for-six-months-again-dammit-1" class="simple-footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; can read all those posts. Dave Winer, after he invented blogs and &lt;span class="caps"&gt;RSS&lt;/span&gt;, can read all those posts. We add things to the web, but the core rolls on, from &lt;span class="caps"&gt;TBL&lt;/span&gt; in the early nineties to my site today. Hooray. &lt;/p&gt;
&lt;p&gt;You might be thinking, who cares about yesterday’s software working today? Which I’m sure is baked into you if you’re a rich Mac user who upgrades all the time. I’m sure you have a bunch of reasons why it’s critical that you preach openness but &lt;em&gt;your&lt;/em&gt; laptop is different, or that people who only have &lt;span class="caps"&gt;IE9&lt;/span&gt; should be denied the web. Well, screw you. You are making things worse. Pack it in. &lt;/p&gt;
&lt;p&gt;All that out the way, this is gonna be a good year. Last year on the web was basically everyone realising that the web really should be able to provide an “app-like” experience to people who think that that’s important, and that it’s capable of doing whatever “native” apps do without having all their stupid restrictions. The trailblazers even started showing how. This year will be everyone else learning how from those trailblazers. Last year in Ubuntu was what the American football people call a “building” year, I think; getting a whole bunch of dominoes in play for a big push. This year (this month, in fact) the first Ubuntu phone comes out.&lt;sup id="sf-temporarily-older-than-benedict-cumberbatch-for-six-months-again-dammit-2-back"&gt;&lt;a title="There’s snappy too but I don’t use that sort of tool as much" href="#sf-temporarily-older-than-benedict-cumberbatch-for-six-months-again-dammit-2" class="simple-footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; Big times ahead. It’s going to be fun. The tech scene in Birmingham is really quite lively now, and that’ll keep growing too.&lt;/p&gt;
&lt;p&gt;And of course I’ll be thirty nine for all of it, which is apparently &lt;a href="http://newsroom.ucla.edu/releases/physical-decline-caused-by-slow-64365"&gt;when my brain works best&lt;/a&gt;. Bring it on. Birthdays rule, even if they start really early with a delightful phone call from your daughter. Will see her this evening, anyway.&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-temporarily-older-than-benedict-cumberbatch-for-six-months-again-dammit-1"&gt;it was a he, then. I hope it is better now &lt;a href="#sf-temporarily-older-than-benedict-cumberbatch-for-six-months-again-dammit-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-temporarily-older-than-benedict-cumberbatch-for-six-months-again-dammit-2"&gt;There’s snappy too but I don’t use that sort of tool as much &lt;a href="#sf-temporarily-older-than-benedict-cumberbatch-for-six-months-again-dammit-2-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Fri, 30 Jan 2015 10:40:00 +0000</pubDate><guid>tag:www.kryogenix.org/days,2015-01-30:2015/01/30/temporarily-older-than-benedict-cumberbatch-for-six-months-again-dammit/</guid></item><item><title>Keyhunter Birmingham</title><link>http://www.kryogenix.org/days/2015/01/26/keyhunter-birmingham/</link><description>&lt;p&gt;You know those little &lt;a href="http://gamejolt.com/search/?q=room+escape"&gt;&amp;#8220;escape the room&amp;#8221; Flash games&lt;/a&gt;? Where you have to click on things to search them, and get clues, and use the clues to find other clues and eventually the way out? They&amp;#8217;re a bit like My First Myst. And actually quite fun, at&amp;nbsp;times.&lt;/p&gt;
&lt;p&gt;Well&amp;#8230; in a startling reversal of the trend of taking real things and making electronic versions of them, there are now real-world games where you&amp;#8217;re locked in a room and have to solve clues to escape. I discovered, almost by accident, &lt;a href="http://escaperoomhub.com/"&gt;Escape Room Hub&lt;/a&gt; which lists a whole load of them all over the world, and was pleasantly surprised to learn that there&amp;#8217;s one in Birmingham. It&amp;#8217;s called &lt;a href="http://www.keyhunter.co.uk/"&gt;Keyhunter&lt;/a&gt;, and it&amp;#8217;s on Sherlock St (out past the Hippodrome). So we went on Friday&amp;nbsp;night.&lt;/p&gt;
&lt;p&gt;Basically, they lock you in a room, and you have to solve clues to escape. I&amp;#8217;m not going to talk in detail about the clues, firstly because they ask you not to and secondly because that&amp;#8217;d just ruin it for everybody. I will say this, though, as a warning. I originally booked their &amp;#8220;silver&amp;#8221; package, because I thought that the bronze one would be too easy. Then we had to reschedule for boring reasons, and so ended up doing the bronze one&amp;#8230; and we were spectacularly, hysterically rubbish. You are allowed to ask for two hints via a little walkie-talkie they give you, and we needed both and &lt;em&gt;still&lt;/em&gt; didn&amp;#8217;t finish it in the hour. So, be told: it is difficult. I suspect that having more people in your team (we were just two of us) would help quite a bit, so bear that in mind. But it was thoroughly good fun! We spend two hours in the pub afterwards redesigning it, I admit, but if you want a new thing to do, try Keyhunter. I recommend&amp;nbsp;it.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Mon, 26 Jan 2015 16:48:00 +0000</pubDate><guid>tag:www.kryogenix.org/days,2015-01-26:2015/01/26/keyhunter-birmingham/</guid></item><item><title>Live screencasting from Ubuntu phone</title><link>http://www.kryogenix.org/days/2015/01/21/live-screencasting-from-ubuntu-phone/</link><description>&lt;p&gt;After &lt;a href="http://www.kryogenix.org/days/2015/01/11/ubuntu-phone-screencasting-a-minor-tip/"&gt;the previous post&lt;/a&gt; which describes how to send screen video from the Ubuntu phone to a file on your desktop via &lt;code&gt;netcat&lt;/code&gt;, it occurred to me that it ought to be possible to just display your Ubuntu phone directly on your desktop&amp;#8217;s screen in a window&amp;#8230; and with basically the same trick, it&amp;nbsp;is.&lt;/p&gt;
&lt;p&gt;Connect to your Ubuntu phone with &lt;code&gt;ssh&lt;/code&gt;: if the phone is plugged in with a cable then opening the Ubuntu &lt;span class="caps"&gt;SDK&lt;/span&gt; &lt;span class="caps"&gt;IDE&lt;/span&gt;&amp;#8217;s Devices pane will let you do this, or there is a &lt;code&gt;phablet-shell&lt;/code&gt; command which does the same thing when plugged in with a cable, and once you&amp;#8217;ve done that once you can &lt;code&gt;ssh&lt;/code&gt; to the phone over the network with &lt;code&gt;ssh phablet@phone-ip-address&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In that &lt;code&gt;ssh&lt;/code&gt; session, run: &lt;code&gt;mirscreencast -m /var/run/mir_socket --stdout --cap-interval 4 -s 360 640 | nc desktop-machine-ip-address 1234&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In a separate terminal on your desktop machine, run: &lt;code&gt;nc -l -p 1234 | mplayer -demuxer rawvideo -rawvideo w=360:h=640:format=rgba -&lt;/code&gt;  (note the hyphen on the end of that command; it is&amp;nbsp;important!)&lt;/p&gt;
&lt;p&gt;and: you get your phone&amp;#8217;s screen, live, in a window on your desktop. Handy for screencasting at conferences or for hangout video demonstrations or&amp;nbsp;similar.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Wed, 21 Jan 2015 15:46:00 +0000</pubDate><guid>tag:www.kryogenix.org/days,2015-01-21:2015/01/21/live-screencasting-from-ubuntu-phone/</guid></item><item><title>Ubuntu phone screencasting, a minor tip</title><link>http://www.kryogenix.org/days/2015/01/11/ubuntu-phone-screencasting-a-minor-tip/</link><description>&lt;p&gt;An Ubuntu phone has a command-line utility called &lt;code&gt;mirscreencast&lt;/code&gt; which dumps screen frames to a file, meaning that in theory it&amp;#8217;s possible to record a video of your phone&amp;#8217;s screen. In practice, though, it doesn&amp;#8217;t work for video; the phone is that busy (a) grabbing frames and (b) writing them to the phone&amp;#8217;s storage that you can&amp;#8217;t actually &lt;em&gt;use&lt;/em&gt; it for jerkiness, and the resultant video includes about one frame in ten. I can&amp;#8217;t fix this, but I did come up with a way to make it at least a bit better &amp;#8212; instead of saving the video onto the phone&amp;#8217;s storage, send it over the network to a real&amp;nbsp;machine.&lt;/p&gt;
&lt;p&gt;On your computer: &lt;code&gt;nc -l -p 1234 &amp;gt; out&lt;/code&gt;, which uses netcat to listen to port 1234 and send everything that comes in there to a file named &lt;code&gt;out&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;On the phone: &lt;code&gt;mirscreencast -n 600 -m /var/run/mir_socket -s 360 640 --stdout | nc mycomputer 1234&lt;/code&gt;, which uses &lt;code&gt;mirscreencast&lt;/code&gt; to record frames (at a particular smaller size) and then send them with netcat to port 1234 on the computer. (You may need to put your computer&amp;#8217;s &lt;span class="caps"&gt;IP&lt;/span&gt; address instead of &lt;em&gt;mycomputer&lt;/em&gt;, especially since Ubuntu phone won&amp;#8217;t resolve &lt;em&gt;computername.local&lt;/em&gt;&amp;nbsp;names.)&lt;/p&gt;
&lt;p&gt;Then, once recording finishes, &lt;code&gt;mencoder -demuxer rawvideo -rawvideo fps=6:w=360:h=640:format=bgra -ovc x264 -o out.mp4 out&lt;/code&gt; makes a proper mp4. (Cheers &lt;a href="http://www.whizzy.org/2014/08/"&gt;Bill&lt;/a&gt; for the &lt;code&gt;mirscreencast&lt;/code&gt; info.)&lt;/p&gt;
&lt;p&gt;It still isn&amp;#8217;t great. But it&amp;#8217;s a bit&amp;nbsp;better.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;UPDATE&lt;/span&gt;&lt;/strong&gt;: using &lt;code&gt;mirscreencast&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s &lt;code&gt;-s&lt;/code&gt; option to shrink the size &lt;em&gt;and&lt;/em&gt; &lt;code&gt;--cap-interval&lt;/code&gt; option to only grab some frames seems to work even better. A command like &lt;code&gt;mirscreencast -n 60 -m /var/run/mir_socket --stdout --cap-interval 4 -s 384 640&lt;/code&gt; will record 1/4 of the frames (&lt;code&gt;--cap-interval 4&lt;/code&gt;), which is 15fps (rather than the screen&amp;#8217;s 60fps), and resize those frames to half their size (my Nexus 4 has a screen resolution of 768x1280, which halved is 384x640, and each frame is only a quarter of the size). Converting like so: &lt;code&gt;mencoder -demuxer rawvideo -rawvideo fps=15:w=384:h=640:format=rgba -ovc x264 -o out.mp4 out&lt;/code&gt; (note the &lt;code&gt;format=rgba&lt;/code&gt;, the &lt;code&gt;w&lt;/code&gt; and &lt;code&gt;h&lt;/code&gt; for screen size, and &lt;code&gt;fps=15&lt;/code&gt;) and you get pretty much perfectly smooth&amp;nbsp;video.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Sun, 11 Jan 2015 06:14:00 +0000</pubDate><guid>tag:www.kryogenix.org/days,2015-01-11:2015/01/11/ubuntu-phone-screencasting-a-minor-tip/</guid></item><item><title>Ubuntu Component Store, redux 2</title><link>http://www.kryogenix.org/days/2015/01/01/ubuntu-component-store-redux-2/</link><description>&lt;p&gt;A couple of months ago I came up with &lt;a href="http://www.kryogenix.org/days/2014/11/16/ubuntu-component-store-redux/"&gt;a proposal for how an Ubuntu Component Store could work&lt;/a&gt; to be a place where people could upload self-contained components for Ubuntu &lt;span class="caps"&gt;SDK&lt;/span&gt; apps, after a long discussion with nik90 about it all. However, it requires a server which maintains accounts and so on, and that&amp;#8217;s hassle. So, an alternative idea, which is a bit more limited but also quite a bit more doable, I&amp;nbsp;think.&lt;/p&gt;
&lt;p&gt;We still go with core, curated, and community components as in the above proposal, and this is only about community components. They are still called username/componentname as before. But now, they &lt;em&gt;must&lt;/em&gt; be hosted on&amp;nbsp;Launchpad.&lt;/p&gt;
&lt;p&gt;What you do, to build a component, is you push a branch to Launchpad. That branch must have the following things in&amp;nbsp;it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/ubuntu_component_store.json&lt;/code&gt; - a &lt;span class="caps"&gt;JSON&lt;/span&gt; manifest describing your component. More on this&amp;nbsp;later.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/ubuntu_component_store&lt;/code&gt; - a folder in which all the bits of your component&amp;nbsp;live&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/ubuntu_component_store/bin/arm-linux-gnueabihf/$COMPONENTNAME.o&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/ubuntu_component_store/bin/i386-linux-gnu/$COMPONENTNAME.o&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/ubuntu_component_store/bin/x86_64-linux-gnu/$COMPONENTNAME.o&lt;/code&gt; - any compiled parts of your component go in &lt;code&gt;bin/$arch/&lt;/code&gt; as binary compiled&amp;nbsp;files&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/ubuntu_component_store/qml/$WHATEVER.qml&lt;/code&gt; - any &lt;span class="caps"&gt;QML&lt;/span&gt; files for your component (and any external files that they depend on, such as images) go in &lt;code&gt;qml/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Obviously if your component is only a binary &lt;span class="caps"&gt;QML&lt;/span&gt; plugin then it won&amp;#8217;t have a &lt;code&gt;qml&lt;/code&gt; folder, and if it&amp;#8217;s pure &lt;span class="caps"&gt;QML&lt;/span&gt; then it won&amp;#8217;t have a &lt;code&gt;bin&lt;/code&gt; folder. Note that &lt;code&gt;bin&lt;/code&gt; contains &lt;em&gt;compiled&lt;/em&gt; plugins, not source. You should have a way of letting people get the source for your component, especially if they want to change it or improve it, but that&amp;#8217;s not what this is about: &lt;code&gt;ucs install&lt;/code&gt; gets a working binary thing. It does not get the source so that you compile it yourself, because it&amp;#8217;s aimed at people who don&amp;#8217;t want to do compilation at all. (In particular, a pure &lt;span class="caps"&gt;QML&lt;/span&gt; project won&amp;#8217;t have any of the cmake stuff even set up, and it should not have to&amp;nbsp;have.)&lt;/p&gt;
&lt;p&gt;The binary arch stuff is designed to fit in with &lt;a href="http://www.theorangenotebook.com/2014/12/creating-mutli-arch-click-packages.html"&gt;fat packages&lt;/a&gt;&amp;nbsp;properly.&lt;/p&gt;
&lt;p&gt;You then submit the component to the server, with &lt;code&gt;ucs submit lp:~username/project/branch&lt;/code&gt;, passing the &lt;span class="caps"&gt;LP&lt;/span&gt; &lt;span class="caps"&gt;URL&lt;/span&gt; for the branch you pushed. The server fetches &lt;code&gt;ubuntu_component_store.json&lt;/code&gt; from the root of that branch and parses it for metadata; it may also check that the branch looks validly like a component. The server then updates &lt;code&gt;community_components.json&lt;/code&gt;, which is a file listing all metadata for all the community components, and uploads it back to Launchpad. (It&amp;#8217;s a bit like a Debian Packages&amp;nbsp;file.)&lt;/p&gt;
&lt;p&gt;Then a developer decides to use your component, so they &lt;code&gt;ucs install name/yourcomponent&lt;/code&gt;. This fetches &lt;code&gt;community_components.json&lt;/code&gt; from Launchpad and gets the details of your component from it: in particular, it gets the &lt;span class="caps"&gt;LP&lt;/span&gt; branch &lt;span class="caps"&gt;URL&lt;/span&gt;. It then downloads the &lt;code&gt;ubuntu_component_store/bin&lt;/code&gt; and/or &lt;code&gt;ubuntu_component_store/qml&lt;/code&gt; folders from your &lt;span class="caps"&gt;LP&lt;/span&gt; branch and puts them somewhere appropriate in the current project folder so that they&amp;#8217;ll work and can be referenced from your&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ucs search &amp;amp;lt;something&amp;amp;gt;&lt;/code&gt; searches &lt;code&gt;community_components.json&lt;/code&gt; &lt;em&gt;locally&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;This different approach means that the server is stateless; when it receives a &lt;code&gt;ucs submit&lt;/code&gt; request, it updates the big metadata file with the new details, but the server is not part of the normal app developer process; it&amp;#8217;s only used by &lt;em&gt;component&lt;/em&gt; developers, and only for submissions. This makes the server much, much easier to&amp;nbsp;write.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sil</dc:creator><pubDate>Thu, 01 Jan 2015 22:02:00 +0000</pubDate><guid>tag:www.kryogenix.org/days,2015-01-01:2015/01/01/ubuntu-component-store-redux-2/</guid></item></channel></rss>