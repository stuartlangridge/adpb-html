<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>as days pass by - sil</title><link href="https://www.kryogenix.org/days/" rel="alternate"></link><link href="https://www.kryogenix.org/days/feeds/sil.atom.xml" rel="self"></link><id>https://www.kryogenix.org/days/</id><updated>2024-05-03T19:08:00+01:00</updated><subtitle>scratched tallies on the prison wall</subtitle><entry><title>The Pastry Box Project archaeology</title><link href="https://www.kryogenix.org/days/2024/05/03/the-pastry-box-project-archaeology/" rel="alternate"></link><published>2024-05-03T19:08:00+01:00</published><updated>2024-05-03T19:08:00+01:00</updated><author><name>sil</name></author><id>tag:www.kryogenix.org,2024-05-03:/days/2024/05/03/the-pastry-box-project-archaeology/</id><summary type="html">&lt;p&gt;Many years ago (2012!) I was invited to be part of "The Pastry Box Project", which described itself thus:&lt;/p&gt;
&lt;blockquote&gt;Each year, The Pastry Box Project gathers 30 people who are each influential in their field and asks them to share thoughts regarding what they do. Those thoughts are then published …&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Many years ago (2012!) I was invited to be part of "The Pastry Box Project", which described itself thus:&lt;/p&gt;
&lt;blockquote&gt;Each year, The Pastry Box Project gathers 30 people who are each influential in their field and asks them to share thoughts regarding what they do. Those thoughts are then published every day throughout the year at a rate of one per day, starting January 1st and ending December 31st.&lt;/blockquote&gt;

&lt;p&gt;It was interesting. Sadly, it's dropped off the web (as has its curator, Alex Duloz, as far as I can tell), but thankfully &lt;a href="https://archive.org"&gt;the Wayback Machine&lt;/a&gt; comes to the rescue once again.&lt;sup id="sf-the-pastry-box-project-archaeology-1-back"&gt;&lt;a href="#sf-the-pastry-box-project-archaeology-1" class="simple-footnote" title="Also, the writing is all archived at Github!"&gt;1&lt;/a&gt;&lt;/sup&gt; I was quietly proud of some of the things I wrote there (and I was recently asked for a reference to a thing I said which the questioner couldn't find, which is what made me realise that the site's not around any more), so I thought I'd republish the stuff I wrote there, here, for ease of finding. This was all written in 2012, and the world has moved on in a few ways since then, a dozen years ago at time of writing, but... I think I'd still stand by most of this stuff. The posts are &lt;a href="https://web.archive.org/web/20140709052954/https://the-pastry-box-project.net/baker/stuart-langridge"&gt;still at archive.org&lt;/a&gt; and you can get to and read other people's posts from there too, some of which are really good and worth your time. But here are mine, so I don't lose them again.&lt;/p&gt;
&lt;h2&gt;Tuesday, 18 December 2012&lt;/h2&gt;
&lt;p&gt;My daughter’s got a smartphone, because, well, everyone has. It has GPS on it, because, well, every one does. What this means is that she will never understand the concept of being lost.&lt;/p&gt;
&lt;p&gt;Think about that for a second. &lt;em&gt;She won’t ever even know what it &lt;strong&gt;means&lt;/strong&gt; to be lost.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Every argument I have in the pub now goes for about ten minutes before someone says, right, we’ve spent long enough arguing now, someone look up the correct answer on Wikipedia. My daughter won’t ever understand the concept of not having a bit of information available, of being confused about a matter of fact.&lt;/p&gt;
&lt;p&gt;A while back, it was decreed that telephone directories are not subject to copyright, that a list of phone numbers is “information alone without a minimum of original creativity” and therefore held no right of ownership.&lt;/p&gt;
&lt;p&gt;What instant access to information has provided us is a world where all the simple matters of fact are now yours; free for the asking. Putting data on the internet is not a skill; it is drudgery, a mechanical task for robots. Ask yourself: why do you buy technical books? It’s not for the information inside: there is no tech book anywhere which actually reveals something which isn’t on the web already. It’s about the voice; about the way it’s written; about how interesting it is. And that &lt;em&gt;is&lt;/em&gt; a skill. Matters of fact are not interesting — they’re useful, right enough, but not interesting. Making those facts available to everyone frees up authors, creators, makers to do authorial creative things. You don’t have to spend all your time collating stuff any more: now you can be Leonardo da Vinci all the time. Be beautiful. Appreciate the people who do things well, rather than just those who manage to do things at all. Prefer those people who make you laugh, or make you think, or make you throw your laptop out of a window with annoyance: who give you a strong reaction to their writing, or their speaking, or their work. Because information wanting to be free is what creates a world of creators. Next time someone wants to build a wall around their little garden, ask yourself: is what you’re paying for, with your time or your money or your personal information, something creative and wonderful? Or are they just mechanically collating information? I hope to spend 2013 enjoying the work of people who do something more than that.&lt;/p&gt;
&lt;h2&gt;Wednesday, 31 October 2012&lt;/h2&gt;
&lt;p&gt;Not everyone who works with technology loves technology. No, really, it’s true! Most of the people out there building stuff with web tech don’t attend conferences, don’t talk about WebGL in the pub, don’t write a blog with CSS3 “experiments” in it, don’t like what they do. It’s a job: come in at 9, go home at 5, don’t think about HTML outside those hours. Apparently 90% of the stuff in the universe is “dark matter”: undetectable, doesn’t interact with other matter, can’t be seen even with a really big telescope. Our “dark matter developers”, who aren’t part of the community, who barely even know that the community exists… how are we to help them? You can write all the &lt;em&gt;A List Apart&lt;/em&gt; articles you like but dark matter developers don’t read it. And so everyone’s intranet is horrid and Internet-Explorer-specific and so the IE team have to maintain backwards compatibility with that and that hurts the web. What can we do to reach this huge group of people? Everyone’s written a book about web technologies, and books help, but books are dying. We want to get the word out about all the amazing things that are now possible to everyone: do we know how? Do we even have to care? The theory is that this stuff will “trickle down”, but that doesn’t work for economics: I’m not sure it works for &lt;code&gt;@-moz-keyframes&lt;/code&gt; either. &lt;/p&gt;
&lt;h2&gt;Monday, 8 October 2012&lt;/h2&gt;
&lt;p&gt;The web moves really fast. How many times have you googled for a tutorial on or an example of something and found that the results, written six months or a year or two years ago, no longer work? The syntax has changed, or there’s a better way now, or it never worked right to begin with. You’ll hear people bemoaning this: trying to stop the web moving so quickly in order that knowledge about it doesn’t go out of date. But that ship’s sailed. This is the world we’ve built: it moves fast, and we have to just hat up and deal with it. So, how? How can we make sure that old and wrong advice doesn’t get found? It’s a difficult question, and I don’t think anyone’s seriously trying to answer it. We should try and think of a way. &lt;/p&gt;
&lt;h2&gt;Tuesday, 18 September 2012&lt;/h2&gt;
&lt;p&gt;Software isn’t always a solution to problems. If you’re a developer, everything generally looks like a nail: a nail which is solved by making a new bit of code. I’ve got half-finished mobile apps done for tracking my running with GPS, for telling me when to switch between running and walking, and… I’m still fat, because I’m writing software instead of &lt;em&gt;going running&lt;/em&gt;. One of the big ideas behind computers was to automate repetitive and boring tasks, certainly, which means that it should work like this: identify a thing that needs doing, do it for a while, think “hm, a computer could do this more easily”, write a bit of software to do it. However, there’s too much premature optimisation going on, so it actually looks like this: identify a thing that needs doing, think “hm, I’m sure a computer would be able to do this more easily”, write a bit of software to do it. See the difference? If the software never gets finished, then in the first approach the thing &lt;em&gt;still gets done&lt;/em&gt;. Don’t always reach for the keyboard: sometimes it’s better to reach for Post-It notes, or your running shoes. &lt;/p&gt;
&lt;h2&gt;Saturday, 18 August 2012&lt;/h2&gt;
&lt;p&gt;Changing the world is within your grasp.&lt;/p&gt;
&lt;p&gt;This is not necessarily a good thing.&lt;/p&gt;
&lt;p&gt;If you go around and talk to normal people, it becomes clear that, weirdly, they don’t ever imagine how to get ten million dollars. They don’t think about new ways to redesign a saucepan or the buttons in their car. They don’t contemplate why sending a parcel is slow and how it could be a slicker process. They don’t think about &lt;em&gt;ways to change the world&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I find it hard to talk to someone who doesn’t think like that.&lt;/p&gt;
&lt;p&gt;To an engineer, the world is a toy box full of sub-optimized and feature-poor toys, as Scott Adams once put it. To a designer, the world is full of bad design. And to both, it is not only possible but at a high level &lt;em&gt;obvious&lt;/em&gt; how to (a) fix it (b) for everyone (c) and make a few million out of doing so.&lt;/p&gt;
&lt;p&gt;At first, this seems a blessing: you can see how the world could be better! And make it happen!&lt;/p&gt;
&lt;p&gt;Then it’s a curse. Those normal people I mentioned? Short of winning the lottery or Great Uncle Brewster dying, there’s no possibility of becoming a multi-millionaire, and so they’re not thinking about it. Doors that have a handle on them but say “Push” are not a source of distress. Wrong kerning in signs is not like sandpaper on &lt;em&gt;their&lt;/em&gt; nerves.&lt;/p&gt;
&lt;p&gt;The curse of being able to change the world is… the frustration that you have so far failed to do so.&lt;/p&gt;
&lt;p&gt;Perhaps there is a Zen thing here. Some people have managed it. Maybe you have. So the world is better, and that’s a good thing all by itself, right? &lt;/p&gt;
&lt;h2&gt;Friday, 27 July 2012&lt;/h2&gt;
&lt;p&gt;The best systems are built by people who can accept that no-one will ever know how hard it was to do, and who therefore don’t seek validation by explaining to everyone how hard it was to do.&lt;/p&gt;
&lt;h2&gt;Tuesday, 12 June 2012&lt;/h2&gt;
&lt;p&gt;The most poisonous idea in the world is when you’re told that something which achieved success through lots of hard work actually got there just because it was excellent.&lt;/p&gt;
&lt;h2&gt;Friday, 18 May 2012&lt;/h2&gt;
&lt;p&gt;Ever notice how the things you slave over and work crushingly hard on get less attention, sometimes, than the amusing things you threw together in a couple of evenings?&lt;/p&gt;
&lt;p&gt;I can't decide whether this is a good thing or not.&lt;/p&gt;
&lt;h2&gt;Thursday, 5 April 2012&lt;/h2&gt;
&lt;p&gt;It's OK to not want to build websites for everybody and every browser. Making something which is super-dynamic in Chrome 18 and also works excellently in w3m is jolly hard work, and a lot of the time you might well be justified in thinking it's not worth it. If your site stats, or your belief, or your prediction of the market's direction, or your favourite pundit tell you that the best use of your time is to only support browsers with &lt;code&gt;querySelector&lt;/code&gt;, or only support browsers with JavaScript, or only support WebKit, or only support iOS Safari, then that's a reasonable decision to make; don't let anyone else tell you what your relationship with your users and customers and clients is, because you know better than them.&lt;/p&gt;
&lt;p&gt;Just don't confuse what you're doing with supporting "the web". State your assumptions up front. Own your decisions, and be prepared to back them up, for your project. If you're building something which doesn't work in IE6, that requires JavaScript, that requires mobile WebKit, that requires Opera Mobile, then you &lt;em&gt;are&lt;/em&gt; letting some people down. That's OK; you've decided to do that. But your view's no more valid than theirs, for a project you didn't build. Make your decisions, and state what the axioms you worked from were, and then everyone else can judge whether what you care about is what they care about. Just don't push your view as being what everyone else should do, and we'll all be fine.&lt;/p&gt;
&lt;h2&gt;Sunday, 18 March 2012&lt;/h2&gt;
&lt;p&gt;Publish and be damned, said the Duke of Wellington; these days, in between starting wars in France and being sick of everyone repeating the jokes about his name from Blackadder, he’d probably say that we should publish &lt;em&gt;or&lt;/em&gt; be damned. If you’re anything like me, you’ve got folders full of little experiments that you never got around to finishing or that didn’t pan out. Put ’em up somewhere. These things are useful.&lt;/p&gt;
&lt;p&gt;Twitter, autobiographies, collections of letters from authors, all these have shown us that the minutiae can be as fascinating as carefully curated and sieved and measured writings, and who knows what you’ll inspire the next person to do from the germ of one of your ideas?&lt;/p&gt;
&lt;h2&gt;Monday, 27 February 2012&lt;/h2&gt;
&lt;p&gt;There's a lot to think about when you're building something on the web. Is it accessible? How do I handle translations of the text? Is the design OK on a 320px-wide screen? On a 2320px-wide screen? Does it work in IE8? In Android 4.0? In Opera Mini? Have I minimized the number of HTTP requests my page requires? Is my JavaScript minified? Are my images responsive? Is Google Analytics hooked up properly? AdSense? Am I handling Unicode text properly? Avoiding CSRF? XSS? Have I encoded my videos correctly? Crushed my pngs? Made a print stylesheet?&lt;/p&gt;
&lt;p&gt;We've come a long way since:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;HEADER&amp;gt;
&amp;lt;TITLE&amp;gt;The World Wide Web project&amp;lt;/TITLE&amp;gt;
&amp;lt;NEXTID N="55"&amp;gt;
&amp;lt;/HEADER&amp;gt;
&amp;lt;BODY&amp;gt;
&amp;lt;H1&amp;gt;World Wide Web&amp;lt;/H1&amp;gt;The WorldWideWeb (W3) is a wide-area&amp;lt;A
NAME=0 HREF="WhatIs.html"&amp;gt;
hypermedia&amp;lt;/A&amp;gt; information retrieval
initiative aiming to give universal
access to a large universe of documents.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Look at &lt;a href="http://html5boilerplate.com/"&gt;http://html5boilerplate.com/&lt;/a&gt;—a base level page which helps you to cover some (nowhere near all) of the above list of things to care about (and the rest of the things you need to care about too, which are the other 90% of the list). A year in development, 900 sets of changes and evolutions from the initial version, seven separate files. That's not over-engineering; that's what you need to know to build things these days.&lt;/p&gt;
&lt;p&gt;The important point is: one of the skills in our game is knowing what you don't need to do right now but still leaving the door open for you to do it later. If you become the next Facebook then you will have to care about all these things; initially you may not. You don't have to build them all on day one: that &lt;em&gt;is&lt;/em&gt; over-engineering. But you, designer, developer, translator, evangelist, web person, do have to understand what they all mean. And you do have to be able to layer them on later without having to tear everything up and start again. Feel guilty that you're not addressing all this stuff in the first release if necessary, but you should feel a lot guiltier if you didn't think of some of it.&lt;/p&gt;
&lt;h2&gt;Wednesday, 18 January 2012&lt;/h2&gt;
&lt;p&gt;Don't be creative. Be a creat&lt;em&gt;or&lt;/em&gt;. No one ever looks back and wishes that they'd given the world less stuff.&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-the-pastry-box-project-archaeology-1"&gt;Also, the writing is all &lt;a href="https://github.com/the-pastry-box-project"&gt;archived at Github!&lt;/a&gt; &lt;a href="#sf-the-pastry-box-project-archaeology-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="General musings"></category></entry><entry><title>The Matrix has you, part 2</title><link href="https://www.kryogenix.org/days/2024/03/24/the-matrix-has-you-part-2/" rel="alternate"></link><published>2024-03-24T15:40:00+00:00</published><updated>2024-03-24T15:40:00+00:00</updated><author><name>sil</name></author><id>tag:www.kryogenix.org,2024-03-24:/days/2024/03/24/the-matrix-has-you-part-2/</id><summary type="html">&lt;p&gt;I've recently &lt;a href="https://mastodon.social/@sil/112144967827317228"&gt;switched back from vscode to Sublime Text&lt;/a&gt;, which means that after all the time I spent training my fingers to type "&lt;code&gt;code somefile.txt&lt;/code&gt;" instead of "&lt;code&gt;subl somefile.txt&lt;/code&gt;" I now need to undo all that conditioning and go back to &lt;code&gt;subl&lt;/code&gt; again. So I thought, hey, maybe …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've recently &lt;a href="https://mastodon.social/@sil/112144967827317228"&gt;switched back from vscode to Sublime Text&lt;/a&gt;, which means that after all the time I spent training my fingers to type "&lt;code&gt;code somefile.txt&lt;/code&gt;" instead of "&lt;code&gt;subl somefile.txt&lt;/code&gt;" I now need to undo all that conditioning and go back to &lt;code&gt;subl&lt;/code&gt; again. So I thought, hey, maybe I should dump a little shell script called &lt;code&gt;code&lt;/code&gt; in my &lt;code&gt;bin&lt;/code&gt; folder which admonished me in some amusing way, thus Pavlov-ing myself into learning to do it right.&lt;/p&gt;
&lt;p&gt;And then I thought, hey, what'd be cool is if I had that Matrix-esque "raining code" effect in the Terminal and then it was superimposed with a box saying "STOP TYPING code AND USE subl INSTEAD", like the "SYSTEM ERROR" message at the end of the first movie.&lt;/p&gt;
&lt;p&gt;And then I thought: someone's already done this, right? And they have; it is called &lt;a href="https://github.com/abishekvashok/cmatrix"&gt;&lt;code&gt;cmatrix&lt;/code&gt;&lt;/a&gt;. But I don't like cmatrix because it doesn't do the colours right; the text just sorta stops rather than fading away like the movie does, and it feels unreal and too sharp for me. Now, don't get me wrong, I understand why this is; terminals support a full proper range of colour these days, but writing a program which gets released to actual people and which can deal with the bewildering array of terminal settings out there is a miserable waste of everyone's time. But I'm not writing this for anyone else; it only has to work in &lt;em&gt;my&lt;/em&gt; terminal (in true &lt;a href="https://www.kryogenix.org/days/2007/03/18/works-on-my-machine/"&gt;works on my machine&lt;/a&gt; fashion). And this will give me a chance to noodle about with Python terminal libraries such as &lt;a href="https://pypi.org/project/blessed/"&gt;blessed&lt;/a&gt; to make something interesting. Hence, &lt;a href="https://kryogenix.org/random/matrix24.py"&gt;matrix24.py&lt;/a&gt;:&lt;/p&gt;
&lt;video style="max-width: 100%" controls src="https://kryogenix.org/random/matrix-24bit.mp4"&gt;&lt;/video&gt;

&lt;p&gt;It's a bodge all round, and it still doesn't look right, and &lt;a href="http://jessica.tech/"&gt;Jess&lt;/a&gt; pointed out that making something cool happen when I make a mistake is the opposite of conditioning, but I got to fiddle about with a new library for a bit, so that was fun. Can I do something productive now?&lt;/p&gt;
&lt;p&gt;(title from &lt;a href="https://www.kryogenix.org/days/2003/06/18/mtrx/"&gt;a classic post about the Matrix&lt;/a&gt; which still makes me laugh even after all these years, although it is very unfair to Keanu Reeves who is a cool bloke and should be emulated in his approach to life)&lt;/p&gt;</content><category term="General musings"></category></entry><entry><title>Somewhere between silver and tin</title><link href="https://www.kryogenix.org/days/2024/01/30/somewhere-between-silver-and-tin/" rel="alternate"></link><published>2024-01-30T21:50:00+00:00</published><updated>2024-01-30T21:50:00+00:00</updated><author><name>sil</name></author><id>tag:www.kryogenix.org,2024-01-30:/days/2024/01/30/somewhere-between-silver-and-tin/</id><summary type="html">&lt;p&gt;There’s a YouTube channel called 
&lt;a href="https://youtube.com/@Clickspring"&gt;Clickspring&lt;/a&gt;, 
run by an Australian bloke called Chris 
who is a machinist: a mechanical engineer 
with a lathe and a mill and all manner of 
little tools. I am not a machinist — at 
school I was fairly inept at what we 
called CDT, for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There’s a YouTube channel called 
&lt;a href="https://youtube.com/@Clickspring"&gt;Clickspring&lt;/a&gt;, 
run by an Australian bloke called Chris 
who is a machinist: a mechanical engineer 
with a lathe and a mill and all manner of 
little tools. I am not a machinist — at 
school I was fairly inept at what we 
called CDT, for Craft Design and 
Technology, and what Americans much more 
prosaically call “shop class”. My dad was, 
though, or an engineer at least. Although 
Chris builds clocks and beautiful brass 
mechanisms, and my dad built aeroplanes. 
Heavy engineering. All my engineering is 
software, which actual engineers don’t 
think is engineering at all, and most of 
the time I don’t either. &lt;/p&gt;
&lt;p&gt;You can 
romanticise it: claim that software 
development isn’t craft, it’s &lt;em&gt;art&lt;/em&gt;. And 
there is a measure of truth in this. It’s 
like writing, which is the other thing I 
spend a lot of time doing for money; 
that’s an art, too. &lt;/p&gt;
&lt;p&gt;If you’re doing it 
right, at least. &lt;/p&gt;
&lt;p&gt;Most of the writing 
that’s done, though, isn’t art. And most 
of the software development isn’t, either. 
Or most of the engineering. For every one 
person creating beauty in prose or code or 
steel, there are fifty just there doing 
the job with no emotional investment in 
what they’re doing at all. Honestly, 
that’s probably a good thing, and not a 
complaint. While I might like the 
theoretical idea of a world where 
everything is hand made by someone who 
cares, I don’t think that you should have 
to care in order to get paid. The people 
who are paying you don’t care, so you 
shouldn’t have to either. &lt;/p&gt;
&lt;p&gt;It’s nice if you 
can swing it so you get both, though. &lt;/p&gt;
&lt;p&gt;The 
problem is that it’s not possible to 
instruct someone to give a damn. You can’t 
regulate the UK government into giving a 
damn about people who fled a war to come 
here to find their dream of being a nurse, 
you can’t regulate Apple bosses into 
giving a damn about the open web, you 
can’t regulate CEOs into giving a damn 
about their employees or governments about 
their citizens or landlords about their 
tenants. That’s not what regulation is 
for; people who give a damn largely don’t 
need regulation because they want to do 
the right thing. They might need a little 
steering into knowing what the right thing 
is, but that’s not the same. &lt;/p&gt;
&lt;p&gt;No, 
regulation is there as a reluctant 
compromise: since you can’t make people 
care, the best you can do is in some rough 
and ready fashion make them behave in a 
similar way to the way they would if they 
did. Of course, this is why the most 
insidious kind of response is not an 
attempt to evade responsibility but an attack on 
the system of regulation itself. Call 
judges saboteurs or protesters criminals 
or insurgents patriots. And why the most 
heinous betrayal is one done in the name 
of the very thing you’re destroying. Claim 
to represent the will of the people while 
hurting those people. Claim to be 
defending the law while hiding violence 
and murder behind a badge. Claim privacy 
as a shield for surveillance or for 
exclusion. &lt;a href="https://www.kryogenix.org/days/2017/01/26/we-all-sorta-thought/"&gt;We all sorta 
thought&lt;/a&gt; 
that the system could protect us, that 
those with the power could be trusted to 
use it at least a little responsibly.  And 
the last year has been one more in a 
succession of years demonstrating just how 
wrong that is. This and no other is the 
root from which a tyrant springs; when he 
first appears he is a protector. &lt;/p&gt;
&lt;p&gt;The worst 
thing about it is that the urge to protect 
other people is not only real but the best 
thing about ourselves. When it’s actually 
real. Look after others, especially those 
who need it, and look after yourself, 
because you’re one of the people who needs 
it. &lt;/p&gt;
&lt;p&gt;Chris from Clickspring polishes things 
to a high shine using tin, which surprised 
me. I thought bringing out the beauty in 
something needed a soft cloth but no, it’s 
done with metal. Some things, like silver, 
are basically shiny with almost no effort; 
there’s a reason people have prized silver 
things since before we could even write 
down why, and it’s not just because you 
could find lumps of it lying around the 
place with no need to build a smelting 
furnace. Silver looks good, and makes you 
look good in turn. Tin is useful, and it 
helps polish other things to a high shine. &lt;/p&gt;
&lt;p&gt;Today’s my 48th 
&lt;a href="https://www.kryogenix.org/days/2023/01/30/ronin/"&gt;birthday&lt;/a&gt;. 
A highly composite number. The ways Torah 
wisdom is acquired. And somewhere between 
silver and tin. That sounds OK to me.&lt;/p&gt;</content><category term="General musings"></category></entry><entry><title>Making a Discord bot with PHP</title><link href="https://www.kryogenix.org/days/2024/01/14/making-a-discord-bot-with-php/" rel="alternate"></link><published>2024-01-14T21:57:00+00:00</published><updated>2024-01-14T21:57:00+00:00</updated><author><name>sil</name></author><id>tag:www.kryogenix.org,2024-01-14:/days/2024/01/14/making-a-discord-bot-with-php/</id><summary type="html">&lt;p&gt;Discord have changed the way bots work quite a few times. Recently, though, they built a system that lets you create and register "slash commands" -- commands that you can type into the Discord chat and which do things, like &lt;code&gt;/hello&lt;/code&gt; -- and which are powered by "webhooks". That is: when someone …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Discord have changed the way bots work quite a few times. Recently, though, they built a system that lets you create and register "slash commands" -- commands that you can type into the Discord chat and which do things, like &lt;code&gt;/hello&lt;/code&gt; -- and which are powered by "webhooks". That is: when someone uses your command, it sends an HTTP request to a URL of your choice, and your URL then responds, and that process powers what your users see in Discord. Importantly, this means that operating a Discord bot does not require a long-running server process. You don't need to host it somewhere where you worry about the bot process crashing, how you're going to recover from that, all that stuff. No daemon required. In fact, you can make a complete Discord bot in one single PHP file. You don't even need any PHP libraries. One file, which you upload to your completely-standard shared hosting webspace, the same way you might upload any other simple PHP thing. Here's some notes on how I did that.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://discord.com/developers/docs/getting-started"&gt;Discord documentation&lt;/a&gt; is pretty annoying and difficult to follow; all the stuff you need is in there, somewhere, but it's often hard to find where, and there's very little that explains &lt;em&gt;why&lt;/em&gt; a thing is the way it is. It's tough to grasp the "Zen" of how Discord &lt;em&gt;wants&lt;/em&gt; you to work with their stuff. But in essence, you'll need to create a Discord app: &lt;a href="https://discord.com/developers/docs/getting-started#step-1-creating-an-app"&gt;follow their instructions&lt;/a&gt; to do that. Then, we'll write our small PHP file, and upload it; finally, fill in the URL of that PHP file as the "interactive endpoint URL" in your newly-created app's general information page in the Discord developer admin. You can then add the bot to a server by visiting the URL from the "URL generator" for your app in the Discord dev admin.&lt;/p&gt;
&lt;p&gt;The PHP file will get sent blocks of JSON, which describe what a user is doing -- a command they've typed, parameters to that command, or whatever -- and respond with something which is shown to the user -- the text of a message which is your bot's reply, or a command to alter the text of a previous message, or add a clickable button to it, and the like. I won't go into detail about all the things you can do here (if that would be interesting, let me know and maybe I'll write a followup or two), but the basic structure of your bot needs to be that it &lt;strong&gt;authenticates&lt;/strong&gt; the incoming request from Discord, it &lt;strong&gt;interprets&lt;/strong&gt; that request, and it &lt;strong&gt;responds&lt;/strong&gt; to that request.&lt;/p&gt;
&lt;p&gt;Authentication first. When you create your app, you get a &lt;code&gt;client_public_key&lt;/code&gt; value, a big long string of hex digits that will look like &lt;code&gt;c78c32c3c7871369fa67&lt;/code&gt; or whatever. Your PHP file needs to know this value somehow. (How you do that is up to you; think of this like a MySQL username and password, and handle this the same way you do those.) Then, every request that comes in will have two important HTTP headers: &lt;code&gt;X-Signature-ED25519&lt;/code&gt; and &lt;code&gt;X-Signature-Timestamp&lt;/code&gt;. You use a combination of these (which provide a signature for the incoming request) and your public key to check whether the request is legitimate. There are PHP libraries to do this, but fortunately we don't need them; PHP has the relevant &lt;a href="https://www.php.net/manual/en/function.sodium-crypto-sign-verify-detached.php"&gt;signature verification&lt;/a&gt; stuff built in, these days. So, to read the content of the incoming post and verify the signature on it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="x"&gt;/* read the incoming request data */&lt;/span&gt;
&lt;span class="x"&gt;$postData = file_get_contents(&amp;#39;php://input&amp;#39;);&lt;/span&gt;
&lt;span class="x"&gt;/* get the signature and timestamp header values */&lt;/span&gt;
&lt;span class="x"&gt;$signature = isset($_SERVER[&amp;#39;HTTP_X_SIGNATURE_ED25519&amp;#39;]) ? &lt;/span&gt;
&lt;span class="x"&gt;    $_SERVER[&amp;#39;HTTP_X_SIGNATURE_ED25519&amp;#39;] : &amp;quot;&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;$timestamp = isset($_SERVER[&amp;#39;HTTP_X_SIGNATURE_TIMESTAMP&amp;#39;]) ? &lt;/span&gt;
&lt;span class="x"&gt;    $_SERVER[&amp;#39;HTTP_X_SIGNATURE_TIMESTAMP&amp;#39;] : &amp;quot;&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;/* check the signature */&lt;/span&gt;
&lt;span class="x"&gt;$sigok = sodium_crypto_sign_verify_detached(&lt;/span&gt;
&lt;span class="x"&gt;    hex2bin($signature), &lt;/span&gt;
&lt;span class="x"&gt;    $timestamp . $postData,&lt;/span&gt;
&lt;span class="x"&gt;    hex2bin($client_public_key));&lt;/span&gt;
&lt;span class="x"&gt;/* If signature is not OK, reject the request */&lt;/span&gt;
&lt;span class="x"&gt;if (!$sigok) {&lt;/span&gt;
&lt;span class="x"&gt;    http_response_code(401);&lt;/span&gt;
&lt;span class="x"&gt;    die();&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We need to correctly reject invalidly signed requests, because Discord will check that we do -- they will occasionally send test requests with bad signatures to confirm that you're doing the check. (They do this when you first add the URL to the Discord admin screens; if it won't let you save the settings, then it's because Discord thinks your URL returned the wrong thing. This is annoying, because you have no idea &lt;em&gt;why&lt;/em&gt; Discord didn't like it; best bet is to add lots of &lt;code&gt;error_log()&lt;/code&gt; logging of inputs and outputs to your PHP file and inspect the results carefully.)&lt;/p&gt;
&lt;p&gt;Next, interpret the incoming request and do things with it. The only thing we have to respond to here is a &lt;code&gt;ping&lt;/code&gt; message; Discord will send them as part of their irregular testing, and expects to get back a correctly-formatted &lt;code&gt;pong&lt;/code&gt; message.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="x"&gt;$data = json_decode($postData);&lt;/span&gt;
&lt;span class="x"&gt;if ($data-&amp;gt;type == 1) { // this is a ping message&lt;/span&gt;
&lt;span class="x"&gt;    echo json_encode(array(&amp;#39;type&amp;#39; =&amp;gt; 1)); // response: pong&lt;/span&gt;
&lt;span class="x"&gt;    die();&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The magic numbers there (1 for a &lt;code&gt;ping&lt;/code&gt;, 1 for a &lt;code&gt;pong&lt;/code&gt;) are both defined in the Discord docs (incoming values being the &lt;a href="https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-interaction-type"&gt;"Interaction Type" field&lt;/a&gt; and outgoing values the &lt;a href="https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-response-object-interaction-callback-type"&gt;"Interaction Callback Type"&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;After that, the world's approximately your oyster. You check the incoming &lt;code&gt;type&lt;/code&gt; field for the type of incoming thing this is -- a slash command, a button click in a message, whatever -- and respond appropriately. This is all stuff for future posts if there's interest, but the docs (in particular the &lt;a href="https://discord.com/developers/docs/interactions/receiving-and-responding"&gt;"receiving and responding&lt;/a&gt; and &lt;a href="https://discord.com/developers/docs/interactions/message-components"&gt;"message components"&lt;/a&gt; sections) have all the detail. For your bot to provide a slash command, you have to &lt;a href="https://discord.com/developers/docs/interactions/application-commands#registering-a-command"&gt;register it first&lt;/a&gt;, which is a faff; I wrote a little Python script to do that. You only have to do it once. The script looks approximately like this; you'll need your APP_ID and your BOT_TOKEN from the Discord dashboard.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="n"&gt;MY_COMMAND&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;doit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Do the thing&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;discord_endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;
    &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://discord.com/api/v10/applications/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;APP_ID&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/commands&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PUT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;discord_endpoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MY_COMMAND&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;Authorization&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Bot &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;BOT_TOKEN&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;User-Agent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mybotname (myboturl, 1.0.0)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once you've done that, you can use &lt;code&gt;/doit&lt;/code&gt; in a channel with your bot in, and your PHP bot URL will receive the incoming request for you to process.&lt;/p&gt;</content><category term="General musings"></category></entry><entry><title>A software Matter device that Alexa can talk to</title><link href="https://www.kryogenix.org/days/2023/10/05/a-software-matter-device-that-alexa-can-talk-to/" rel="alternate"></link><published>2023-10-05T09:44:00+01:00</published><updated>2023-10-05T09:44:00+01:00</updated><author><name>sil</name></author><id>tag:www.kryogenix.org,2023-10-05:/days/2023/10/05/a-software-matter-device-that-alexa-can-talk-to/</id><summary type="html">&lt;blockquote cite="https://en.wikipedia.org/wiki/Shaddap_You_Face?useskin=vector"&gt;What's-a matter you? Hey!&lt;br&gt;
Gotta no respect?&lt;br&gt;
What-a you t'ink you do, why you look-a so sad?&lt;br&gt;
It's-a not so bad, it's-a nice-a place
    &lt;footer&gt;&lt;cite&gt;Shaddap Your Face, Joe Dolce&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;(If you just want to know about how to make your own Matter device in software and don't want to read …&lt;/p&gt;</summary><content type="html">&lt;blockquote cite="https://en.wikipedia.org/wiki/Shaddap_You_Face?useskin=vector"&gt;What's-a matter you? Hey!&lt;br&gt;
Gotta no respect?&lt;br&gt;
What-a you t'ink you do, why you look-a so sad?&lt;br&gt;
It's-a not so bad, it's-a nice-a place
    &lt;footer&gt;&lt;cite&gt;Shaddap Your Face, Joe Dolce&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;(If you just want to know about how to make your own Matter device in software and don't want to read a whole story to get to that point, then first of all that's, I mean, that's &lt;em&gt;fine&lt;/em&gt;, it's not a problem, you go ahead, I'm not hurt at &lt;em&gt;all&lt;/em&gt;, definitely not, and secondly skip down to &lt;a href="#matterpart4"&gt;Part 4&lt;/a&gt; or check out the &lt;a href="https://github.com/stuartlangridge/simple-js-matter-device"&gt;Github repo&lt;/a&gt;. But, I mean, really? You're that busy? You might wanna find a way to chill out a bit. Have a cup of tea. Enjoy life. It's better, I promise.)&lt;/p&gt;
&lt;h1&gt;Part the first: the kingdom of the blind&lt;/h1&gt;
&lt;p&gt;I've got new window blinds in my flat. They're pretty cool; ivory and purple, we're all very pleased. They're from Hillarys, who don't get a link because although the actual blinds are great, their customer service is... less so, so I'm loath to recommend them. But one of the neat things about them is that they're electrically operated. There's a remote control; press the up or down button and they go up and down. Some people would be like a fascinated small child with this technology and spend half of the first day just pressing the buttons and giggling, but not me, no no.&lt;/p&gt;
&lt;p&gt;&lt;img alt="A white room interior with a window covered by a day-night blind in a deep purple. The blind is alternating horizontal strips of deep purple fabric with a light texture, and almost-transparent white muslin. The room interior looks like a show home, because it probably is; the image is taken from Hillarys' website rather than being of my flat" src="https://kryogenix.org/images/purple-blinds-hillarys.jpg"&gt;&lt;/p&gt;
&lt;p&gt;One of the questions I was asked when speccing them out was: do you want them to be controllable by Alexa? And I thought: well, yes, I would like that. Being able to command my blinds to open or close is one more step on the quest to be a James Bond villain. All I need after that is a monorail and a big picture on the wall which revolves to show my world domination map and I'm golden.&lt;/p&gt;
&lt;p&gt;But... I do not like or trust the IoT industry. I'm not entirely against the whole concept -- I mean, I &lt;em&gt;have&lt;/em&gt; an Amazon Echo, after all. It gets used for cooking timers, my shopping list, and music&lt;sup id="sf-a-software-matter-device-that-alexa-can-talk-to-1-back"&gt;&lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-1" class="simple-footnote" title="less so music than before, after the bloody shysters at Amazon decided to take away the free music playing from Amazon Prime and make people pay extra for it"&gt;1&lt;/a&gt;&lt;/sup&gt;, but it doesn't get used for IoT stuff because I don't have any. This is, basically, because the whole IoT industry is full of grifters and thieves and I do not trust them with my data or with still being around in two years. The whole idea that I speak to a thing in my flat, that thing routes my command up to some server run by an IoT vendor, and then the IoT vendor's server speaks to another thing in my flat to make it do work... this is a stupid plan. It's the vendor forcibly inserting themselves as a middle man for literally no reason other than to exploit me later. Because they'll get bored or bought in a few years and they'll shut down the servers, with a sorry-not-sorry email about how it's "no longer viable to support" a thing I paid for and therefore they're turning it into a brick, but I can buy a replacement for the low low cost of... anyway, I'm not doing it. No. I don't want some random vendor's server to punch a hole into my internal network, I don't want my stuff to stop working if they turn their servers off or they go down, and the whole concept is hugely irritating.&lt;/p&gt;
&lt;p&gt;&lt;img alt='A tweet from j_opdenakker reading "the S in IoT stands for Security' src="https://kryogenix.org/images/s-in-iot.png"&gt;&lt;/p&gt;
&lt;p&gt;(You might be thinking: why do you have an Echo at all, then? That's got all the same problems! And you're not wrong. But I trust Amazon to still be around for a while. Trusting them with my data is another thing, of course, but I'm already on board with that... although I entirely sympathise with people who choose to not do so either from distrust or from objections to their crappy employment or sales practices.)&lt;/p&gt;
&lt;p&gt;Anyway, I looked up these blinds and the Alexa integration they do comes via a company called &lt;a href="https://www.somfy.co.uk/products/electric-blinds"&gt;Somfy&lt;/a&gt;. Their APIs seem semi-reasonably documented and I've heard nothing specifically bad about them as a company... but I still don't like the idea. If I were &lt;a href="https://mjg59.dreamwidth.org/"&gt;Matthew Garrett&lt;/a&gt; then I would probably find joy in reverse-engineering whatever the protocol is and making it work for me, but I'm not as clever as he is&lt;sup id="sf-a-software-matter-device-that-alexa-can-talk-to-2-back"&gt;&lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-2" class="simple-footnote" title="I make up for it by being, like, twice his size, though"&gt;2&lt;/a&gt;&lt;/sup&gt;. And they'll get bored or bought: I'm not sure I trust them to keep their servers running for years and years. Maybe I'd be OK with a thing that required an internet connection to someone else's server and only let me fiddle with that to the extent that I am given &lt;em&gt;permission&lt;/em&gt; for&lt;sup id="sf-a-software-matter-device-that-alexa-can-talk-to-3-back"&gt;&lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-3" class="simple-footnote" title="honestly, this is the big issue. I react very badly to stuff where I ought to be able to do a thing and I'm not permitted to do so because they don't want me to or can't be bothered to implement it, and won't let me do it myself. This is one of the big things that makes me move away from iOS every few years"&gt;3&lt;/a&gt;&lt;/sup&gt;, if I'd only expect to keep that thing for a short time, but these are window blinds. How often do you change &lt;em&gt;your&lt;/em&gt; window blinds? I expect these will still be here in twenty years! Do I expect these servers to also be there that long? Hell no. So, I'm not doing that.&lt;/p&gt;
&lt;h1&gt;Part the second: keep government local&lt;/h1&gt;
&lt;p&gt;I do actually have one "IoT" device in my flat, though. It's a remotely-controllable wall socket. It's from a company called &lt;a href="https://www.mylocalbytes.com/"&gt;LocalBytes&lt;/a&gt;, and it's basically a "smart plug": it's a cylinder that plugs into a wall socket, and has another socket on the other side of it, rather like one of those mini gangplug cube things. &lt;/p&gt;
&lt;p&gt;&lt;img alt="A LocalBytes smart plug, as described, plugged into a wall socket" src="https://kryogenix.org/images/localbytes-smart-plug.jpg"&gt;&lt;/p&gt;
&lt;p&gt;It contains a little microcontroller and wifi chip, and it runs software called &lt;a href="https://tasmota.github.io/docs/"&gt;Tasmota&lt;/a&gt;. And it's entirely locally controlled; you get a Tasmota app (or talk the documented protocol yourself from code) which can send the plug a command to turn on and off (and also a bunch more complex stuff such as turning on at a specific time), and it involves no internet servers at all. I can't get screwed by you turning off your servers (or failing to secure them properly) if there aren't any&lt;sup id="sf-a-software-matter-device-that-alexa-can-talk-to-4-back"&gt;&lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-4" class="simple-footnote" title="insert picture here of that bloke tapping his temple knowingly"&gt;4&lt;/a&gt;&lt;/sup&gt;. Now, I would not recommend these Tasmota devices to a normal person; the app is unreliable and pretends it can't find the device some of the time, and the configuration API is obscure and weird. But I am, as has been said by kings and queens, not a normal person. I'm a computer bloke. So I am OK with this, and I'd be OK with something similar to control my blinds; something that runs locally and accepts commands from Alexa and then talks to the blinds to open and close them.&lt;/p&gt;
&lt;p&gt;Now, the bit that actually talks to the blinds, I haven't started working on yet. As far as I can tell from reading, the remote control works on a standard &lt;a href="https://en.wikipedia.org/wiki/LPD433"&gt;"smart home" frequency of 433MHz&lt;/a&gt;, and there are loads of little dongles and boards that plug into USB or Raspberry Pi GPIO pins which can talk that. I'll get to that eventually; once I have a working thing, making it talk 433MHz is step 2. Step 1 is to make something that I control and which Alexa can talk to, but which &lt;em&gt;doesn't&lt;/em&gt; require servers on the internet to make it work. This rules out writing a custom Alexa skill; I can do that, and have, but you can't write a skill which makes the actual Echo in my flat do network connections. The connection comes from Amazon's servers, which means I'd have to put my little device on the internet, which I don't want to do. The concern of the servers going away doesn't apply here -- if Amazon's servers go away, my Echo stops working anyway and all of this is moot -- but I do not want to punch a hole into my internal network from outside, and I shouldn't have to. This is one thing in my house talking to another thing in my house. &lt;/p&gt;
&lt;p&gt;This problem used to be unsolvable. And then, just like in the beginning of all things, someone invented &lt;a href="https://csa-iot.org/all-solutions/matter/"&gt;Matter&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Part the third: does it Matter?&lt;/h1&gt;
&lt;p&gt;It is, obviously, stupid that every device invents its own protocol to talk to it, and none of it's documented, and none of it's standardised, and everything gets reinvented from scratch by programmers who clearly have their minds on lunchtime. So, equally obviously, the way to solve this is to have all the biggest tech companies in the world collaboratively agree on a standard way to do things.&lt;/p&gt;
&lt;p&gt;I can hear you laughing from here.&lt;/p&gt;
&lt;p&gt;This has, equally equally obviously, resulted in a disastrous nine-way collision of corporate speak, absurd specifications, paywalls for things, requirements to sign up as a "partner" before you're told anything, and documentation by press release. But to my surprise it has actually resulted in something! The Matter specifications have basically everybody on board -- Amazon, Apple, Google, most of the big players in the device world -- and have finally started to actually appear in real shipping products rather than only in conference talks. The Amazon Echo supports Matter back to the 3rd gen Dot (there's a &lt;a href="https://www.amazon.co.uk/b?ie=UTF8&amp;amp;node=63710514031"&gt;list of Matter-supporting Echo devices here&lt;/a&gt;). If you've got a Matter-supporting thingy, then it'll have the Matter logo on it:&lt;/p&gt;
&lt;p&gt;&lt;img alt='The Matter logo: three arrows with curved heads all pointing into a single central point; it has threefold symmetry like the radiation symbol and similar things. It also has the word "matter" in a curvy slightly childish font' src="https://kryogenix.org/images/matter-logo.jpg"&gt;&lt;/p&gt;
&lt;p&gt;and then you can say "Alexa, discover devices" and your Echo will search and then say "I have found a Matter device!". You then use the Alexa app on your phone to pair it, either by scanning a QR code or typing in a code, both of which should be on the device itself.&lt;/p&gt;
&lt;p&gt;Now, Matter is a big corporate spec and wants to deal with all sorts of complicated and detailed edge cases. In particular, there is a standard problem with an IoT device in your house, which is that you can't talk to it until it's on the wifi, but you can't put it on the wifi without talking to it. This normally involves the device pretending to be a wifi access point, and you connecting to it with a mobile app you have to install&lt;sup id="sf-a-software-matter-device-that-alexa-can-talk-to-5-back"&gt;&lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-5" class="simple-footnote" title="you should not need a mobile app to connect to a device pretending to be an access point. You should be able to do this from the web browser on your phone. But you can't, as I have laboriously discussed before in these pages and am still annoyed about"&gt;5&lt;/a&gt;&lt;/sup&gt;, but Matter attempts to improve this; a Matter device can potentially exchange data over wifi, over Bluetooth, over some extra network thing called Thread that I don't understand, over ethernet, the works. A lot of the setup and spec for Matter involves dealing with all this.&lt;/p&gt;
&lt;p&gt;I, personally, for myself, for this device, do not care about this. If I were making a device that would be sold to real people, I'd implement all this stuff. But since it's just me, I'm OK with requiring that my window blind device is &lt;em&gt;already&lt;/em&gt; on my wifi, and getting it that way is my problem, &lt;em&gt;before&lt;/em&gt; I try detecting it with Alexa.&lt;/p&gt;
&lt;p&gt;So, I need a way to make a Matter device; it only has to deal with wifi. The Matter specification&lt;sup id="sf-a-software-matter-device-that-alexa-can-talk-to-6-back"&gt;&lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-6" class="simple-footnote" title='as usual with corporate technology things, the Matter specification is difficult to find; one of these things where you need to sign up, or be a "partner", or pay money, or something. But it is obtainable. The Alexa Matter docs link to a page on the Matter website which lets you fill in an email address and then emails you a link to a PDF of the spec in all its 895 page glory'&gt;6&lt;/a&gt;&lt;/sup&gt; describes how to talk Matter&lt;sup id="sf-a-software-matter-device-that-alexa-can-talk-to-7-back"&gt;&lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-7" class="simple-footnote" title="super reassuringly, Matter seems to use all standard protocols! device discovery is mdns! They even have example commands for avahi-publish-service to show you how to do it, right there in the spec!"&gt;7&lt;/a&gt;&lt;/sup&gt;, but there's a lot of detail in there. Surely someone has already implemented this stuff?&lt;/p&gt;
&lt;p&gt;Well, they have... but it's not great. The &lt;a href="https://github.com/project-chip/connectedhomeip"&gt;@project-chip/connectedhomeip&lt;/a&gt; Github repository, named back in the days when Matter was still called "project CHIP" before the Branding People got their hands on it, is the reference implementation. And it's a nightmare. It's all in C, it's &lt;em&gt;huge&lt;/em&gt; (I checked out the repo and all its submodules and ran out of disk space; to get the repo and all sub-repos and then build it, you'd better have 30GB or so free), compiling it all is a massive headache, it contains code for all sorts of different single-board computers to make them Matter devices, and I couldn't make head nor tail of it. I'm sure you need all this if you're looking to build a device and ship millions of them to people in Best Buy and Currys, but I ain't. Normally, people write stuff like this in Python, but in looking around all I could find was a &lt;a href="https://github.com/home-assistant-libs/python-matter-server"&gt;Python library&lt;/a&gt; designed to work with &lt;a href="https://www.home-assistant.io/"&gt;Home Assistant&lt;/a&gt;, which is not what I wanted (I want to make a device, not a controller) and which required the CHIP SDK anyway, the big complicated nightmare thing mentioned above. I resigned myself to having to write a very noddy implementation of enough of Matter's pairing and communications stuff in Python to get a device up and running, and bitched about having to do this on social media. And then &lt;a href="https://mastodon.ie/@AlanBell"&gt;Alan Bell&lt;/a&gt;, hero of the revolution, said: have you tried &lt;a href="https://github.com/project-chip/matter.js"&gt;matter.js&lt;/a&gt;?&lt;sup id="sf-a-software-matter-device-that-alexa-can-talk-to-8-back"&gt;&lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-8" class="simple-footnote" title="There is an unfortunate naming collision here. There already was a Matter.js: it's a 2d physics engine for the web, which I've used before. But I can't see what else the people implementing the Matter spec in JavaScript could have called their thing. Only so many words in the world, I guess"&gt;8&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;I had not. So I gave it a look.&lt;/p&gt;
&lt;h1 id="matterpart4"&gt;Part the fourth: yes it Matters!&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/project-chip/matter.js"&gt;Matter.js&lt;/a&gt; is an implementation of the Matter suite of protocols in JavaScript. It does not build on the huge complicated Project CHIP SDK; it's its own thing. And it just works.&lt;/p&gt;
&lt;p&gt;If you want to build a Matter device in JavaScript, take a look at &lt;a href="https://github.com/project-chip/matter.js/blob/main/packages/matter-node.js-examples/README.md"&gt;the Matter.js Node examples&lt;/a&gt; and they work fine. You can do that right now.&lt;/p&gt;
&lt;p&gt;I did something a little tiny bit different. The Matter.js stuff is not actually JS; it's TypeScript. I don't like TypeScript&lt;sup id="sf-a-software-matter-device-that-alexa-can-talk-to-9-back"&gt;&lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-9" class="simple-footnote" title="feel free to email your long diatribe about why TypeScript is the future to IDontCare@Whatever.Bored"&gt;9&lt;/a&gt;&lt;/sup&gt; and so I wanted a plain JS thing. So I did a simple reimplementation of the simplest Matter.js example in plain JS, and made it even simpler; the original correctly lets you pass in a bunch of details on the command line to configure it, but I'm not bothered about that and wanted to keep it as simple as possible. So, &lt;a href="https://github.com/stuartlangridge/simple-js-matter-device"&gt;the simplest possible "virtual" Matter device implemented in JavaScript&lt;/a&gt;. It's a lightbulb; Alexa, and Matter, do support multiple types of devices (including window blind controllers!) but Matter.js only does lightbulbs and sockets at the moment. I'm probably going to build and contribute the window blind controller device type, if someone else doesn't get there first. Anyway, let's get this code running! Use is pretty easy for a developer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;https://github.com/stuartlangridge/simple-js-matter-device.git
Cloning&lt;span class="w"&gt; &lt;/span&gt;into&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'simple-js-matter-device'&lt;/span&gt;...
remote:&lt;span class="w"&gt; &lt;/span&gt;Enumerating&lt;span class="w"&gt; &lt;/span&gt;objects:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;.
remote:&lt;span class="w"&gt; &lt;/span&gt;Counting&lt;span class="w"&gt; &lt;/span&gt;objects:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;%&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;/11&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;.
remote:&lt;span class="w"&gt; &lt;/span&gt;Compressing&lt;span class="w"&gt; &lt;/span&gt;objects:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;%&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;/10&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;.
remote:&lt;span class="w"&gt; &lt;/span&gt;Total&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;delta&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;reused&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;delta&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;pack-reused&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
Receiving&lt;span class="w"&gt; &lt;/span&gt;objects:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;%&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;/11&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;.16&lt;span class="w"&gt; &lt;/span&gt;KiB&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.48&lt;span class="w"&gt; &lt;/span&gt;MiB/s,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;.
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;simple-js-matter-device
$&lt;span class="w"&gt; &lt;/span&gt;npm&lt;span class="w"&gt; &lt;/span&gt;install

added&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;90&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;packages,&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;audited&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;91&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;packages&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;5s

&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;packages&lt;span class="w"&gt; &lt;/span&gt;are&lt;span class="w"&gt; &lt;/span&gt;looking&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;funding
&lt;span class="w"&gt;  &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;npm&lt;span class="w"&gt; &lt;/span&gt;fund&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;details

found&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;vulnerabilities
$&lt;span class="w"&gt; &lt;/span&gt;node&lt;span class="w"&gt; &lt;/span&gt;sil.mjs&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="m"&gt;2023&lt;/span&gt;-10-06&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;:38:24.231&lt;span class="w"&gt; &lt;/span&gt;INFO&lt;span class="w"&gt;  &lt;/span&gt;Device&lt;span class="w"&gt;               &lt;/span&gt;node-matter
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
█&lt;span class="w"&gt; &lt;/span&gt;▄▄▄▄▄&lt;span class="w"&gt; &lt;/span&gt;██▀▄▀▄█&lt;span class="w"&gt; &lt;/span&gt;▄▄▄▄▄&lt;span class="w"&gt; &lt;/span&gt;█
█&lt;span class="w"&gt; &lt;/span&gt;█&lt;span class="w"&gt;   &lt;/span&gt;█&lt;span class="w"&gt; &lt;/span&gt;█▄▀▄▀▄█&lt;span class="w"&gt; &lt;/span&gt;█&lt;span class="w"&gt;   &lt;/span&gt;█&lt;span class="w"&gt; &lt;/span&gt;█
█&lt;span class="w"&gt; &lt;/span&gt;█▄▄▄█&lt;span class="w"&gt; &lt;/span&gt;██&lt;span class="w"&gt; &lt;/span&gt;▀▀▄█&lt;span class="w"&gt; &lt;/span&gt;█▄▄▄█&lt;span class="w"&gt; &lt;/span&gt;█
█▄▄▄▄▄▄▄█&lt;span class="w"&gt; &lt;/span&gt;█&lt;span class="w"&gt; &lt;/span&gt;▀▄█▄▄▄▄▄▄▄█
█&lt;span class="w"&gt; &lt;/span&gt;▄&lt;span class="w"&gt; &lt;/span&gt;█▄&lt;span class="w"&gt; &lt;/span&gt;▄▄▄█&lt;span class="w"&gt; &lt;/span&gt;█&lt;span class="w"&gt;  &lt;/span&gt;▄▀██&lt;span class="w"&gt; &lt;/span&gt;█▀█
██▀&lt;span class="w"&gt;  &lt;/span&gt;█▀▄█▄&lt;span class="w"&gt; &lt;/span&gt;█&lt;span class="w"&gt; &lt;/span&gt;▀▀▄█&lt;span class="w"&gt;  &lt;/span&gt;▀█▀█
██▄█▄▄█▄▄█▄▄▀&lt;span class="w"&gt; &lt;/span&gt;▀▄&lt;span class="w"&gt; &lt;/span&gt;█▄▀▄▀█
█&lt;span class="w"&gt; &lt;/span&gt;▄▄▄▄▄&lt;span class="w"&gt; &lt;/span&gt;█&lt;span class="w"&gt;  &lt;/span&gt;▄█▄█▄▄&lt;span class="w"&gt; &lt;/span&gt;▄&lt;span class="w"&gt; &lt;/span&gt;█&lt;span class="w"&gt; &lt;/span&gt;█
█&lt;span class="w"&gt; &lt;/span&gt;█&lt;span class="w"&gt;   &lt;/span&gt;█&lt;span class="w"&gt; &lt;/span&gt;█▄▄&lt;span class="w"&gt; &lt;/span&gt;█▄&lt;span class="w"&gt; &lt;/span&gt;▄&lt;span class="w"&gt; &lt;/span&gt;▀▄&lt;span class="w"&gt; &lt;/span&gt;▀██
█&lt;span class="w"&gt; &lt;/span&gt;█▄▄▄█&lt;span class="w"&gt; &lt;/span&gt;█&lt;span class="w"&gt;  &lt;/span&gt;▀█▄█&lt;span class="w"&gt; &lt;/span&gt;▀█&lt;span class="w"&gt;  &lt;/span&gt;▀&lt;span class="w"&gt; &lt;/span&gt;█
█▄▄▄▄▄▄▄█▄███▄██▄██▄█▄█
▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀

&lt;span class="m"&gt;2023&lt;/span&gt;-10-06&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;:38:24.330&lt;span class="w"&gt; &lt;/span&gt;INFO&lt;span class="w"&gt;  &lt;/span&gt;Device&lt;span class="w"&gt;               &lt;/span&gt;QR&lt;span class="w"&gt; &lt;/span&gt;Code&lt;span class="w"&gt; &lt;/span&gt;URL:&lt;span class="w"&gt; &lt;/span&gt;https://project-chip.github.io/connectedhomeip/qrcode.html?data&lt;span class="o"&gt;=&lt;/span&gt;MT:Y.K90-Q000KA0648G00
&lt;span class="m"&gt;2023&lt;/span&gt;-10-06&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;:38:24.330&lt;span class="w"&gt; &lt;/span&gt;INFO&lt;span class="w"&gt;  &lt;/span&gt;Device&lt;span class="w"&gt;               &lt;/span&gt;Manual&lt;span class="w"&gt; &lt;/span&gt;pairing&lt;span class="w"&gt; &lt;/span&gt;code:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;34970112332&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We've git cloned the repository, done &lt;code&gt;npm install&lt;/code&gt; to install the dependencies, and run it. That starts up our virtual device, and also prints the QR code and manual pairing code used for pairing. Job done; your device now exists.&lt;/p&gt;
&lt;p&gt;Next, we teach Alexa about it. Exercise your most commanding voice and say "Alexa, discover new devices!" Your Echo will tell you it's doing it, and then after a few seconds of searching, tell you that it's found one Matter device and send you off to the devices section of the Alexa app on your phone to connect it up; I also got a notification on my phone telling me the same thing.&lt;/p&gt;
&lt;p&gt;&lt;img alt='an iOS lock screen showing a notification reading "Tap to begin setup with Alexa: New Matter Device found' src="https://kryogenix.org/images/matter-ios-shots/01-notification.png"&gt;&lt;/p&gt;
&lt;p&gt;Hit that notification and you end up on the Devices screen, where it'll tell you to "Connect your Matter Light Bulb":&lt;/p&gt;
&lt;p&gt;&lt;img alt="the Alexa app's Devices screen, with &amp;quot;Connect your Matter Light Bulb&amp;quot; in a newly showing &amp;quot;Available Devices&amp;quot; section" src="https://kryogenix.org/images/matter-ios-shots/02-devices.png"&gt;&lt;/p&gt;
&lt;p&gt;(For some reason, my device seems to present as two separate devices; a light bulb and an unnamed "Matter device". I don't know why. It seems that you can pick either.)&lt;/p&gt;
&lt;p&gt;Choose to connect to this Matter device, and you get a screen called "Control your Matter device with Alexa", which is exactly what we want to do:&lt;/p&gt;
&lt;p&gt;&lt;img alt='the Alexa app showing a screen headlined "Control your Matter device with Alexa", and Cancel and Next buttons' src="https://kryogenix.org/images/matter-ios-shots/03-control.png"&gt;&lt;/p&gt;
&lt;p&gt;When asked if your device has a Matter logo, say yes (it would do if it were a real Matter device, of course):&lt;/p&gt;
&lt;p&gt;&lt;img alt='the Alexa app showing a screen headlined "Does your device have a Matter logo?", and No and Yes buttons' src="https://kryogenix.org/images/matter-ios-shots/04-logo.png"&gt;&lt;/p&gt;
&lt;p&gt;Then you have to scan the QR code. Usefully, the device has printed out a QR code in the Terminal where you ran it, above; scan that. If that didn't work for some reason, it has also printed a URL for that QR code which you can follow to show the QR in the browser, and if that doesn't work either, you can enter the numeric code it printed (the "manual pairing code) instead:&lt;/p&gt;
&lt;p&gt;&lt;img alt='the Alexa app showing a screen headlined "Locate a QR code shown for your device", and "Try numeric code instead?" and "Scan QR code" buttons' src="https://kryogenix.org/images/matter-ios-shots/05-qr.png"&gt;&lt;/p&gt;
&lt;p&gt;Alexa will then claim to be "Looking for your device" (and the stuff in the Terminal will print a bunch of logging things about "Pase server: Received pairing request from udp://192.168.1.103:5541" and whatnot):&lt;/p&gt;
&lt;p&gt;&lt;img alt='the Alexa app showing a screen headlined "Looking for your device", and a waiting spinner' src="https://kryogenix.org/images/matter-ios-shots/06-looking.png"&gt;&lt;/p&gt;
&lt;p&gt;and then, all else being good, you'll get a screen telling you your light is connected! It's called "Kryogenix Light" in this screen, and "Stuart Light" elsewhere; you can see those strings in &lt;code&gt;sil.mjs&lt;/code&gt; and can customise them to your heart's content.&lt;/p&gt;
&lt;p&gt;&lt;img alt='the Alexa app showing a screen headlined "Kryogenix Light found and connected", and a Next button' src="https://kryogenix.org/images/matter-ios-shots/07-connected.png"&gt;&lt;/p&gt;
&lt;p&gt;You should now have a "Lights" section in the Devices screen of your Alexa app. You can use this to turn the "light" on and off from the Alexa app, or you can say "Alexa, turn Stuart Light on" to do it by voice. When you do that, the Terminal should print &lt;code&gt;!!!!!!!!!!!!!!!! GOT COMMAND true&lt;/code&gt; (or &lt;code&gt;false&lt;/code&gt;), which means it's calling the &lt;code&gt;onOffListener&lt;/code&gt; we &lt;a href="https://github.com/stuartlangridge/simple-js-matter-device/blob/56e4d964c1f1fc5ff9164292bca3b20cea262d5f/sil.mjs#L45"&gt;defined in sil.mjs&lt;/a&gt;. You can customise this to do whatever you'd like!&lt;/p&gt;
&lt;p&gt;&lt;img alt='the Alexa app showing a screen headlined "Stuart Light", and a big circular on/off power button, currently set to On with a blue halo around it' src="https://kryogenix.org/images/matter-ios-shots/08-onoff.png"&gt;&lt;/p&gt;
&lt;p&gt;And that's it working. That's a software device, which you can pair with Alexa and customise how you choose; it doesn't require you to write an Alexa skill, and the device does not need to be accessible from the internet. That's just what I want.&lt;/p&gt;
&lt;p&gt;Now I suppose I have to make it do something useful...&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-a-software-matter-device-that-alexa-can-talk-to-1"&gt;less so music than before, after the bloody shysters at Amazon decided to take away the free music playing from Amazon Prime and make people pay extra for it &lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-a-software-matter-device-that-alexa-can-talk-to-2"&gt;I make up for it by being, like, twice his size, though &lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-2-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-a-software-matter-device-that-alexa-can-talk-to-3"&gt;honestly, this is the big issue. I react very badly to stuff where I &lt;em&gt;ought&lt;/em&gt; to be able to do a thing and I'm not permitted to do so because they don't want me to or can't be bothered to implement it, and won't let me do it myself. This is one of the big things that makes me move away from iOS every few years &lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-3-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-a-software-matter-device-that-alexa-can-talk-to-4"&gt;insert picture here of that bloke tapping his temple knowingly &lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-4-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-a-software-matter-device-that-alexa-can-talk-to-5"&gt;you should not need a mobile app to connect to a device pretending to be an access point. You should be able to do this from the web browser on your phone. But you can't, as &lt;a href="https://www.kryogenix.org/days/2020/08/18/iot-devices-and-android-and-disappointment/"&gt;I have laboriously discussed before in these pages&lt;/a&gt; and am still annoyed about &lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-5-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-a-software-matter-device-that-alexa-can-talk-to-6"&gt;as usual with corporate technology things, the Matter specification is difficult to find; one of these things where you need to sign up, or be a "partner", or pay money, or something. But it is obtainable. &lt;a href="https://developer.amazon.com/en-US/docs/alexa/smarthome/matter-support.html"&gt;The Alexa Matter docs&lt;/a&gt; link to &lt;a href="https://csa-iot.org/developer-resource/specifications-download-request/"&gt;a page on the Matter website&lt;/a&gt; which lets you fill in an email address and then emails you a link to &lt;a href="https://csa-iot.org/wp-content/uploads/2022/11/22-27349-001_Matter-1.0-Core-Specification.pdf"&gt;a PDF of the spec&lt;/a&gt; in all its 895 page glory &lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-6-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-a-software-matter-device-that-alexa-can-talk-to-7"&gt;super reassuringly, Matter seems to use all standard protocols! device discovery is mdns! They even have example commands for &lt;code&gt;avahi-publish-service&lt;/code&gt; to show you how to do it, right there in the spec! &lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-7-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-a-software-matter-device-that-alexa-can-talk-to-8"&gt;There is an unfortunate naming collision here. There already was a &lt;a href="https://brm.io/matter-js/"&gt;Matter.js&lt;/a&gt;: it's a 2d physics engine for the web, which I've used before. But I can't see what else the people implementing the Matter spec in JavaScript could have called their thing. Only so many words in the world, I guess &lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-8-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-a-software-matter-device-that-alexa-can-talk-to-9"&gt;feel free to email your long diatribe about why TypeScript is the future to IDontCare@Whatever.Bored &lt;a href="#sf-a-software-matter-device-that-alexa-can-talk-to-9-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="General musings"></category></entry><entry><title>Numeric Pangrams</title><link href="https://www.kryogenix.org/days/2023/08/06/numeric-pangrams/" rel="alternate"></link><published>2023-08-06T14:11:00+01:00</published><updated>2023-08-06T14:11:00+01:00</updated><author><name>sil</name></author><id>tag:www.kryogenix.org,2023-08-06:/days/2023/08/06/numeric-pangrams/</id><summary type="html">&lt;p&gt;A few days ago I had an interesting maths thought which I dropped &lt;a href="https://mastodon.social/@sil/110833073093233760"&gt;on Mastodon&lt;/a&gt;:&lt;/p&gt;
&lt;iframe src="https://mastodon.social/@sil/110833073093233760/embed" class="mastodon-embed" style="max-width: 100%; border: 0" width="400" allowfullscreen="allowfullscreen"&gt;
&lt;p&gt;Today’s interesting maths problem to think about: what is the largest total from a correct maths equation which uses any number of +*\- symbols, one =, and the digits from 0-9 once each?&lt;/p&gt;

&lt;p&gt;For example, if …&lt;/p&gt;&lt;/iframe&gt;</summary><content type="html">&lt;p&gt;A few days ago I had an interesting maths thought which I dropped &lt;a href="https://mastodon.social/@sil/110833073093233760"&gt;on Mastodon&lt;/a&gt;:&lt;/p&gt;
&lt;iframe src="https://mastodon.social/@sil/110833073093233760/embed" class="mastodon-embed" style="max-width: 100%; border: 0" width="400" allowfullscreen="allowfullscreen"&gt;
&lt;p&gt;Today’s interesting maths problem to think about: what is the largest total from a correct maths equation which uses any number of +*\- symbols, one =, and the digits from 0-9 once each?&lt;/p&gt;

&lt;p&gt;For example, if we’re doing it for digits 0-4, then 40-12=3 isn’t valid (answer is wrong), 1+3=4 isn’t valid (correct but doesn’t use 0 or 2), 12/4+0=3 is good, and 4*3+0=12 is better (because 12 is higher than 3).&lt;/p&gt;

&lt;p&gt;Is there an interesting way to solve this which isn’t “have a computer check all possibilities”?&lt;/p&gt;
&lt;/iframe&gt;
&lt;script src="https://mastodon.social/embed.js" async="async"&gt;&lt;/script&gt;

&lt;p&gt;Disappointingly, I couldn't think of an interesting way to solve it which wasn't "have a computer check all the possibilities", so I had a computer check all the possibilities.&lt;/p&gt;
&lt;p&gt;I'm not publishing the script, because it's not very good; in particular, I'm sure this is the sort of thing that someone could make run in a few seconds if they were clever. I wasn't feeling clever, so I brute-forced it and just left it to run for a few hours.&lt;/p&gt;
&lt;p&gt;These are numeric pangrams, I suppose you might call them. A pangram is a sentence which uses all the letters in the alphabet at least once: there are a bunch of famous English examples, starting with "The quick brown fox jumps over a lazy dog" and getting less and less comprehensible as they get shorter. Vexing quizzes show up a lot. Anyway, after I thought up the term "numeric pangrams" I checked to see if anybody else had already done so and of course Greg Ross at &lt;a href="https://www.futilitycloset.com/2007/10/11/numerical-pangrams/"&gt;Futility Closet&lt;/a&gt; did sixteen years ago. His examples are the digits from 1-9, though (his biggest example is &lt;code&gt;4 × 1963 = 7852&lt;/code&gt;), and my 0-9 suggestion allows for much larger total values.&lt;/p&gt;
&lt;p&gt;Anyway, the best equations I could come up with which use all the digits from 0-9 were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;42 × 8 × 91 = 30576&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;46 × 715 = 32890&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;4 × 9127 = 36508&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;63 × 927 = 58401&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;7 × 9403 = 65821&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is the sort of thing that &lt;a href="https://www.kryogenix.org/days/2018/02/08/sorry-henry/"&gt;Henry Dudeney&lt;/a&gt; would have cleverly done by hand. Python is the way forward, of course.&lt;/p&gt;</content><category term="General musings"></category></entry><entry><title>Dungeons &amp; Dragons: Honour Among Thieves, a review</title><link href="https://www.kryogenix.org/days/2023/04/04/dungeons-dragons-honour-among-thieves-a-review/" rel="alternate"></link><published>2023-04-04T19:18:00+01:00</published><updated>2023-04-04T19:18:00+01:00</updated><author><name>sil</name></author><id>tag:www.kryogenix.org,2023-04-04:/days/2023/04/04/dungeons-dragons-honour-among-thieves-a-review/</id><summary type="html">&lt;p&gt;So, &lt;a href="https://en.wikipedia.org/wiki/Dungeons_%2526_Dragons:_Honor_Among_Thieves"&gt;Dungeons &amp;amp; Dragons: Honour Among Thieves&lt;/a&gt;, which I have just watched. I have some thoughts. Spoilers from here on out!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.imdb.com/title/tt2906216/"&gt;&lt;img src="https://kryogenix.org/random/dndhat.png" alt="Theatrical release poster for Honour Among Thieves which depicts a big D&amp;D logo in flames (a dragon curled into the form of an ampersand and breathing fire)"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Up front I shall say: that was OK. Not amazing, but not bad either. It could have been cringy, or worthy, and it was not. It struck a reasonable balance …&lt;/p&gt;</summary><content type="html">&lt;p&gt;So, &lt;a href="https://en.wikipedia.org/wiki/Dungeons_%2526_Dragons:_Honor_Among_Thieves"&gt;Dungeons &amp;amp; Dragons: Honour Among Thieves&lt;/a&gt;, which I have just watched. I have some thoughts. Spoilers from here on out!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.imdb.com/title/tt2906216/"&gt;&lt;img src="https://kryogenix.org/random/dndhat.png" alt="Theatrical release poster for Honour Among Thieves which depicts a big D&amp;D logo in flames (a dragon curled into the form of an ampersand and breathing fire)"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Up front I shall say: that was OK. Not amazing, but not bad either. It could have been cringy, or worthy, and it was not. It struck a reasonable balance between being overly puffed up with a sense of epic self-importance (which it avoided) and being campy and ridiculous and mocking all of us who are invested in the game (which it also avoided). So, a tentative thumbs-up, I suppose. That's the headline review.&lt;/p&gt;
&lt;p&gt;But there is more to be considered in the movie. I do rather like that for those of us who play D&amp;amp;D, pretty much everything in the film was recognisable as an actual rules-compliant thing, without making a big deal about it. I'm sure there are rules lawyers quibbling about the detail ("blah blah wildshape into an owlbear", "blah blah if she can cast time stop why does she need some crap adventurers to help") but that's all fine. It's a film, not a rulebook.&lt;/p&gt;
&lt;p&gt;I liked how Honour Among Thieves is recognisably using canon from an existing D&amp;amp;D land, Faerûn, but without making it important; someone who doesn't know this stuff will happily pass over the names of Szass Tam or Neverwinter or Elminster or Mordenkainen as irrelevant world-building, but that's in there for those of us who know those names. It's the good sort of fanservice; the sort that doesn't ruin things if you're not a fan.&lt;/p&gt;
&lt;p&gt;(Side notes: Simon is an Aumar? And more importantly, he's Simon the Sorcerer? Is that a sly reference to &lt;em&gt;the&lt;/em&gt; &lt;a href="https://en.wikipedia.org/wiki/Simon_the_Sorcerer"&gt;Simon the Sorcerer&lt;/a&gt;? Nice, if so. Also, I'm sure there are one billion little references that I didn't catch but might on a second or third or tenth viewing, and also sure that there are one billion web pages categorising them all in exhaustive detail. I liked the different forms of Bigby's Hand. But what happened to the random in the gelatinous cube?)&lt;/p&gt;
&lt;p&gt;And Chris Pine is nowhere near as funny as he thinks he is. Admittedly, he's playing a character, and obviously Edgin the character's vibe is that Edgin is not as funny as he thinks he is, but even given that, it felt like half the jokes were delivered badly and flatly. Marvel films get the comedy right; this film seemed a bit mocking of the concept, and didn't work for me at all.&lt;/p&gt;
&lt;p&gt;I was a bit disappointed in the story in Honour Among Thieves, though. The characters are shallow, as is the tale; there's barely any emotional investment in any of it. We're supposed, presumably, to identify with Simon's struggles to attune to the helmet and root for him, or with the unexpectedness of Holga's death and Edgin and Kira's emotions, but... I didn't. None of it was developed enough; none of it made me feel for the characters and empathise with them. (OK, small tear at Holga's death scene. But I'm easily emotionally manipulated by films. No problem with that.) Similarly, I was a bit annoyed at how flat and undeveloped the characters were at first; the paladin Xenk delivering the line about Edgin re-becoming a Harper with zero gravitas, and the return of the money to the people being nowhere near as epically presented as it could have been.&lt;/p&gt;
&lt;p&gt;But then I started thinking, and I realised... this is a D&amp;amp;D campaign!&lt;/p&gt;
&lt;p&gt;That's not a complaint at all. The film is very much like an actual D&amp;amp;D game! When playing, we &lt;em&gt;do&lt;/em&gt; all strive for epic moves and fail to deliver them with the gravitas that a film would, because we're not pro actors. NPCs &lt;em&gt;do&lt;/em&gt; give up the info you want after unrealistically brief persuasion, because we want to get through that quick and we rolled an 18. The plans &lt;em&gt;are&lt;/em&gt; half-baked but with brilliant ideas (the portal painting was great). That's D&amp;amp;D! For real!&lt;/p&gt;
&lt;p&gt;You know how when someone else is describing a fun #dnd game and the story doesn't resonate all that strongly with you? This is partially because the person telling you is generally not an expert storyteller, but mostly because you &lt;em&gt;weren't there&lt;/em&gt;. You didn't experience it happening, so you missed the good bits. The jokes, the small epic moments, the drama, the bombast.&lt;/p&gt;
&lt;p&gt;That's what D&amp;amp;D: Honour Among Thieves is. It's someone telling you about their D&amp;amp;D campaign.&lt;/p&gt;
&lt;p&gt;It's possible to rise above this, if you want to and you're really good. Dragonlance is someone telling you about their D&amp;amp;D campaign, for example. Critical Role can pull off the epic and the tragic and the hilarious in ways that fall flat when others try (because they're all very good actors with infinite charisma). But I think it's OK to not necessarily try for that. Our games are fun, even when not as dramatic or funny as films. Honour Among Thieves is the same.&lt;/p&gt;
&lt;p&gt;I don't know if there's a market for more. I don't know how many people want to hear a secondhand story about someone else's D&amp;amp;D campaign that cost $150m. This is why I only gave it a tentative thumbs-up. But... I believe that the film-makers' attempt to make Honour Among Thieves be like actual D&amp;amp;D is deliberate, and I admire that.&lt;/p&gt;
&lt;p&gt;This game of ours &lt;em&gt;is&lt;/em&gt; epic and silly and amateurish and glorious all at once, and I'm happy with that. And with a film that reflects it.&lt;/p&gt;</content><category term="General musings"></category></entry><entry><title>Ronin</title><link href="https://www.kryogenix.org/days/2023/01/30/ronin/" rel="alternate"></link><published>2023-01-30T15:44:00+00:00</published><updated>2023-01-30T15:44:00+00:00</updated><author><name>sil</name></author><id>tag:www.kryogenix.org,2023-01-30:/days/2023/01/30/ronin/</id><summary type="html">&lt;p&gt;In 1701, Asano Naganori, a feudal lord in Japan, was summoned to the shogun's court in Edo, the town now called Tokyo. He was a provincial chieftain, and knew little about court etiquette, and the etiquette master of the court, Kira Kozuke-no-Suke, took offence. It's not exactly clear why; it's …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In 1701, Asano Naganori, a feudal lord in Japan, was summoned to the shogun's court in Edo, the town now called Tokyo. He was a provincial chieftain, and knew little about court etiquette, and the etiquette master of the court, Kira Kozuke-no-Suke, took offence. It's not exactly clear why; it's suggested that Asano didn't bribe Kira sufficiently or at all, or that Kira felt that Asano should have shown more deference. Whatever the reasoning, Kira ridiculed Asano in the shogun's presence, and Asano defended his honour by attacking Kira with a dagger.&lt;/p&gt;
&lt;p&gt;Baring steel in the shogun's castle was a grievous offence, and the shogun commanded Asano to atone through suicide. Asano obeyed, faithful to his overlord. The shogun further commanded that Asano's retainers, over 300 samurai, were to be dispossessed and made leaderless, and forbade those retainers from taking revenge on Kira so as to prevent an escalating cycle of bloodshed. The leader of those samurai offered to divide Asano's wealth between all of them, but this was a test. Those who took him up on the offer were paid and told to leave. Forty-seven refused this offer, knowing it to be honourless, and those remaining 47 reported to the shogun that they disavowed any loyalty to their dead lord. The shogun made them rōnin, masterless samurai, and required that they disperse. Before they did, they swore a secret oath among themselves that one day they would return and avenge their master. Then each went their separate ways. These 47 rōnin immersed themselves into the population, seemingly forgoing any desire for revenge, and acting without honour to indicate that they no longer followed their code. The shogun sent spies to monitor the actions of the rōnin, to ensure that their unworthy behaviour was not a trick, but their dishonour continued for a month, two, three. For a year and a half each acted dissolutely, appallingly; drunkards and criminals all, as their swords went to rust and their reputations the same.&lt;/p&gt;
&lt;p&gt;A year and a half later, the forty-seven rōnin gathered together again. They subdued or killed and wounded Kira's guards, they found a secret passage hidden behind a scroll, and in the hidden courtyard they found Kira and demanded that he die by suicide to satisfy their lord's honour. When the etiquette master refused, the rōnin cut off Kira's head and laid it on Asano's grave. Then they came to the shogun, surrounded by a public in awe of their actions, and confessed. The shogun considered having them executed as criminals but instead required that they too die by suicide, and the rōnin obeyed. They were buried, all except one who was not present and who lived on, in front of the tomb of their master. The tombs are a place to be visited even today, and the story of the 47 rōnin is a famous one both inside and outside Japan.&lt;/p&gt;
&lt;p&gt;You might think: why have I been told this story? Well, there were 47 of them. 47 is a good number. It's the atomic number of silver, which is interesting stuff; the most electrically conductive metal. (During World War II, the Manhattan Project couldn't get enough copper for the miles of wiring they needed because it was going elsewhere for the war effort, so they took all the silver out of Fort Knox and melted it down to make wire instead.) It's strictly non-palindromic, which means that it's not only not a palindrome, it remains not a palindrome in any base smaller than itself. And it's how old I am today.&lt;/p&gt;
&lt;p&gt;Yes! It's my birthday! Hooray!&lt;/p&gt;
&lt;p&gt;&lt;img src="https://kryogenix.org/images/bday-1.jpg" alt="A glowing message board reading 'BDAY BASH 47'"&gt;&lt;/p&gt;
&lt;p&gt;I have had a good birthday this year. The family and I had delightful Greek dinner at Mythos in the Arcadian, and then yesterday a bunch of us went to the pub and had an absolute whale of an afternoon and evening, during which I became heartily intoxicated and wore a bag on my head like Lord Farrow, among other things. And I got a picture of the Solvay Conference from Bruce.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://kryogenix.org/images/bday-3.jpg" alt="A framed picture of the Solvay Conference 1927, which is a bunch of stern-looking male physicists and Marie Curie arranged like a school photo"&gt;&lt;/p&gt;
&lt;p&gt;This year is shaping up well; I have some interesting projects coming up, including one will-be-public thing that I've been working on and which I'll be revealing more about in due course, a much-delayed family thing is very near its end (finally!), and in general it's just gotta be better than the ongoing car crash that the last few years have been. Fingers crossed; ask me again in twelve months, anyway. I've been writing these little posts for 21 years now (&lt;a href="https://www.kryogenix.org/days/2022/01/30/the-forty-sixers-club/"&gt;last year&lt;/a&gt; has more links) and there have been ups and downs, but this year I feel quite hopeful about the future for the first time in a while. This is good news. Happy birthday, me.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://kryogenix.org/images/bday-2.jpg" alt="Me wearing a peach-coloured card gift bag on my head in the pub"&gt;&lt;/p&gt;</content><category term="General musings"></category></entry><entry><title>What to do about hotlinking</title><link href="https://www.kryogenix.org/days/2023/01/02/what-to-do-about-hotlinking/" rel="alternate"></link><published>2023-01-02T18:10:00+00:00</published><updated>2023-01-02T18:10:00+00:00</updated><author><name>sil</name></author><id>tag:www.kryogenix.org,2023-01-02:/days/2023/01/02/what-to-do-about-hotlinking/</id><summary type="html">&lt;p&gt;Hotlinking, in the context I want to discuss here, is the act of using a resource on your website by linking to it on someone else's website. This might be any resource: a script, an image, anything that is referenced by URL.&lt;/p&gt;
&lt;p&gt;It's a bit of an anti-social practice, to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hotlinking, in the context I want to discuss here, is the act of using a resource on your website by linking to it on someone else's website. This might be any resource: a script, an image, anything that is referenced by URL.&lt;/p&gt;
&lt;p&gt;It's a bit of an anti-social practice, to be honest. Essentially, you're offloading the responsibility for the bandwidth of serving that resource to someone else, but it's your site and your users who get the benefit of that. That's not all that nice.&lt;/p&gt;
&lt;p&gt;Now, if the "other person's website" is a CDN -- that is, a site deliberately set up &lt;em&gt;in order&lt;/em&gt; to serve resources to someone else -- then that's different. There are many CDNs, and using resources served from them is not a bad thing. That's not what I'm talking about. But if you're including something direct from someone else's not-a-CDN site, then... what, if anything, should the owner of that site do about it?&lt;/p&gt;
&lt;p&gt;I've got a fairly popular, small, piece of JavaScript: &lt;a href="https://kryogenix.org/code/browser/sorttable"&gt;sorttable.js&lt;/a&gt;, which makes an HTML table be sortable by clicking on the headers. It's existed for a &lt;em&gt;long&lt;/em&gt; time now (the very first version was written twenty years ago!) and I get an email about it once a week or so from people looking to customise how it works or ask questions about how to do a thing they want. It's open source, and I encourage people to use it; it's deliberately designed to be simple&lt;sup id="sf-what-to-do-about-hotlinking-1-back"&gt;&lt;a href="#sf-what-to-do-about-hotlinking-1" class="simple-footnote" title="and will stay simple; I'd rather sorttable were simple and relatively bulletproof than comprehensive and complicated. This also explains why it's not written in very &amp;quot;modern&amp;quot; JS style; the best assurance I have that it works in old browsers that are hard to test in now is that it DID work in them and I haven't changed it much"&gt;1&lt;/a&gt;&lt;/sup&gt;, because the target audience is really people who aren't hugely experienced with web development and who can add sortability to their HTML tables with a couple of lines of code. &lt;/p&gt;
&lt;p&gt;The instructions for sorttable are pretty clear: download the library, then put it in your web space and include it. However, some sites skip that first step, and instead just link directly to the copy on my website with a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element. Having looked at my bandwidth usage recently, this happens quite a lot&lt;sup id="sf-what-to-do-about-hotlinking-2-back"&gt;&lt;a href="#sf-what-to-do-about-hotlinking-2" class="simple-footnote" title="in the last two weeks I've had about 200,000 hits on sorttable.js from sites that hotlink it, which ain't nothin'"&gt;2&lt;/a&gt;&lt;/sup&gt;, and on some quite high-profile sites. I'm not going to name and shame anyone&lt;sup id="sf-what-to-do-about-hotlinking-3-back"&gt;&lt;a href="#sf-what-to-do-about-hotlinking-3" class="simple-footnote" title="yet, at least, so don't ask"&gt;3&lt;/a&gt;&lt;/sup&gt;, but I'd quite like to encourage people to not do that, if there's a way to do it. So I've been thinking about ways that I might discourage hotlinking the script directly, while doing so in a reasonable and humane fashion. I'm also interested in suggestions: hit me up on Mastodon at &lt;a href="https://mastodon.social/@sil"&gt;@sil@mastodon.social&lt;/a&gt; or Twitter&lt;sup id="sf-what-to-do-about-hotlinking-4-back"&gt;&lt;a href="#sf-what-to-do-about-hotlinking-4" class="simple-footnote" title="if you must"&gt;4&lt;/a&gt;&lt;/sup&gt; as @sil.&lt;/p&gt;
&lt;h2&gt;Move the script to a different URL&lt;/h2&gt;
&lt;p&gt;This is the obvious thing to do: I move the script and update my page to link to the new location, so anyone coming to my page to get the script will be wholly unaffected and unaware I did it. I do not want to do this, for two big reasons: it's kicking the can down the road, and it's unfriendly.&lt;/p&gt;
&lt;p&gt;It's can-kicking because it doesn't actually solve the problem: if I do nothing else to discourage the practice of hotlinking, then a few years from now I'll have people hotlinking to the new location and I'll have to do it again. OK, that's not exactly a lot of work, but it's still not a great answer.&lt;/p&gt;
&lt;p&gt;But more importantly, it's unfriendly. If I do that, I'll be deliberately breaking everyone who's hotlinking the script. You might think that they deserve it, but it's not actually them who feel the effect; it's their users. And their users didn't do it. One of the big motives behind the web's general underlying principle of "don't break the web" is that it's not reasonable to punish a site's users for the bad actions of the site's creators. This applies to browsers, to libraries, to websites, the whole lot. I would like to find a less harsh method than this.&lt;/p&gt;
&lt;h2&gt;Move the script to a different &lt;em&gt;dynamic&lt;/em&gt; URL&lt;/h2&gt;
&lt;p&gt;That is: do the above, but link to a URL which changes automatically every month or every minute or something. The reason that I don't want to do this (apart from the unfriendly one from above, which still applies even though this fixes the can-kicking) is that this requires server collusion; I'd need to make my main page be dynamic in some way, so that links to the script also update along with the script name change. This involves faffery with cron jobs, or turning the existing static HTML page into a server-generated page, both of which are annoying. I know how to do this, but it feels like an inelegant solution; this isn't really a technical problem, it's a social one, where developers are doing an anti-social thing. Attempting to solve social problems with technical measures is pretty much always a bad idea, and so it is in this case.&lt;/p&gt;
&lt;h2&gt;Contact the highest-profile site developers about it&lt;/h2&gt;
&lt;p&gt;I'm leaning in this direction. I'm OK with smaller sites hotlinking (well, I'm not really, but I'm prepared to handwave it; I made the script and made it easy to use exactly to help people, and if a small part of that general donation to the universe includes me providing bandwidth for it, then I can live with that). The issue here is that it's not always easy to tell who those heavy-bandwidth-consuming sites &lt;em&gt;are&lt;/em&gt;. It relies on the referrer being provided, which it isn't always. It's also a bit more work on my part, because I would want to send an email saying "hey, Site X developers, you're hotlinking my script as you can see on page sitex.example.com/sometable.html and it would be nice if you didn't do that", but I have no good way of identifying those pages; the document referrer isn't always that specific. If I send an email saying "you're hotlinking my script somewhere, who knows where, please don't do that" then the site developers are quite likely to put this request at the very bottom of their list, and I don't blame them.&lt;/p&gt;
&lt;h2&gt;Move the script and maliciously break the old one&lt;/h2&gt;
&lt;p&gt;This is: I move the script somewhere else and update my links, and then I change the previous URL to be the same script but it does something like barf a complaint into the console log, or (in extreme cases based on suggestions I've had) pops up an alert box or does something equally obnoxious. Obviously, I don't wanna do this.&lt;/p&gt;
&lt;h2&gt;Legal-ish things&lt;/h2&gt;
&lt;p&gt;That is: contact the highest profile users, but instead of being conciliatory, be threatening. "You're hotlinking this, stop doing it, or pay the Hotlink Licence Fee which is one cent per user per day" or similar. I think the people who suggest this sort of thing (and the previous malicious approach) must have had another website do something terrible to them in a previous life or something and now are out for revenge. I liked John Wick as much as the next poorly-socialised revenge-fantasy tech nerd, but he's not a good model for collaborative software development, y'know?&lt;/p&gt;
&lt;h2&gt;Put the page (or whole site) behind a CDN&lt;/h2&gt;
&lt;p&gt;I could put the site behind Cloudflare (or perhaps a better, less troubling CDN) and then not worry about it; it's not &lt;em&gt;my&lt;/em&gt; bandwidth then, it's theirs, and they're fine with it. This used to be the case, but recently I moved web hosts&lt;sup id="sf-what-to-do-about-hotlinking-5-back"&gt;&lt;a href="#sf-what-to-do-about-hotlinking-5" class="simple-footnote" title="to the excellent Mythic Beasts, who are way better than the previous hosts"&gt;5&lt;/a&gt;&lt;/sup&gt; and stepped away from Cloudflare in so doing. While this would work... it feels like giving up, a bit. I'm not actually solving the problem, I'm just giving it to someone else who is OK with it.&lt;/p&gt;
&lt;h2&gt;Live with it&lt;/h2&gt;
&lt;p&gt;This isn't overrunning my bandwidth allocation or anything. I'm not actually &lt;em&gt;affected&lt;/em&gt; by this. My complaint isn't important; it's more a sort of distaste for the process. I'd like to make this better, rather than ignoring it, even if ignoring it doesn't mean much, as long as I'm not put to more inconvenience by fixing it. We want things to be better, after all, not simply tolerable.&lt;/p&gt;
&lt;p&gt;So... what do you think, gentle reader? What would you do about it? Answers on a postcard.&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-what-to-do-about-hotlinking-1"&gt;and will stay simple; I'd rather sorttable were simple and relatively bulletproof than comprehensive and complicated. This also explains why it's not written in very "modern" JS style; the best assurance I have that it works in old browsers that are hard to test in now is that it DID work in them and I haven't changed it much &lt;a href="#sf-what-to-do-about-hotlinking-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-what-to-do-about-hotlinking-2"&gt;in the last two weeks I've had about 200,000 hits on sorttable.js from sites that hotlink it, which ain't nothin' &lt;a href="#sf-what-to-do-about-hotlinking-2-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-what-to-do-about-hotlinking-3"&gt;yet, at least, so don't ask &lt;a href="#sf-what-to-do-about-hotlinking-3-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-what-to-do-about-hotlinking-4"&gt;if you must &lt;a href="#sf-what-to-do-about-hotlinking-4-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-what-to-do-about-hotlinking-5"&gt;to the excellent &lt;a href="https://www.mythic-beasts.com/hosting"&gt;Mythic Beasts&lt;/a&gt;, who are way better than the previous hosts &lt;a href="#sf-what-to-do-about-hotlinking-5-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="General musings"></category></entry><entry><title>How I set up a Twitter archive with Tweetback</title><link href="https://www.kryogenix.org/days/2022/12/19/how-i-set-up-a-twitter-archive-with-tweetback/" rel="alternate"></link><published>2022-12-19T10:40:00+00:00</published><updated>2022-12-19T10:40:00+00:00</updated><author><name>sil</name></author><id>tag:www.kryogenix.org,2022-12-19:/days/2022/12/19/how-i-set-up-a-twitter-archive-with-tweetback/</id><summary type="html">&lt;p&gt;Twitter currently has problems. Well, one specific problem, which is the bloke who bought it. My solution to this problem has been to move to Mastodon (&lt;a href="https://mastodon.social/@sil"&gt;@sil@mastodon.social&lt;/a&gt; if you want to do the same), but I've invested fifteen years of my life providing twitter.com with free content …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Twitter currently has problems. Well, one specific problem, which is the bloke who bought it. My solution to this problem has been to move to Mastodon (&lt;a href="https://mastodon.social/@sil"&gt;@sil@mastodon.social&lt;/a&gt; if you want to do the same), but I've invested fifteen years of my life providing twitter.com with free content so I don't really want it to go away. Since there's a chance that the whole site might vanish, or that it continues on its current journey until I don't even want my name associated with it any more, it makes sense to have a backup. And obviously, I don't want all that lovely writing to disappear from the web (how would you all cope without me complaining about some random pub's music in 2011?!), so I wanted to have that backup published somewhere I control... by which I mean my own website.&lt;/p&gt;
&lt;p&gt;So, it would be nice to be able to download a list of all my tweets, and then turn that into some sort of website so it's all still available and published by me.&lt;/p&gt;
&lt;p&gt;Fortunately, &lt;a href="https://www.zachleat.com/"&gt;Zach Leatherman&lt;/a&gt; came to save us by building a tool, &lt;a href="https://github.com/tweetback/tweetback"&gt;Tweetback&lt;/a&gt;, which does a lot of the heavy lifting on this. Nice one, that man. Here I'll describe how I used Tweetback to set up &lt;a href="https://kryogenix.org/twitter"&gt;my own personal Twitter archive&lt;/a&gt;. This is unavoidably a bit of a developer-ish process, involving the Terminal and so on; if you're not at least a little comfortable with doing that, this might not be for you.&lt;/p&gt;
&lt;h1&gt;Step 1: get a backup from Twitter&lt;/h1&gt;
&lt;p&gt;This part is mandatory. Twitter graciously permit you to download a big list of all the tweets you've given them over the years, and you'll need it for this. As they describe in their &lt;a href="https://help.twitter.com/en/managing-your-account/how-to-download-your-twitter-archive"&gt;help page&lt;/a&gt;, go to your Twitter account settings and choose &lt;strong&gt;Your account &amp;gt; Download an archive of your data&lt;/strong&gt;. You'll have to confirm your identity and then say &lt;strong&gt;Request data&lt;/strong&gt;. They then go away and start constructing an archive of all your Twitter stuff. This can take a couple of days; they send you an email when it's done, and you can follow the link in that email to download a zip file. This is your Twitter backup; it contains all your tweets (and some other stuff). Stash it somewhere; you'll need a file from it shortly.&lt;/p&gt;
&lt;h1&gt;Step 2: get the &lt;a href="https://github.com/tweetback/tweetback"&gt;Tweetback&lt;/a&gt; code&lt;/h1&gt;
&lt;p&gt;You'll need both node.js and git installed to do this. If you don't have node.js, go to &lt;a href="https://nodejs.org"&gt;nodejs.org&lt;/a&gt; and follow their instructions for how to download and install it for your computer. (This process can be fiddly; sorry about that. I suspect that most people reading this will already have node installed, but if you don't, hopefully you can manage it.) You'll also need git installed: &lt;a href="https://docs.github.com/en/get-started/quickstart/set-up-git"&gt;Github have some instructions on how to install git&lt;/a&gt; or Github Desktop, which should explain how to do this stuff if you don't already have it set up.&lt;/p&gt;
&lt;p&gt;Now, you need to clone the &lt;a href="https://github.com/tweetback/tweetback"&gt;Tweetback repository&lt;/a&gt; from Github. On the command line, this looks like &lt;code&gt;git clone https://github.com/tweetback/tweetback.git&lt;/code&gt;; if you're using Github Desktop, follow their instructions to &lt;a href="https://docs.github.com/en/desktop/contributing-and-collaborating-using-github-desktop/adding-and-cloning-repositories/cloning-and-forking-repositories-from-github-desktop"&gt;clone a repository&lt;/a&gt;. This should give you the Tweetback code, in a folder on your computer. Make a note of where that folder is.&lt;/p&gt;
&lt;h1&gt;Step 3: install the Tweetback code&lt;/h1&gt;
&lt;p&gt;Open a Terminal on your machine and &lt;code&gt;cd&lt;/code&gt; into the Tweetback folder, wherever you put it. Now, run &lt;code&gt;npm install&lt;/code&gt; to install all of Tweetback's dependencies. Since you have node.js installed from above, this ought to just work. If it doesn't... you get to debug a bit. Sorry about that. This should end up looking something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;npm&lt;span class="w"&gt; &lt;/span&gt;install
npm&lt;span class="w"&gt; &lt;/span&gt;WARN&lt;span class="w"&gt; &lt;/span&gt;deprecated&lt;span class="w"&gt; &lt;/span&gt;@npmcli/move-file@1.1.2:&lt;span class="w"&gt; &lt;/span&gt;This&lt;span class="w"&gt; &lt;/span&gt;functionality&lt;span class="w"&gt; &lt;/span&gt;has&lt;span class="w"&gt; &lt;/span&gt;been&lt;span class="w"&gt; &lt;/span&gt;moved&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;@npmcli/fs

added&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;347&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;packages,&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;audited&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;348&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;packages&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;30s

&lt;span class="m"&gt;52&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;packages&lt;span class="w"&gt; &lt;/span&gt;are&lt;span class="w"&gt; &lt;/span&gt;looking&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;funding
&lt;span class="w"&gt;  &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;npm&lt;span class="w"&gt; &lt;/span&gt;fund&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;details

found&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;vulnerabilities
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Step 4: configure Tweetback with your tweet archive&lt;/h1&gt;
&lt;p&gt;From here, you're following Tweetback's own README instructions: they're online at &lt;a href="https://github.com/tweetback/tweetback#usage"&gt;https://github.com/tweetback/tweetback#usage&lt;/a&gt; and also are in the README file in your current directory.&lt;/p&gt;
&lt;p&gt;Open up the zip file you downloaded from Twitter, and get the &lt;code&gt;data/tweets.js&lt;/code&gt; file from it. Put that in the &lt;code&gt;database&lt;/code&gt; folder in your Tweetback folder, then edit that file to change &lt;code&gt;window.YTD.tweet.part0&lt;/code&gt; on the first line to &lt;code&gt;module.exports&lt;/code&gt;, as the README says. This means that your &lt;code&gt;database/tweets.js&lt;/code&gt; file will now have the first couple of lines look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tweet&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, run &lt;code&gt;npm run import&lt;/code&gt;. This will go through your &lt;code&gt;tweets.js&lt;/code&gt; file and load it all into a database, so it can be more easily read later on. You only need to do this step once. This will print a bunch of lines that look like &lt;code&gt;{ existingRecordsFound: 0, missingTweets: 122 }&lt;/code&gt;, and then a bunch of lines that look like &lt;code&gt;Finished count { count: 116 }&lt;/code&gt;, and then it'll finish. This should be &lt;em&gt;relatively&lt;/em&gt; quick, but if you've got a lot of tweets (I have 68,000!) then it might take a little while. Get yourself a cup of tea and a couple of biscuits and it'll be done when you've poured it.&lt;/p&gt;
&lt;h1&gt;Step 5: Configure a subdirectory (optional)&lt;/h1&gt;
&lt;p&gt;If you're setting up your own (sub)domain for your twitter archive, so it'll be at the root of the website (so, &lt;code&gt;https://twitter.example.com&lt;/code&gt; or whatever) then you can skip this step. However, if you're going to put your archive in its own directory, so it's &lt;em&gt;not&lt;/em&gt; at the root (which I did, for example, at &lt;a href="https://kryogenix.org/twitter/"&gt;kryogenix.org/twitter&lt;/a&gt;), then you need to tell your setup about that.&lt;/p&gt;
&lt;p&gt;To do this, edit the file &lt;code&gt;eleventy.config.js&lt;/code&gt;, and at the end, before the closing &lt;code&gt;}&lt;/code&gt;, add a new line, so the end of the file looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;eleventyConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addPlugin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;EleventyHtmlBasePlugin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pathPrefix&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/twitter/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The string &lt;code&gt;"/twitter/"&lt;/code&gt; should be whatever you want the path to the root of your Twitter archive to be, so if you're going to put it at &lt;code&gt;mywebsite.example.com/my-twitter-archive&lt;/code&gt;, set &lt;code&gt;pathPrefix&lt;/code&gt; to be &lt;code&gt;"/my-twitter-archive"&lt;/code&gt;. This is only a path, not a full URL; you do not need to fill in the domain where you'll be hosting this here.&lt;/p&gt;
&lt;h1&gt;Step 6: add metadata&lt;/h1&gt;
&lt;p&gt;As the Tweetback README describes, edit the file &lt;code&gt;_data/metadata.js&lt;/code&gt;. You'll want to change three values in here: &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;homeLabel&lt;/code&gt;, and &lt;code&gt;homeURL&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;username&lt;/code&gt; is your Twitter username. Mine is &lt;code&gt;sil&lt;/code&gt;: yours isn't. Don't include the &lt;code&gt;@&lt;/code&gt; at the beginning.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;homeLabel&lt;/code&gt; is the thing that appears in the top corner of your Twitter archive once generated; it will be a link to your own homepage. (Note: &lt;em&gt;not&lt;/em&gt; the homepage of this Twitter archive! This will be the text of a link which takes you out of the Twitter archive and to your own home.)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;homeURL&lt;/code&gt; is the full URL to your homepage. (This is "https://kryogenix.org/" for me, for example. It is the URL that &lt;code&gt;homeLabel&lt;/code&gt; links to.)&lt;/p&gt;
&lt;p&gt;&lt;img src="https://kryogenix.org/random/tweetback-homelabel.png" alt="the home label is top left of the website"&gt;&lt;/p&gt;
&lt;h1&gt;Step 7: (drum roll, please!) Build the site&lt;/h1&gt;
&lt;p&gt;OK. Now you've done all the setup. This step actually takes all of that and builds a website from all your tweets.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;npm run build&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you've got a lot of tweets, this can take a &lt;em&gt;long&lt;/em&gt; time. It took me a couple of hours, I think, the first time I ran it. Subsequent runs take a lot less time (a couple of minutes for me, maybe even shorter for you if you're less mouthy on Twitter), but the first run takes &lt;em&gt;ages&lt;/em&gt; because it has to fetch all the images for all the tweets you've ever written. You'll want a second cup of tea here, and perhaps dinner.&lt;/p&gt;
&lt;p&gt;It should look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;npm&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;build

&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;tweetback@1.0.0&lt;span class="w"&gt; &lt;/span&gt;build
&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;npx&lt;span class="w"&gt; &lt;/span&gt;@11ty/eleventy&lt;span class="w"&gt; &lt;/span&gt;--quiet

&lt;span class="o"&gt;[&lt;/span&gt;11ty&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Copied&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1868&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;files&lt;span class="w"&gt; &lt;/span&gt;/&lt;span class="w"&gt; &lt;/span&gt;Wrote&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;68158&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;files&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;248&lt;/span&gt;.58&lt;span class="w"&gt; &lt;/span&gt;seconds&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.6ms&lt;span class="w"&gt; &lt;/span&gt;each,&lt;span class="w"&gt; &lt;/span&gt;v2.0.0-canary.18&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You may get errors in here about being unable to fetch URLs (&lt;code&gt;Image request error Bad response for https://pbs.twimg.com/media/C1VJJUVXEAE3VGE.jpg (404): Not Found&lt;/code&gt; and the like); this is because some Tweets link to images that aren't there any more. There's not a lot you can do about this, but it doesn't stop the rest of the site building.&lt;/p&gt;
&lt;p&gt;Once this is all done, you should have a directory called &lt;code&gt;_site&lt;/code&gt;, which is a website containing your Twitter archive! Hooray! Now you publish that directory, however you choose: copy it up to your website, push it to &lt;a href="https://github.com/tweetback/tweetback/blob/main/docs/deploy-with-github-pages.md"&gt;github pages&lt;/a&gt; or Netlify or whatever. You only need the contents of the &lt;code&gt;_site&lt;/code&gt; directory; that's your whole Twitter archive website, completely self-contained; all the other stuff is only used for generating the archive website, not for running it once it's generated.&lt;/p&gt;
&lt;h1&gt;Step 8: updating the site with newer tweets (optional)&lt;/h1&gt;
&lt;p&gt;If you're still using Twitter, you may post more Tweets after your downloadable archive was generated. If so, it'd be nice to update the archive with the contents of those tweets without having to request a full archive from Twitter and wait two days. Fortunately, this is possible. Unfortunately, you gotta do some hoop-jumping to get it.&lt;/p&gt;
&lt;p&gt;You see, to do this, you need access to the Twitter API. In the old days, people built websites with an API because they wanted to encourage others to interact with that website programmatically as well as in a browser: you built an ecosystem, right? But Twitter are not like that; they don't really want you to interact with their stuff unless they like what you're doing. So you have to apply for permission to be a Twitter developer in order to use the API.&lt;/p&gt;
&lt;p&gt;To do this, as the Tweetback readme says, you will need a Twitter bearer token. To get one of those, you need to be a Twitter developer, and to be that, you have to fill in a bunch of forms and ask for permission and be manually reviewed. Twitter's documentation explains about &lt;a href="https://developer.twitter.com/en/docs/authentication/oauth-2-0/bearer-tokens"&gt;bearer tokens&lt;/a&gt;, and explains that you need to sign up for a Twitter developer account to get them. Go ahead and do that. This is an annoying process where they ask a bunch of questions about what you plan to do with the Twitter API, and then you wait until someone manually reviews your answers and decides whether to grant you access or not, and possibly makes you clarify your answers to questions. I have no good suggestions here; go through the process and wait. Sorry.&lt;/p&gt;
&lt;p&gt;Once you are a Twitter developer, create an app, and then get its bearer token. You only get this once, so be sure to make a note of it. In a clear allusion to the delight that this whole process brings to users, it probably will begin by screaming &lt;code&gt;AAAAAAAAAAAAAAA&lt;/code&gt; and then look like a bunch of incomprehensible gibberish.&lt;/p&gt;
&lt;p&gt;Now to pull in new data, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;TWITTER_BEARER_TOKEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;AAAAAAAAAAAAAAAAAAq3874nh93q&lt;span class="w"&gt; &lt;/span&gt;npm&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;fetch-new-data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(substituting in the value of your token, of course, which will be longer.)&lt;/p&gt;
&lt;p&gt;This will fetch any tweets that aren't in the database because you made them since! And then run &lt;code&gt;npm run build&lt;/code&gt; again to rebuild the &lt;code&gt;_site&lt;/code&gt; directory, and re-publish it all.&lt;/p&gt;
&lt;p&gt;I personally run these steps (&lt;code&gt;fetch-new-data&lt;/code&gt;, then &lt;code&gt;build&lt;/code&gt;, then publish) daily in a cron job, which runs a script with contents (approximately):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;dirname&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Begin&lt;span class="w"&gt; &lt;/span&gt;publish&lt;span class="w"&gt; &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Updating&lt;span class="w"&gt; &lt;/span&gt;Twitter&lt;span class="w"&gt; &lt;/span&gt;archive
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;========================&lt;/span&gt;
&lt;span class="nv"&gt;TWITTER_BEARER_TOKEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;AAAAAAAAAAAAAA9mh8j9808jhey9w34cvj3g3&lt;span class="w"&gt; &lt;/span&gt;npm&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;fetch-new-data&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Updating&lt;span class="w"&gt; &lt;/span&gt;site&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;archive
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==========================&lt;/span&gt;
npm&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Publishing&lt;span class="w"&gt; &lt;/span&gt;site
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;===============&lt;/span&gt;
rsync&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ssh&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-az&lt;span class="w"&gt; &lt;/span&gt;_site/&lt;span class="w"&gt; &lt;/span&gt;kryogenix.org:public_html/twitter&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Finish&lt;span class="w"&gt; &lt;/span&gt;publish&lt;span class="w"&gt; &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;but how you publish and rebuild, and how often you do that, is of course up to you.&lt;/p&gt;
&lt;h1&gt;Step 9: improve the archive (optional, but good)&lt;/h1&gt;
&lt;p&gt;What Tweetback actually &lt;em&gt;does&lt;/em&gt; is use your twitter backup to build an &lt;a href="https://www.11ty.dev/"&gt;11ty&lt;/a&gt; static website. (This is not all that surprising, since 11ty is also Zach's static site builder.) This means that if you're into 11ty you could make the archive better and more comprehensive by adding stuff. There are already some neat graphs of most popular tweets, most recent tweets, the emoji you use a lot (sigh) and so on; if you find things that you wish that your Twitter archive contained, &lt;a href="https://github.com/tweetback/tweetback/issues"&gt;file an issue&lt;/a&gt; with Tweetback, or better still write the change and submit it back so everyone gets it!&lt;/p&gt;
&lt;h1&gt;Step 10: add yourself to the list of people using the archive (optional, but you know you wanna)&lt;/h1&gt;
&lt;p&gt;Go to &lt;a href="https://github.com/tweetback/tweetback-canonical"&gt;tweetback/tweetback-canonical&lt;/a&gt; and add yourself to the &lt;code&gt;mapping.js&lt;/code&gt; file. What's neat about this is that that file is used by tweetback itself. This means that if someone else with a Tweetback archive has a tweet which links to one of &lt;em&gt;your&lt;/em&gt; Tweets, now their archive will link to your archive directly instead! It's not just a bunch of separate sites, it's a bunch of sites all of which are connected! Lots of connections between sites without any central authority! We could call this a collection of connections. Or a pile of connections. Or... a &lt;em&gt;web&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;That's a good idea. Someone should do something with that concept.&lt;/p&gt;
&lt;h1&gt;Step 11: big hugs for Zach&lt;/h1&gt;
&lt;p&gt;You may, or may not, want to get off Twitter. Maybe you're looking to get as far away as possible; maybe you just don't want to lose the years of investment you've put in. But it's never a bad thing to have your data under your control when you can. Tweetback helps make that happen. Cheers to Zach and the other contributors for creating it, so the rest of us didn't have to. Tell them thank you.&lt;/p&gt;</content><category term="General musings"></category></entry></feed>